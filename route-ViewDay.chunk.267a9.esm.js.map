{"version":3,"sources":["webpack:///./routes/ViewDay/ViewDay.tsx","webpack:///./solutions/17/input.ts","webpack:///./solutions/12/index.tsx","webpack:///./solutions/14/input.ts","webpack:///../node_modules/dedent/dist/dedent.js","webpack:///./routes/ViewDay/style.css","webpack:///./solutions/17/index.tsx","webpack:///./solutions/09/index.tsx","webpack:///./solutions/12/input.ts","webpack:///./solutions/01/input.ts","webpack:///./solutions/01/index.tsx","webpack:///./solutions/02/input.ts","webpack:///./solutions/02/index.tsx","webpack:///./solutions/03/input.ts","webpack:///./solutions/03/index.tsx","webpack:///./solutions/04/input.ts","webpack:///./solutions/04/index.tsx","webpack:///./solutions/05/input.ts","webpack:///./solutions/05/index.tsx","webpack:///./solutions/06/input.ts","webpack:///./solutions/06/index.tsx","webpack:///./solutions/07/input.ts","webpack:///./solutions/07/index.tsx","webpack:///./solutions/08/input.ts","webpack:///./solutions/08/index.tsx","webpack:///./solutions/10/index.tsx","webpack:///./solutions/10/input.ts","webpack:///./solutions/11/input.ts","webpack:///./solutions/11/index.tsx","webpack:///./solutions/13/input.ts","webpack:///./solutions/13/index.tsx","webpack:///./solutions/15/input.ts","webpack:///./solutions/15/index.tsx","webpack:///./solutions/16/input.ts","webpack:///./solutions/16/index.tsx","webpack:///./solutions/index.ts","webpack:///./routes/ViewDay/components/ShowCodeButton/ShowCodeButton.tsx","webpack:///./solutions/12/components/Map/Map.tsx","webpack:///./solutions/09/input.ts","webpack:///./routes/ViewDay/index.ts","webpack:///./solutions/14/index.tsx"],"names":["ViewDay","day","dayString","match","Number","parseDay","part","useStore","s","useEffect","setDay","solution","days","class","style","container","url","external","plain","compact","ariaLabel","name","Part1","Part2","buttons","onClick","setPart","classNames","navButtons","disabled","trim","elevation","parseInput","parse2dArray","input","String","getStartAndEnd","map","flattened","flatMap","line","y","cell","x","start","find","end","getPath","dijkstra","pointToKey","key","point","keyToPoint","current","getAdjacent","filter","length","indexOf","path","truthy","reduce","minBy","p","module","exports","strings","raw","result","i","replace","arguments","undefined","lines","split","mindent","forEach","l","m","indent","Math","min","slice","join","Cell","shapes","dedent","shape","Rock","Empty","useSolution","n","showVisualization","setResult","useState","output","setOutput","gen","jets","numRocks","visualize","width","grid","InfiniteGrid","range","set","cellOpen","get","canFit","some","shapeY","shapeX","drawShape","clear","cache","Map","cacheFound","minY","getTopNRows","getCacheKey","j","output2dArray","getVisualization","rows","toArray","cacheKey","has","lastI","lastJ","lastMinY","repeating","times","floor","topRows","dir","newX","newY","dropRocks","id","setIntervalImmediate","value","done","next","clearInterval","deltas","U","dx","dy","D","L","R","size","setDone","numVisited","setNumVisited","rope","Array","fill","tail","prev","moveRope","visited","Set","tick","add","toString","block","process","elves","elf","sum","sort","sortNumDesc","calories","Option","opponent","command","A","B","Paper","C","Scissors","wins","lose","invert","calculateScore","you","score","X","Y","Z","runCommand1","runCommand2","priorities","calculatePriority","sacks","letter","every","sack","includes","total","groupArr","contains","s1","e1","s2","e2","overlaps","stackBlock","instructionsBlock","stack","positions","splice","crates","index","push","instructions","groups","from","to","moveCrates","getTopCrates","c","nTimes","findPacket","str","buildFileSystem","fs","Tree","Symbol","files","cwd","root","cmd","folder","parent","children","d","insert","f","listDirSizes","dirs","getSize","node","totals","values","updateSpace","sizes","neededSpace","postOrderTraversal","sortNum","inBounds","visible","trees","tree","curX","curY","getVisibilityMap","totalVisible","flat","Boolean","scores","product","getScenicScoreMap","bestScore","max","Pixel","run","program","register","cycle","newLine","Off","strength","signals","totalStrength","drawing","pos","abs","On","forced","items","operator","divisible","ifTrue","ifFalse","keepAway","monkeys","calmingMethod","business","monkey","item","shift","num","mod","lcm","pairs","JSON","parse","compare","a","b","left","right","isLeftNumber","isRightNumber","dividers","packets","decoderKey","sensorX","sensorY","beaconX","beaconY","sensor","beacon","getDistance","count","minX","maxX","getNumNoBeacons","frequency","distanceToBeacon","yDistance","getTuningFrequency","acc","flow","tunnel","valves","getMaxPressure","timeYou","timeElephant","yieldEvery","closed","Object","keys","paths","distance","moveTo","time","pressure","openValves","time2","current2","pressure2","remaining","iterate2","newTime","newPressure","next2","newTime2","newPressure2","remaining2","iterate","_","Date","now","solutions","day1","day2","day3","day4","day5","day6","day7","day8","day9","day10","day11","day12","day13","day14","day15","day16","day17","ShowCodeButton","showCode","setShowCode","array","Tile","nums","buildCave","cave","Wall","dropSand","bottom","bottomSolid","isOpen","Flowing","oldX","oldY","Sand","abyss","bounds","setInterval"],"mappings":"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","file":"route-ViewDay.chunk.267a9.esm.js","sourcesContent":["import { h, Fragment } from 'preact'\nimport { useEffect } from 'preact/hooks'\nimport { Button, CodeViewer, Icon, Solution } from '/components'\nimport days, { Solution as SolutionType } from '/solutions'\nimport { setDay, setPart, useStore } from '/store'\nimport NotFound from '../NotFound'\nimport { ShowCodeButton } from './components'\nimport style from './style.css'\nimport { classNames } from '/shared/web-utilities/util'\n\ninterface Props {\n  day?: string\n}\n\nconst parseDay = (dayString?: string) => {\n  if (!(dayString || '').match(/^\\d*$/u)) return null\n  const day = Number(dayString || '1')\n  if (day < 1 || day > 25) return null\n  return day\n}\n\nexport const ViewDay = ({ day: dayString }: Props) => {\n  const day = parseDay(dayString)\n  const part = useStore((s) => s.part)\n\n  useEffect(() => {\n    if (day) setDay(day)\n  }, [day])\n\n  if (!day) return <NotFound />\n  const solution = days[day - 1] as SolutionType | undefined\n\n  return (\n    <div class={style.container}>\n      <h1>\n        Day {day}{' '}\n        <Button\n          url={`https://adventofcode.com/2022/day/${day}`}\n          external\n          plain\n          compact\n          ariaLabel=\"open advent of code problem\"\n        >\n          <Icon name=\"external-link\" />\n        </Button>\n      </h1>\n      {!solution?.Part1 && !solution?.Part2 ? (\n        <p>Day {day} is not yet implemented</p>\n      ) : (\n        <>\n          <div class={style.buttons}>\n            {solution?.Part1 && (\n              <Button onClick={() => setPart(1)}>Part 1</Button>\n            )}\n            {solution?.Part2 && (\n              <Button onClick={() => setPart(2)}>Part 2</Button>\n            )}\n            <ShowCodeButton />\n          </div>\n          <CodeViewer day={day} />\n          {solution && part ? (\n            <div class={style.solution}>\n              <Solution solution={solution} part={part} />\n            </div>\n          ) : null}\n        </>\n      )}\n      <div class={classNames(style.buttons, style.navButtons)}>\n        <Button\n          url={`#/${day - 1}`}\n          plain\n          disabled={day <= 1}\n          ariaLabel=\"Previous day\"\n        >\n          <Icon name=\"chevron-left\" />\n        </Button>\n        <Button\n          url={`#/${day + 1}`}\n          plain\n          disabled={day >= 25}\n          ariaLabel=\"Next day\"\n        >\n          <Icon name=\"chevron-right\" />\n        </Button>\n      </div>\n    </div>\n  )\n}\n","export default `\n>>><<>>><<<>>>><<>>><<<<>>>><<<>>>><<<>>><<<<>><<><>><<<>>>><<<<>><<<>><<<<>>><<<<>>><>><<>><<<>>>><<<<>>><<<<>>>><<<><>>>><><<>>>><<><>>>><<<>><<<>>><<<<>><<><<<<>><<><>><<<>><>>>><<<>>>><<>>>><<><<<>><<>>>><>><<<<>>>><>>><<<>><<<<>>>><<>><<<<><<><<<>>><<<<><<>>>><<><<<>><<<<><<<><<>>>><>><<<<>><>>>><<><><>>><>>>><<<><<>>>><<<><<<<>><<<>>><>>><<>>>><>>><<>><<<<>>>><<<>><<>>><<<<><<<>><>>>><<<<>><<<<><>><<<<>>><>>><<<<>>><<<<>>><<<<>>><<<>><<<>>><<<>><>>><<<<><>><<<<>>>><<<<>><<<>>>><<<<>><<<<>><<<<>>>><<<<>><<<>><<<>><<<>><<>>><<>>>><<<>>>><>>>><>><<<>>>><>><<<><<<<><<<>>>><<><<>>><>><>>>><<<>>><<<<>>><>>>><>>><<<><<>>><<<<><<>>>><<<><>><>>>><<<>><<<>><<<><<<<>><>><<<<>>><>>>><<>>><<>><>>>><<<<><>>><>><><>>>><<<><<<>>>><><<<<><<<><<<<>>><<<>><<<<>>><>>><<<<>>><<>><<<>>><<>><<<<><<<<><<<<>><<<>>><<>>>><>><<<<>>><><<>>><<<>>>><>>>><>>><<<<>>><<<<>><<<<><><>><<<<>><<>>>><>>>><<><<>>>><><<<>>><<>>>><<<>>><<<<>><<<<>>>><<<<>><<<><<>>>><<<<>>>><<<>>><<><<<>>><><<<>>>><<<<>>><>>><>>>><<<<>><<<>><<><<<>><>><>><<<><<<>>>><>><><>>>><<>>><<>><>><<<>><><<<<>>>><<>>><<>>><<>><<<>>><<<<>><<<<>>>><>>><<<<>><><<<>>>><<>><>>>><>>>><>>>><>>>><>>><<<<>><><<<<>>>><<<<>><><<<<><>><<>>><>>><<<>><><<>>>><<<>>><<<<>>>><<<>><<<<>>>><<<>>>><<<<>>>><<><<<<>>>><<<><<<>><<<<><<<>>><><<<>><<>><<<>>><<<><<<>>>><<<<>><<<<>><<>><<<<>><>><>>><<<<><>>>><<>><<<><<>><<<<><<><<<<>><>>><>><<<>>><<<>><<<<>>>><<<<>>>><<<>>><<<<>><>>><<>><<<><<<<>>>><<>>>><<<<>><<<<>><<<>>>><<>>>><><><<>><><<<><<<>>><>>><<<<>>>><<<>><<<<>>><<<<>><<<>>><<<<>>>><<><>><<<<><<<<>><<<><<><><><<<<>><<<<>>><<<>><>>>><>>><<<<>>><<<<><<>>><<<<><<>><<<><<<<>><<>>>><>><>><<<>>>><<<<>>><<<><<<>>>><<<><<<>>>><<<>><>>><<>>><<<><<<<>>>><>>>><<<<><<>><<>>><<><>>>><>>><><<>>>><>>><><>><<<>>>><<<><>><<>>>><<<<>>><<><<>>>><>><<>>><<<<><<>>>><<><>>><<<><<><<<<>><<<<>>>><<>><>><<>><>>>><<<>>>><<<<>><><<>>>><<<><<>>><<<>>>><<<>>><<>>>><<<<>>><>>><<<><<>>><><>>><<<>>>><<<<>>><<>>>><<>>><<<<>>>><<<>><><<>><<<>>><<>><<<>>>><<>><<>>><<>>>><<<>>>><<<>>><>>>><<><<<<><<<>>><<<><<<>>><<>>>><>><<<>><<>>>><><>>>><>>><<<>><<<>>>><<>>><<>><><<<>><<<<>><>>><>>>><<<<>><<<>>><<>>><<>>><<<<>>>><<>>>><>>><<<<>>><<<>><<<><<<>><<<<><<>>>><<>><>>><<<>>>><<><<<<>>>><<<>>>><<<><<<>><<<<><<<<><<>>>><<<<>>>><<<><<<<>>><<<<>><<><<<<>>>><>>><<<<>><<>><<<<>>>><<<>><<>>><<<><<<<>>><<>>>><<>>>><<<<>><>>>><<<<><>><>><<>>>><>>>><<<<>>><<<<>>><<<>>>><<<>>><<>>><<<<><><<>>><<><<<<>>><<>><<<>><<>><>><<<><<><<>>><<>>><<>>>><<>><<<><<<<>>><<<>>><<><>>><<<<>><<<<>>><<<>><>><<<<>><<<<>><<<<><>><>>><><>><<<>><>><>><<>><>>>><<<<>>><>><<>><<<<><<<>>>><<<<>>>><<<<><>>>><<<<><<<<>>>><>>>><><>>>><>>><<<<><<<<>>>><<<<><<<<>><<<<><<<<><<<>><<<>>><<>>>><<<<>>><><<>>>><<<><>>>><<<>><<<>>><<<>>>><>>><<<<><>>><>>>><<>>><>><<<<>><>><>><>>>><<<<><<>><<<>>><<<<>><<<<><<<<>><<<>><<>>>><<<>>><<><<><<<<>>>><<<>>>><<<>>><>><<<<>>>><<<<><<<<>>><<><<<<>>>><<<>><>>><>>>><<<>>>><<>>><>>><<<>><<<<>>><<><<<><<<<><<<<>><<<<>>><<>>>><<>><<>><<<<>>>><<<>>><<<<>>>><><<><<<>>>><><<>>><><><<<><<<<><><>>>><<<>>>><<><><<>><<>>><<>>><<<<>>>><<>><<<<>>><<<>>>><<<<>>><<>>>><<<>>>><>>><>>><<<><>><<<<>><<<>>>><<<<>><><<>>>><<<><<>><>><<<<><<><<<>>>><<><<>><<>><<<<>>>><<<>><<>>>><<>>>><<>>><>>><<<<>><<<<>>>><<<<>>>><><<<<>>>><<<>>>><><>>>><<<>>><>>><>>>><>>><<>><<<>><>>><>>><<<<>>><<>>>><<<>><<>>><<><<<<>>><<<><<<<>>>><>><<<>><<<>><>>><<<>>><<<<>>><<>><<<<>>><>>>><><<<>><<<<>>><<>>><<<<>>>><<<>><<<<>>><>><<<<><<<>>><<><<<<>>><<<>>><>>><>>><<>>>><<<<><<<>>>><<<>>>><>>>><<>>>><<<<>>>><<<>>><<<<>><<<<>><>>><<<<>>>><>>><<<>>>><><<<<>>>><<<>><>><<<<><>><>><<<<>>>><>>><<<<>><>><<><>>>><<<>>>><<<><>><<<<>><<><><<<>><<>>><<<>>>><>>><<>>><<<<><>>><<><>>>><<><<>><<<><<>><>>>><>>>><<><<<<>><<>>><<<<>><<<>>><<<<>>><>>>><>>><>>><<<<>>>><<<<>>>><<><>><<<<>>>><<>>><<<<><<>><<<<>>>><>><>><<<>>><>>><<>>>><<<<>><<><<<>>><><<<<><<<>><<<>>>><<<>>><>><<<<><<<<><<<<><>>>><<<<>><<>>><<>>>><<>>><><<<<>>><<>><<<>><<><<>>>><<<<>>>><<<<>>><<><<><<>>>><<>>><>>>><<<<>>>><<<>><<><<<>>><<<<>>><><<<>>>><<<><>>><<<>>>><<<<>>>><<>>><>>><<<<>>><<>><<<>>><>>>><><<>><>>>><<<<>>><>>>><<<><>>><<<<>>><><<<>>>><<<<>><<<<><><<<<>><<<>>>><>>><<>><<><<<<>><>>>><>>><<>>>><<<<>><<<<><<>>>><<>>>><>>>><<>><<<<>>><<<<>>><<><<>>>><>>><<<<>>>><<<>>>><><<<>><<<><>>>><<>><<>>>><<>><<<<>><><<>>>><<>>>><<>>>><<>>>><<<<>>><>><<<>>><<>><<>>>><<>>>><><<<><<<>>><<>><<><>><><<>>><><<<>>>><<><<<<>>>><<<<>><><<<>><>>><<<>>><<><>>>><><>><<<>>>><<>><<>><<>>><>>><<<>>><<<>>>><<<<><<><<<<>>>><<<>>>><<<><<<<>>><<<>>>><<>><<<>><><<<>>>><<<><><<>>><<<<>><<>>><>>><<<<>>><>>><<<>><>>>><<>><<<>><<<<>>><><<><<>>><<>><<<<><<<>>>><<<>>><<>><<<<>>><<<<>><<>>>><><><<<<>>><<<<>>><>>>><<>>><>>>><<<<>><<<<><<<>><>><<<>><>>>><><<<>>>><<<>>><<<>>>><>>><<<<>><>>><<<<>>><<<>><>><<<>>><<><<>>>><<>>><<<><<<<>>>><<>><>><<>><>>>><<<<>>>><<<>>><>><<<>><>><<<>><><<<<>>><<<<><<<<><<>>>><>>>><<>>><>><>><<<>>>><>><<>>>><<<<>><<<<><<<>>>><>>>><<<<>><<<>>>><<>>><<<><<<><<<<>><<<<><><<><<<>><<<<>><<<<>>><<<><>><<<>>><<>>>><><<<<>><<<>>>><<<<>>><<<<>>><>>><<<<>>>><<>><<<<><<<<>><>><<<>>>><>>><>><<<<>>>><<<<>><<>><<<<>>><<>>>><<>><<<>>>><<<<>>><<>>>><>>><>>><<<>><<<>>><>><<<<>><<<>>><>>>><<>>><<<<><<<><>><>><<<<>><<<<>>><><<<><<<>>><>><<<<>><<<<><<<>>><<>>><<<<>><<<>>>><<>>>><<<>>>><<<>><<<>>>><<>><<><<<>>>><<>>>><<><<<<>>>><<<<><<<>><<>>><><<<<>>>><<><<<<>>><<<>>><<<<>><<>>><<<>><<<>>><<<<>>>><<<>>><>>>><<<<><<<>>>><<<<>><>><<<<>>>><<<>><<<><<>>><><><<>>><<<<>>><<<><>>>><<<>>><<<<><<><><<>>>><<<<>><<<>>>><<<>><<><<<<>><<>>>><<<>>><>><>>><<<<>>>><><>><<><<>>>><<<>>><><<<>>>><<<<>><<<>>>><<<<>>>><<<<>><><>>><<<>>>><<<>>><<>><<<>><>><<>>><<<>>>><<>>>><<<<><>><<><<<<><<<><<<><>>>><<<><<<><<<>>>><<<>>>><<<>>><><<>>>><<<>>><<<>>><<<<><<<<>><<<<>><<<><<>>>><<<<><>>>><><<<>>>><<<>>><<<>><>>><<>>><<<>><><>>><<>><<<<>><<<<>><<>>>><><<<<>>><>>><<<>>><<<<>>>><<<<><<<><>><<<<><<<<><<<<><<<<>>>><<><<>>>><<>>><>><<>>><<<>>>><><>>><>><<<>>><<>>><>>>><<>><<>>>><<>><<<>>>><<<>>><<<<>>><<>>>><<<<><<<<>>><<<<>>>><<>><<<>>><<<<>>><>><<<<>><<<>>><<<>>><<<>>>><<<>>><<>><>>>><<<<><<>><<>>>><>>><<<>>>><<<<>>><<<>>><<>>>><<<<>>><<>>><<<<>>>><>>><<<<><<><>>>><<<<>>>><>><<><<<>>>><<>>>><>>>><<<><<<<>>>><<<>>>><<>>><<<<>><<>>><>><>>>><<<<><<<<>>>><<>>><<<>><<>><>><<>><<>>><<>>>><<>><<<>>>><><<><><<<>><<<<><<<>>>><>>><<>>><<<>><>>><<>><<<>>><>>>><<<>>><<>>><<>><>>><<><<<>>>><<<<>>>><<<>>><<>><<><<<>>>><<<<>><>>><<<<><<<<>>>><<<>>><<<>><<<<>>><<<<>>>><<<><<>><<>>>><<><<>><<>>><<<>><<><>>><>>><>><<<>>><<>><<>>>><><<<>>>><<>>>><<>>><>>>><<>>><<<><<>><<<>>>><<<<><<<<><<>>>><<<><>>><<<><<>><<<>>><<<><><<>>><<>>><<<<><>><<>><<<><<>>><<><>>><<<<>>>><>>>><<<<><<><<<>>>><<<>><<>>>><<<><<>>>><>>><<<>>>><<<<>>>><<><<<<>>>><<>>><>>>><<<><<<<><<<<>>><<<>><<<<>><<<>><<><<<>>><<<>>><<<>><<<<><<<<>><<<<>>><<<>><>>><<<<><<>>><>><<>>><<<<>>>><>>><>><<<>>><<>>><<>>>><<<><<>><>><>><<<>>>><>>>><><>><>>><<<>><<<<><<<<>><><<<>><<<>>><<<<><<>><<<<>>><><<><<<>>><<<>><>>>><>>>><<<>>><<<<>><<>>><<<<>><<>><><<<>><<>>><<>>><<<>>><<<<><<<<>>>><>>>><<<<>>><<<<>>><<<<>>><>><<><<>>><<<>><>>><<>>>><<<>>>><<>>><>>>><>><<>>><><<<<>><<<<><<<<><<<>>><<<<>>><<>><<<<>>><<<>>>><><<>><>><>>>><<<<>>><<<<>>>><<<<><<>><<<<>>>><<<>><<<<>>><<<<>>>><>>>><<<>><>>><<<<>>>><<<<><<<<>>>><<>><<<<>>><<<<><<><<<<>><>>><<<>>><<<>>><<<>>><<<>><<<<>>>><<<>>><>>>><<<<>>>><<>>><><<>><>><>><>><>>>><<<<>>>><<<>>>><<<<>><<<<>><<<<>>><<><>>>><>>><<<<>><<<>><<<<>><<>><><><<<>>><>><><<>><>>><<<><>>><>>>><<><<<<>>>><<>><<>><<<><<>>><<>>>><<<<>>><<<>><<>>><<<<><<<>>>><<<<>>>><><>>>><>><<>>><<<<>>><<>><<<>>><<<<>><>>><<>><<><<>><<>>>><<<<><<<<>><<<<>>>><<<<><<<<><><>>>><<>>><><<>>>><<<><>>>><<<<>>><<<<>>>><<<<>><<<>>>><<<<>><<<><<<<>>><<<<>>>><>><>>><<<><><<<>>>><<<<>>><>><>>><<>>><<>><<>>>><>>><<><<><><<>><<<>><>>><>>>><>>><>>><<>>><<<<><>><<><<<>><<<<>>><<<><>>><<>><>><<<<>>><>><<<<>>>><>>>><>>><>><<<><<>>><<>><<<<>>><<<<>><<><<<<><<>><<<><<<><><<<<>><<>><<<<><<<<>><>><<>><>><<<<>>><><><<<<>><<<>><<<>>><<<<>>>><<<><><<<><<><>><<<<>>>><><>><>>>><<><>>>><<>>><>><<>>>><<<>>><>>>><<>>>><<>>><<<><<<<>>>><<<<><<<>>>><<>><<<<>>>><<<><>>>><<<><<<><<<>><<<>><<<>><<<>><<>>>><<<>>><<>><<<<>><<><<>>><<<<><><<<<><>>>><<>><<>>><<<>><<<>>><<<>>>><<<>>>><<<<><<<><<<<>>><<>><<<><<<<>><<<>>>><<<><>>>><>>><<<><>><<<>>>><<<<>><<<<>>><<<<>>><>>><<<>><<<>>>><>>><<><<><<<>><<<>>>><<><<><>>>><<><<<<>>><<<<>>><<<>>>><<>>>><<<><<<<>>><<><<<>>>><<>><<<<>>><><<<<><<>><<<>>><<<>>>><<<<>>><><><<<>>><<<>>>><>>><>>><>>>><<<<>>>><>>><<<<><<><<<>>>><<<<><<<>><>><<<><<<><<>>><<<<>>><<>>><<<><<<<>>><<<<><<<<>><<><<<<>>><<>>>><>><<>>>><<<>>><><>>>><<<<>>><>><<<>>>><<><<>><<>>>><<<<>>>><<<<>>><>>><<<<>>>><<>>>><<<>>><<<<>><<>>>><<>>><>>><<<<>>><<<<>><>>><>>>><><><<>><<<<>>><<<>><<<>>><<>>><<><>>><>>>><<>><<<<>>><<<>>>><<>><>>>><<<<><>>>><<>><<><<<>>>><<<<><<<>>>><<<<>>><<<<>><><>>><><<<<>>><<<><<>>>><<<>>><<>>><<<<>>>><>>><>><>>>><>><<>>>><<<><<>>>><<<<><>><<>>><<>>>><<>><<>>>><>>>><<>>>><<<>>><<<<>>><<<<>>>><<<<>>><<>>>><<>>>><<<>><>>>><<<<>>>><<<<><<><<<<>>>><<<>><>><<>>>><<><><<<<>><<<<>><<<>>>><<<<>><<>>>><<<><<<<>>><>>><<<<><<<>>><<<>>>><<<><>><>><>>>><<<<>>>><<<>><<<<>><<<><<<<>>>><<<>><>>>><<<<>>><<<>>><<>><<<<>>><<<>><<<><>>>><>>><<<<><><><<<<>><<>><<<>>><<<<>><<>>><<>>>><<<>><<<><<>>><<<>>>><<>>><<<<>><<>>>><>><><<<<>><<<<>>>><>>>><<<>>>><<<<><<>>>><>>>><<<><<<>>>><<<>>>><<>><<>><<<>>>><>>><<<>>>><<<<>>><>>><<><<<><<<<>>><<>><<<<>>>><<<<>>>><<>><>><<>>><<<<><>>>><<<>>><<><<<<>>><>>><<>><<<<><<<>>><<<>><<<><<<>><<><>>>><<<><<<><<<>><<>>>><>>>><>><<<<>>>><<>><<<><><<>>>><<>>>><<<>><<<><<<>>>><<<>>><<>><<<>>>><<<<><<<<>><<>>><><<>>>><<<<>><<<<><<<><<<>><<>>>><<<<>>><<<><<<>>>><<<>>>><<>><<<><<<<>>><>>>><<<<><<<<>>><<<<>><<<><<<>>><<>>>><<>>>><<<<>>><<<>>>><<<<><><<<<>>><<<<>><<>><<><<>><<>><<<>><>>>><<<>><>><>><<<<>><><><>><><<<<>>><<<>>>><<>>>><<<>><<><<<>><<<>>>><>>><<<><>>>><>>>><<><>>>><<<>><<<>>><<<<>><<>><<<<>>>><<<>>><<>>>><<>>><<<><<<<><<>>><<<<>>>><<>>>><>><<>>><<<<>>>><<<>>><<>><<>>>><<<>><<>>>><<>>>><<<<>>><><<<>>>><<<<>>>><><<>>><<<>><>>><>>><<<<>>><><<>><<<<><<>>>><>>>><<<>>><<>><>><<<<>>><><<<<><>>><<<><<<>>><<<>>>><>><<<<>>><<<>>><<<>><>><<<<><<>>>><<<<>><>>>\n`.trim()\n","import { h, Fragment } from 'preact'\nimport { Answer } from '/components'\nimport { Map } from './components'\nimport input from './input'\nimport {\n  dijkstra,\n  getAdjacent,\n  keyToPoint,\n  minBy,\n  parse2dArray,\n  Point,\n  pointToKey,\n  truthy\n} from '../util'\n\nconst elevation = 'abcdefghijklmnopqrstuvwxyz'\n\nconst parseInput = () => parse2dArray(input, String)\n\nconst getStartAndEnd = (map: string[][]) => {\n  const flattened = map.flatMap((line, y) =>\n    line.map((cell, x) => ({ y, x, cell }))\n  )\n  const start = flattened.find(({ cell }) => cell === 'S')!\n  const end = flattened.find(({ cell }) => cell === 'E')!\n  map[start.y][start.x] = 'a'\n  map[end.y][end.x] = 'z'\n  return { start, end }\n}\n\nconst getPath = (map: string[][], start: Point, end: Point) =>\n  dijkstra(pointToKey(start), pointToKey(end), (key) => {\n    const point = keyToPoint(key)\n    const current = map[point.y][point.x]\n    return getAdjacent(point)\n      .filter(\n        ({ x, y }) =>\n          x >= 0 &&\n          y >= 0 &&\n          x < map[0].length &&\n          y < map.length &&\n          elevation.indexOf(map[y][x]) - elevation.indexOf(current) <= 1\n      )\n      .map(pointToKey)\n  }).path\n\nexport const Part1 = () => {\n  const map = parseInput()\n  const { start, end } = getStartAndEnd(map)\n  const path = getPath(map, start, end)!\n\n  return (\n    <>\n      <p>\n        The fewest steps required to get from your current location to the\n        location with the best signal is <Answer>{path.length - 1}</Answer>.\n      </p>\n      <Map map={parseInput()} path={path} />\n    </>\n  )\n}\n\nexport const Part2 = () => {\n  const map = parseInput()\n  const { end } = getStartAndEnd(map)\n  const path = map\n    .flatMap((line, y) =>\n      line\n        .map((cell, x) => cell === 'a' && getPath(map, { x, y }, end))\n        .filter(truthy)\n    )\n    .reduce(minBy((p) => p.length))\n  return (\n    <>\n      <p>\n        The fewest steps required to get from any location at elevation a to the\n        location with the best signal is <Answer>{path.length - 1}</Answer>.\n      </p>\n      <Map map={parseInput()} path={path} />\n    </>\n  )\n}\n","export default `\n498,13 -> 498,17 -> 491,17 -> 491,21 -> 507,21 -> 507,17 -> 502,17 -> 502,13\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n498,13 -> 498,17 -> 491,17 -> 491,21 -> 507,21 -> 507,17 -> 502,17 -> 502,13\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n468,113 -> 472,113\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n438,152 -> 442,152\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n474,117 -> 478,117\n495,39 -> 511,39 -> 511,38\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n471,93 -> 483,93 -> 483,92\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n498,13 -> 498,17 -> 491,17 -> 491,21 -> 507,21 -> 507,17 -> 502,17 -> 502,13\n441,150 -> 445,150\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n456,125 -> 456,128 -> 453,128 -> 453,134 -> 462,134 -> 462,128 -> 460,128 -> 460,125\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n471,93 -> 483,93 -> 483,92\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n456,125 -> 456,128 -> 453,128 -> 453,134 -> 462,134 -> 462,128 -> 460,128 -> 460,125\n503,64 -> 503,67 -> 496,67 -> 496,71 -> 512,71 -> 512,67 -> 508,67 -> 508,64\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n456,125 -> 456,128 -> 453,128 -> 453,134 -> 462,134 -> 462,128 -> 460,128 -> 460,125\n493,78 -> 497,78\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n483,48 -> 487,48\n484,81 -> 484,84 -> 481,84 -> 481,88 -> 492,88 -> 492,84 -> 488,84 -> 488,81\n498,13 -> 498,17 -> 491,17 -> 491,21 -> 507,21 -> 507,17 -> 502,17 -> 502,13\n465,115 -> 469,115\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n462,117 -> 466,117\n471,115 -> 475,115\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n456,125 -> 456,128 -> 453,128 -> 453,134 -> 462,134 -> 462,128 -> 460,128 -> 460,125\n498,13 -> 498,17 -> 491,17 -> 491,21 -> 507,21 -> 507,17 -> 502,17 -> 502,13\n499,78 -> 503,78\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n503,64 -> 503,67 -> 496,67 -> 496,71 -> 512,71 -> 512,67 -> 508,67 -> 508,64\n450,156 -> 454,156\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n498,13 -> 498,17 -> 491,17 -> 491,21 -> 507,21 -> 507,17 -> 502,17 -> 502,13\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n495,48 -> 499,48\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n498,46 -> 502,46\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n487,78 -> 491,78\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n495,44 -> 499,44\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n486,46 -> 490,46\n483,97 -> 492,97 -> 492,96\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n468,117 -> 472,117\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n484,81 -> 484,84 -> 481,84 -> 481,88 -> 492,88 -> 492,84 -> 488,84 -> 488,81\n444,152 -> 448,152\n489,48 -> 493,48\n492,42 -> 496,42\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n484,81 -> 484,84 -> 481,84 -> 481,88 -> 492,88 -> 492,84 -> 488,84 -> 488,81\n496,76 -> 500,76\n503,64 -> 503,67 -> 496,67 -> 496,71 -> 512,71 -> 512,67 -> 508,67 -> 508,64\n503,64 -> 503,67 -> 496,67 -> 496,71 -> 512,71 -> 512,67 -> 508,67 -> 508,64\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n456,125 -> 456,128 -> 453,128 -> 453,134 -> 462,134 -> 462,128 -> 460,128 -> 460,125\n435,154 -> 439,154\n503,64 -> 503,67 -> 496,67 -> 496,71 -> 512,71 -> 512,67 -> 508,67 -> 508,64\n441,154 -> 445,154\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n447,154 -> 451,154\n459,121 -> 459,122 -> 470,122 -> 470,121\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n495,39 -> 511,39 -> 511,38\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n493,74 -> 497,74\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n484,81 -> 484,84 -> 481,84 -> 481,88 -> 492,88 -> 492,84 -> 488,84 -> 488,81\n492,46 -> 496,46\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n444,156 -> 448,156\n459,121 -> 459,122 -> 470,122 -> 470,121\n459,121 -> 459,122 -> 470,122 -> 470,121\n438,156 -> 442,156\n490,76 -> 494,76\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n432,156 -> 436,156\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n456,125 -> 456,128 -> 453,128 -> 453,134 -> 462,134 -> 462,128 -> 460,128 -> 460,125\n489,44 -> 493,44\n483,97 -> 492,97 -> 492,96\n503,64 -> 503,67 -> 496,67 -> 496,71 -> 512,71 -> 512,67 -> 508,67 -> 508,64\n484,81 -> 484,84 -> 481,84 -> 481,88 -> 492,88 -> 492,84 -> 488,84 -> 488,81\n484,81 -> 484,84 -> 481,84 -> 481,88 -> 492,88 -> 492,84 -> 488,84 -> 488,81\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n484,81 -> 484,84 -> 481,84 -> 481,88 -> 492,88 -> 492,84 -> 488,84 -> 488,81\n456,125 -> 456,128 -> 453,128 -> 453,134 -> 462,134 -> 462,128 -> 460,128 -> 460,125\n506,61 -> 506,57 -> 506,61 -> 508,61 -> 508,56 -> 508,61 -> 510,61 -> 510,55 -> 510,61 -> 512,61 -> 512,56 -> 512,61 -> 514,61 -> 514,56 -> 514,61 -> 516,61 -> 516,60 -> 516,61 -> 518,61 -> 518,55 -> 518,61\n503,64 -> 503,67 -> 496,67 -> 496,71 -> 512,71 -> 512,67 -> 508,67 -> 508,64\n502,34 -> 502,33 -> 502,34 -> 504,34 -> 504,31 -> 504,34 -> 506,34 -> 506,27 -> 506,34 -> 508,34 -> 508,25 -> 508,34 -> 510,34 -> 510,32 -> 510,34 -> 512,34 -> 512,33 -> 512,34\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n474,110 -> 474,103 -> 474,110 -> 476,110 -> 476,103 -> 476,110 -> 478,110 -> 478,108 -> 478,110 -> 480,110 -> 480,100 -> 480,110 -> 482,110 -> 482,103 -> 482,110 -> 484,110 -> 484,104 -> 484,110 -> 486,110 -> 486,103 -> 486,110 -> 488,110 -> 488,101 -> 488,110\n498,13 -> 498,17 -> 491,17 -> 491,21 -> 507,21 -> 507,17 -> 502,17 -> 502,13\n501,48 -> 505,48\n444,147 -> 444,142 -> 444,147 -> 446,147 -> 446,142 -> 446,147 -> 448,147 -> 448,140 -> 448,147 -> 450,147 -> 450,137 -> 450,147 -> 452,147 -> 452,138 -> 452,147 -> 454,147 -> 454,142 -> 454,147 -> 456,147 -> 456,145 -> 456,147 -> 458,147 -> 458,140 -> 458,147\n`.trim()\n","\"use strict\";\n\nfunction dedent(strings) {\n\n  var raw = void 0;\n  if (typeof strings === \"string\") {\n    // dedent can be used as a plain function\n    raw = [strings];\n  } else {\n    raw = strings.raw;\n  }\n\n  // first, perform interpolation\n  var result = \"\";\n  for (var i = 0; i < raw.length; i++) {\n    result += raw[i].\n    // join lines when there is a suppressed newline\n    replace(/\\\\\\n[ \\t]*/g, \"\").\n\n    // handle escaped backticks\n    replace(/\\\\`/g, \"`\");\n\n    if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\n      result += arguments.length <= i + 1 ? undefined : arguments[i + 1];\n    }\n  }\n\n  // now strip indentation\n  var lines = result.split(\"\\n\");\n  var mindent = null;\n  lines.forEach(function (l) {\n    var m = l.match(/^(\\s+)\\S+/);\n    if (m) {\n      var indent = m[1].length;\n      if (!mindent) {\n        // this is the first indented line\n        mindent = indent;\n      } else {\n        mindent = Math.min(mindent, indent);\n      }\n    }\n  });\n\n  if (mindent !== null) {\n    result = lines.map(function (l) {\n      return l[0] === \" \" ? l.slice(mindent) : l;\n    }).join(\"\\n\");\n  }\n\n  // dedent eats leading and trailing whitespace too\n  result = result.trim();\n\n  // handle escaped newlines at the end to ensure they don't get stripped too\n  return result.replace(/\\\\n/g, \"\\n\");\n}\n\nif (typeof module !== \"undefined\") {\n  module.exports = dedent;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container__lXqO1\",\"buttons\":\"buttons__cmZ9r\",\"navButtons\":\"navButtons__Q-4cn\",\"link\":\"link__nQLWE\"};","import { h, Fragment } from 'preact'\nimport dedent from 'dedent'\nimport { Answer, Visualization } from '/components'\nimport input from './input'\nimport { InfiniteGrid, output2dArray, parse2dArray, range } from '../util'\nimport { useEffect, useState } from 'preact/hooks'\nimport { setIntervalImmediate } from '/shared/web-utilities/util'\nimport { useStore } from '/store'\n\ntype Dir = '<' | '>'\n\nenum Cell {\n  Empty = ' ',\n  Rock = '█'\n}\n\nconst parseInput = () => [...input] as Dir[]\n\nconst shapes = [\n  '####',\n  dedent(`\n    .#.\n    ###\n    .#.\n  `),\n  dedent(`\n    ..#\n    ..#\n    ###\n  `),\n  dedent(`\n    #\n    #\n    #\n    #\n  `),\n  dedent(`\n    ##\n    ##\n  `)\n].map((shape) =>\n  parse2dArray(shape, (cell) => (cell === '#' ? Cell.Rock : Cell.Empty))\n)\n\nconst dropRocks = function* (\n  jets: Dir[],\n  numRocks: number,\n  visualize = false,\n  width = 7\n): Generator<string | number> {\n  const grid = new InfiniteGrid(Cell.Empty)\n  range(0, width - 1).map((x) => grid.set(x, 0, Cell.Empty))\n\n  const cellOpen = (x: number, y: number) =>\n    x >= 0 && x < width && y <= 0 && grid.get(x, y) === Cell.Empty\n\n  const canFit = (shape: Cell[][], x: number, y: number) =>\n    !shape.some((line, shapeY) =>\n      line.some(\n        (cell, shapeX) =>\n          cell === Cell.Rock && !cellOpen(x + shapeX, y + shapeY)\n      )\n    )\n\n  const drawShape = (shape: Cell[][], x: number, y: number, clear = false) =>\n    shape.forEach((line, shapeY) =>\n      line.forEach(\n        (cell, shapeX) =>\n          cell === Cell.Rock &&\n          grid.set(x + shapeX, y + shapeY, clear ? Cell.Empty : Cell.Rock)\n      )\n    )\n\n  const cache = new Map<string, [number, number, number]>()\n  let cacheFound = false\n  let minY = 1\n\n  const getHeight = () => minY * -1 + 1\n\n  const getTopNRows = (n: number) =>\n    range(minY, minY + n - 1).map((y) =>\n      range(0, width - 1).map((x) => (cellOpen(x, y) ? Cell.Empty : Cell.Rock))\n    )\n\n  const getCacheKey = (i: number, j: number) =>\n    [output2dArray(getTopNRows(5)), i % shapes.length, j % jets.length].join(\n      ';'\n    )\n\n  const getVisualization = (rows = 20) =>\n    output2dArray(\n      grid.toArray(\n        { x: 0, y: Math.min(minY - 3, -rows) },\n        { x: width - 1, y: Math.min(0, minY - 3 + rows) }\n      )\n    )\n\n  for (let i = 0, j = 0; i < numRocks; i++) {\n    if (!cacheFound) {\n      const cacheKey = getCacheKey(i, j)\n      if (cache.has(cacheKey)) {\n        cacheFound = true\n        const [lastI, lastJ, lastMinY] = cache.get(cacheKey)!\n        const repeating = i - lastI\n        const times = Math.floor((numRocks - i) / repeating)\n        const topRows = getTopNRows(repeating)\n        minY -= (lastMinY - minY) * times\n        drawShape(topRows, 0, minY)\n        i += repeating * times\n        j += (j - lastJ) * times\n      } else cache.set(cacheKey, [i, j, minY])\n    }\n\n    const shape = shapes[i % shapes.length]\n    let x = 2\n    let y = minY - shape.length - 3\n    while (true) {\n      const dir = jets[j % jets.length]\n      j++\n      const newX = dir === '<' ? x - 1 : x + 1\n      if (canFit(shape, newX, y)) x = newX\n      const newY = y + 1\n      if (!canFit(shape, x, newY)) break\n      y = newY\n      if (visualize) {\n        drawShape(shape, x, y)\n        yield getVisualization()\n        drawShape(shape, x, y, true)\n      }\n    }\n    drawShape(shape, x, y)\n    minY = Math.min(minY, y)\n    if (visualize) {\n      yield getVisualization()\n    }\n  }\n  yield getHeight()\n}\n\nconst useSolution = (n: number) => {\n  const showVisualization = useStore((s) => s.showVisualization)\n  const [result, setResult] = useState<number>()\n  const [output, setOutput] = useState<string>()\n\n  useEffect(() => {\n    setResult(undefined)\n    setOutput(undefined)\n    const jets = parseInput()\n    const gen = dropRocks(jets, n, showVisualization)\n\n    const tick = () => {\n      const { value, done } = gen.next()\n      if (value) {\n        if (typeof value === 'number') setResult(value)\n        else if (showVisualization) setOutput(value)\n      }\n      if (done) clearInterval(id)\n    }\n    const id = setIntervalImmediate(tick, showVisualization ? 40 : 0)\n    return () => clearInterval(id)\n  }, [showVisualization, n])\n\n  return { result, output }\n}\n\nexport const Part1 = () => {\n  const n = 2022\n  const { result, output } = useSolution(n)\n\n  return (\n    <>\n      {result && (\n        <p>\n          The tower will be <Answer>{result}</Answer> units tall after {n} rocks\n          have stopped falling.\n        </p>\n      )}\n      <Visualization>{output}</Visualization>\n    </>\n  )\n}\n\nexport const Part2 = () => {\n  const n = 1000000000000\n  const { result, output } = useSolution(n)\n\n  return (\n    <>\n      {result && (\n        <p>\n          The tower will be <Answer>{result}</Answer> units tall after {n} rocks\n          have stopped falling.\n        </p>\n      )}\n      <Visualization>{output}</Visualization>\n    </>\n  )\n}\n","import { h, Fragment } from 'preact'\nimport { Answer, Visualization } from '/components'\nimport input from './input'\nimport { getAdjacent, InfiniteGrid, output2dArray, pointToKey } from '../util'\nimport { useStore } from '/store'\nimport { useEffect, useState } from 'preact/hooks'\nimport { setIntervalImmediate } from '/shared/web-utilities/util'\n\ntype Dir = 'U' | 'D' | 'L' | 'R'\ninterface Instruction {\n  dir: Dir\n  times: number\n}\n\nconst parseInput = () =>\n  input\n    .split('\\n')\n    .map((line) => line.split(' '))\n    .map(([dir, times]) => ({ dir, times: Number(times) } as Instruction))\n\nconst deltas = {\n  U: { dx: 0, dy: -1 },\n  D: { dx: 0, dy: 1 },\n  L: { dx: -1, dy: 0 },\n  R: { dx: 1, dy: 0 }\n}\n\nconst moveRope = function* (path: Instruction[], size = 2) {\n  const rope = Array(size)\n    .fill(null)\n    .map(() => ({ x: 0, y: 0 }))\n  yield rope\n\n  for (const { dir, times } of path) {\n    for (let n = 0; n < times; n++) {\n      const { dx, dy } = deltas[dir]\n      rope[0].x += dx\n      rope[0].y += dy\n      for (let i = 1; i < rope.length; i++) {\n        const tail = rope[i]\n        const prev = rope[i - 1]\n        if (\n          ![...getAdjacent(tail, true), tail].some(\n            ({ x, y }) => x === prev.x && y === prev.y\n          )\n        ) {\n          if (tail.x !== prev.x) rope[i].x += prev.x < tail.x ? -1 : 1\n          if (tail.y !== prev.y) rope[i].y += prev.y < tail.y ? -1 : 1\n        }\n      }\n      yield rope\n    }\n  }\n}\n\nconst useSolution = (size = 2) => {\n  const showVisualization = useStore((s) => s.showVisualization)\n  const [done, setDone] = useState(false)\n  const [numVisited, setNumVisited] = useState(0)\n  const [output, setOutput] = useState('')\n\n  useEffect(() => {\n    const path = parseInput()\n    setNumVisited(0)\n    setOutput('')\n    setDone(false)\n    const rope = moveRope(path, size)\n    const visited = new Set<string>()\n    let id: NodeJS.Timeout\n\n    const tick = () => {\n      const { value, done } = rope.next()\n      if (value) {\n        visited.add(pointToKey(value[value.length - 1]))\n        if (showVisualization) {\n          const grid = new InfiniteGrid('.')\n          grid.set(-20, -10, '.')\n          grid.set(20, 10, '.')\n          value.forEach(\n            ({ x, y }, i) =>\n              grid.get(x, y) === '.' && grid.set(x, y, i.toString())\n          )\n          setOutput(output2dArray(grid.toArray()))\n        }\n      }\n      if (done) {\n        setNumVisited(visited.size)\n        setDone(true)\n        clearInterval(id)\n      }\n      return done\n    }\n\n    if (showVisualization) id = setIntervalImmediate(tick, 100)\n    else while (!tick()) {}\n\n    return () => clearInterval(id)\n  }, [showVisualization, size])\n\n  return { done, numVisited, output }\n}\n\nexport const Part1 = () => {\n  const { done, numVisited, output } = useSolution()\n\n  return (\n    <>\n      {done && (\n        <p>\n          The tail of a rope with two knots visits <Answer>{numVisited}</Answer>{' '}\n          positions.\n        </p>\n      )}\n      <Visualization>{output}</Visualization>\n    </>\n  )\n}\n\nexport const Part2 = () => {\n  const { done, numVisited, output } = useSolution(10)\n\n  return (\n    <>\n      {done && (\n        <p>\n          The tail of a rope with ten knots visits <Answer>{numVisited}</Answer>{' '}\n          positions.\n        </p>\n      )}\n      <Visualization>{output}</Visualization>\n    </>\n  )\n}\n","export default `\nabaaaaaccccccccaaaaaaaaaaccccaaaaaaaaaccccaacccccccccccccccccccccaaaaaaaaaaaccaaaaaaaaaccccccccccaaaaaaaacaaaaaaccccccccccccccccccccccccccccccccccccccccccaaaaa\nabaaaaaaaccccccaaaaaaaaaacccccaaaaaacccccaaaacccccccccccccaacccccaaaaaaaaaaaacaaaaaaaaacccccccccaaaaaaaaaaaaaaaccccccccccccccccccccccccccccccccccccccccccccaaaa\nabacaaaaaccccccccaaaaaacccccccaaaaaacccccaaaacccccccccccccaacccaaaaaaaaaaaaaacaaaaaaaaccccccccccaaaaaaaaaaaaaaaaccccccccccccccccccccccccccaaaccccccccccccccaaaa\nabccaacccccccccccaaaaaaccccccaaaaaaacccccaaaacccaacccccaaaaaaaaaaaaaaaaaaaaacaaaaaaaccccccccccccacaaaaaccaaaaaaaccccccccccccccccccccccccccaaccccccccccccccaaaaa\nabcaaccccccccaaaaaaaaaaccccccaaacaaaccccccccccccaaaaaccaaaaaaaaaaaaaaaaaaaaaccaccaaacccccccccccccccaaaacccaaaaaaccccccccccccccccccccccccccaaacccccccccccccaaaca\nabcccccccccccaaaaaaaaaaaaacccccccccacccccccccccaaaaacccccaaaacaaaaaaaaaaaaccccaaaaaaccccccccaaacccccaaccccaacccccccccccccccccccccccaaaaccaaaccccccccccccccccccc\nabccccccccccaaaaaaccccaaaacccccccccccccccccccccaaaaaaccccaaaaaaaaaaaaaacaaacccaaaaaaaacccccaaaaaacccccccccccccccccccccccccccccccccccaaaaaaaaacccccccccccccccccc\nabacccccccccaaaaaacccccaaacaaacccccccccacccaaccccaaaacccaaacaaaaaaaaaaacccccccaaaaaaaacccccaaaaaaccccccccccccccccccccccccccccccccjjjjjjjaaaaaaaaaccccaacccccccc\nabaccccccccccaaaaaccaaaaaaaaaaccaccccccaacaaacccaaccccccaacccaaaaaaaaaaacccccccaaaaaaacccccaaaaaccccccccccccccccccccccccccccccccijjjjjjjjjhhhhhhhhhcaaaaaaccccc\nabaacccccccccaaaccccaaaaaaaaaaaaaccccccaaaaacccccccccccccccccccccaaaaaaacccccccaaaaaccccccccaaaaacccccccccccccccaaaaccccccccccciijjjjjjjjjhhhhhhhhhhcaaaaaccccc\nabaaccccccccccccccccccaaaaaacaaaaaacccccaaaaaacccccccccccaaacccccaaaccccccccccaaaaaaccccccccaacaacccccccccccccccaaaaccccccccccciiioooooojjhhhhpphhhhhaaaaaccccc\nabacccccccccccccccccccaaaaaaccaaaaacccaaaaaaaacccccccccccaaaaaaccaacccccccccccccccaaccccccccacccccccccccccccccccaaaaccccccccccciiioooooooooopppppphiiaaaaaacccc\nabaccccccccccaaaaaccccaaaaaaaaaaaaccccaaaaaaaacccccccccaaaaaaaaccccccccccccaaaaccccccccccccaaacccccccccccccccccccaaccccccccccciiinnoouuooooopppppppiiaaaaaacccc\nabcccccccccccaaaaaccccaaacaaaaccaacccccccaaccccccccccccaaaaaaaaccccccccccccaaaaccccccccaaacaaacccccccccccccccccccccccccccccccciiinnotuuuuoopuuuupppiiaaacaccccc\nabccccccccccaaaaaaccccaccccccccccccccccccaaccccccccccccaaaaaaacccccccaaacccaaaaccccccccaaaaaaaaaacccaacccccccccccccccccccccccciiinntttuuuuuuuuuuuppiiiaaccccccc\nabaaccccccccaaaaaaccccccccccccccccccaaaacccccccccccccccccaaaaaacccccaaaaccccaaccccccccccaaaaaaaaacccaaacaaacaaaccccccccccaaccciiinntttxxuuuuuuuuuppiiiccccccccc\nabaacccccccccaaaaaccccccccccccccccccaaaaccccccccaccccccccaaaaaacccccaaaaccccccccccccccccccaaaaacccccaaaaaaacaaaacccccccccaaaaiiiinnttxxxxuuyyyuvvppiiiccccccccc\nabaacccccccccaaaccccccccccccccccccccaaaaccaaacaaaacccccccaaccccccccccaaacccccccccccccccccaaaaaaccccccaaaaaacaaaacccccccccaaaaiiinnnttxxxxxxyyyvvppqiiiccccccccc\nabaccccccccccccccccccccaaccccccccccccaacccaaaaaaaacccccccccccccccccccccccccccccccccccaacaaaaaaacccaaaaaaaaccaaaccccccccaaaaahhhinnntttxxxxxyyyvvqqqiiiccccccccc\nabcccccccccccccccccccaaaaaaccccccccccccccccaaaaaaaaaccccccccccccccccccccccccccccccaaaaaaaaacaaacccaaaaaaaaaccccccccccccaaaaahhhnnnttttxxxxyyyvvvqqqiiiccccccccc\nSbcccccccccccccccccccaaaaaaccccccccccccccccaaaaaaaaaccccccccccccccccccccccccccccccaaaaacccccccacccaaaaaaaaaacccccccccccccaahhhnnntttxxxEzzzyyyvvvqqqjjjcccccccc\nabcccccccccccccccccccaaaaacccccccccccccaaaaaaaaaaaacccccccccccccccccccccccccccccccaaaaaaaccccccccccccaaacaaacccccccccccccahhhmmmtttxxxxxyyyyyyyvvvqqqjjjccccccc\nabccccccccccccccccccccaaaaacccccccccaacaaaaaaaaaaaaccccaccaaaccccccccccccccccccccaaaaaaaaccccccccccccaaacccccccccccccaaccahhhmmmtttxxxyywyyyyyyvvvqqqjjjccccccc\nabccccccccccccccccccccaaaaacccccccccaaaaaaaacaaacccccccaaaaaaccccaccaaaccccccccccaaaaaaaaccccccccccccaacccccccccccccaaaccchhhmmmsssxxwwwyyywyyvvvvqqqjjjccccccc\nabccaacccccccccccccccccccccccccccccccaaaaaaccaaacccccccaaaaaaccccaacaaacccccccccccacaaacccccccccccccccccccccccccaaaaaaaccchhhmmmssssswwwwyywwvvvvvqqqjjjdcccccc\nabccaaaccaaccccccccccccccccccccccccaaaaaaaaccaaccccccccaaaaaaacccaaaaaccccccccccccccaaacccccccccccccccccccccccccaaaaaaaaaahhhmmmmsssssswwywwwrvvqqqqqjjjdddcccc\nabccaaaaaaacccccaaaccccccccccccccccaaaaacaacccccccccccaaaaaaaaccccaaaaaaccccccccaaaccccccccccccccccccccccccccccccaaaaaaaaahhhgmmmmmsssswwwwwrrrrrqqqjjjjdddcccc\nabcccaaaaaacccccaaacacccccccccccccccccaaaccaacccccccccaaaaaaaaccaaaaaaaacaaccccaaaacccccccccccccccccccccccccccccccaaaaaaaccggggmmmmmmssswwwwrrrrrkjjjjjddddcccc\nabaaaaaaaaccccaacaaaaaccccaaacccccccccaaaccaaccccccccccccaaaccccaaaaacaaaaaccccaaaacccccccccccaacccccccccccaaccccaaaaaacccccgggggmmmllssswwrrrkkkkkjjjddddacccc\nabaaaaaaaaacccaaaaaaaaccccaaaacccccccccaaaaaaccccccccccccaaacccccccaacccaaacaaacaaaccccccccccaaaacccccccaaaaaacccaaaaaaacccccgggggglllsssrrrrrkkkkkkdddddaacccc\nabaaaaaaaaaacccaaaaaccccccaaaaccccccccccaaaaaaaccccccaaccccccccccccaaaaaaaaaaaaccccccccccccccaaaacccccccaaaaaccccaaccaaacccccccggggglllsrrrrrkkkeeedddddaaccccc\nabaacaaaaaaaccccaaaaacccccaaaccccccccccccaaaaaaccccaaaaccccccccccccccaaaaaaaaacccccccccccccccaaaacccccccaaaaaaacccccccaacccccccccgggglllrrrrkkkeeeeeddaaaaccccc\nabaaaaaacccccccaaacaacccccccccccccccccccaaaaaccccccaaaaaaccccccccaaacccaaaaacccccccccccccccccccccccccccaaaaaaaacccccccccccccccccccggfllllllkkkeeeeeccaaaaaacccc\nabaaaaacccccccccaacccccccccccccccccccccaaaaaacccccccaaaacccccacccaaccccaaaaaaccccccccccccccccccccccccccaaaaaaaacccccccccccaacccccccffflllllkkkeeeccccaaaaaacccc\nabaaaaacccccccccccccccccccccccccccaacccccccaaccccccaaaaacccccaaaaaaaccaaaaaaaaaaccccccccccccccccccccccccacaaacccccccccaaccaaccccccccfffllllkeeeecccccaacccccccc\nabaaaacccccccccccccccccccccccccccaaacccccccccccccccaacaacccccaaaaaaccaaaaacaaaaaccccccccccccccccccccccccccaaacccccccccaaaaaaccccccccffffffffeeeeccccccccccccccc\nabaaaccccccccccccccccccccccccccccaaaaacacccccccccccccccccccccaaaaaaaaaaaaccaaaaaaaaccccccaaccccccccccaaaaacccccccccccccaaaaaaacccccccfffffffeeaaccccccccccccaaa\nabaacccccaacaacccccccccccccaacaaaaaaaaaacccccccaaccccccccccccaaaaaaaaaaacccaaaaaaaacccccaaacaacccccccaaaaaccccccccccaaccaaaaaaccccccccafffffeaacccccccccccccaaa\nabaaaccccaaaaacccccccccccccaacaaaaaaaaaaccccccaaaccccccccccccaaaaaaaaaaaccccaaaaaccccccccaaaaaccccccaaaaaacccccccaacaaaaaaaaccccccccccaaacccccccccccccccccccaaa\nabccccccccaaaaacccccccccaaaaaaaaaaaaaacccccaaaaacaaccccccaaaaaaaaaaaaaaaaaaaaaaaaacccccaaaaaacccccccaaaaaacccccccaaaaaaaacaaccccccccccaaaccccccccccccccccaaaaaa\nabcccccccaaaaaacccccccccaaaaaaaaaaaaaacccccaaaaaaaaccccccaaaaacaaaaaaaaaaaaaaaaaaacccccaaaaaaaacccccaaaaaaccccccaaaaaaaaccaacccccccccccccccccccccccccccccaaaaaa\n`.trim()\n","export default `\n7896\n4992\n1382\n2920\n7533\n2709\n6020\n5321\n2698\n6806\n8008\n\n1340\n1472\n7147\n2707\n5491\n7003\n2337\n1401\n5309\n4385\n2805\n\n6019\n1924\n8917\n6303\n9358\n3640\n1563\n1902\n\n10946\n10333\n8504\n6110\n10157\n\n4578\n1711\n3343\n6159\n4045\n3487\n3070\n5663\n3518\n5839\n5911\n4970\n4852\n4512\n\n4277\n3324\n6172\n8272\n2707\n3292\n6599\n1204\n7030\n3075\n\n6907\n5595\n10251\n8654\n4036\n11545\n\n16787\n11035\n12217\n\n2196\n1519\n5810\n6837\n1193\n6480\n1237\n1659\n4323\n2896\n3878\n2894\n\n15886\n20356\n23636\n\n8795\n7986\n14228\n15738\n13503\n\n6598\n17951\n17508\n2446\n\n1382\n3232\n6467\n2791\n6250\n2704\n3898\n5569\n8676\n\n2582\n8767\n3195\n7957\n6614\n\n24737\n34912\n\n28868\n34308\n\n2703\n20947\n\n5548\n5930\n6705\n4227\n6120\n8723\n4597\n\n5877\n1223\n5789\n2207\n3488\n5210\n3056\n4300\n3880\n1826\n5366\n4531\n2016\n5304\n\n4226\n5314\n6437\n1737\n1229\n3757\n5128\n1058\n5940\n3344\n5188\n4963\n1403\n5498\n\n4969\n3096\n7035\n2695\n4747\n5109\n6294\n7990\n1539\n2608\n2944\n\n14127\n9751\n4842\n1106\n2779\n\n11896\n6643\n15874\n10487\n4141\n\n4696\n6644\n6285\n4321\n4080\n6888\n5213\n5048\n6545\n5848\n1690\n5351\n2560\n\n17296\n4277\n8327\n7931\n\n8374\n3794\n5435\n6968\n4768\n3458\n\n5090\n5614\n9448\n10331\n1311\n12604\n\n5126\n4860\n1299\n6934\n11746\n2628\n12132\n\n6648\n8567\n10219\n2385\n3642\n10478\n7662\n\n9206\n2176\n6472\n12314\n\n7006\n9478\n2742\n12074\n11993\n3221\n\n2458\n4271\n6417\n13749\n5411\n\n7826\n4566\n10845\n4535\n5673\n8305\n\n8264\n11302\n7040\n9481\n9935\n6624\n8376\n\n10460\n20936\n\n3456\n3498\n6808\n7408\n5543\n3673\n6672\n6650\n7560\n2477\n6505\n\n6943\n3217\n6235\n5079\n1386\n3453\n1736\n4569\n1422\n2804\n5807\n\n2241\n1925\n3348\n4805\n2575\n3656\n1379\n5628\n2348\n4652\n5052\n5788\n4128\n2160\n\n4839\n3854\n3192\n4055\n1892\n5418\n6415\n1645\n1609\n3844\n3097\n2117\n4043\n\n6996\n16021\n23549\n\n5493\n5824\n7101\n5017\n8221\n5407\n1963\n6083\n\n4896\n18916\n17584\n19464\n\n2897\n1198\n1847\n4416\n3086\n2006\n1743\n1387\n3390\n1416\n4713\n3831\n2789\n5146\n2220\n\n9452\n8265\n6453\n2831\n3803\n1928\n1047\n5087\n9454\n\n2885\n1518\n5218\n2629\n5204\n3715\n4468\n4399\n3020\n5194\n5361\n4566\n5875\n3995\n3081\n\n5435\n3159\n1378\n1333\n4491\n5405\n4858\n3744\n5468\n2313\n3014\n2236\n\n7027\n5112\n6675\n1149\n5519\n7197\n5210\n3811\n1259\n3794\n2700\n6518\n\n6066\n2040\n1948\n2972\n3816\n1477\n4477\n3085\n4169\n1245\n5008\n2016\n4449\n1544\n1511\n\n5909\n3378\n12050\n6988\n11093\n8034\n2552\n\n5647\n7225\n1416\n4531\n2148\n5176\n1086\n1268\n3907\n\n8824\n12672\n6094\n4105\n\n9982\n1255\n5102\n2060\n8348\n8610\n9019\n\n6442\n8353\n2849\n6823\n5061\n8540\n\n1020\n4819\n2371\n6452\n2589\n2140\n3018\n6422\n2079\n1049\n4183\n1959\n6889\n\n3370\n20341\n6283\n\n3568\n8914\n2474\n1840\n1092\n2901\n4619\n\n5489\n5048\n2151\n1275\n4555\n6105\n6393\n5439\n1175\n3143\n1039\n6159\n4280\n\n25302\n11104\n\n16342\n19486\n6818\n5872\n\n4287\n7300\n5106\n6009\n5397\n4743\n8786\n5374\n7723\n3342\n\n7830\n4687\n3639\n5942\n8019\n7531\n4763\n8086\n\n2928\n12662\n1729\n15599\n7031\n\n4504\n8351\n3310\n2860\n7474\n1052\n7088\n7300\n7653\n\n3800\n3285\n2244\n6146\n1527\n2496\n3373\n2935\n4073\n2708\n5854\n4532\n4265\n\n38782\n\n3895\n2886\n3397\n10665\n7954\n5994\n\n3830\n4381\n4042\n3631\n2109\n2742\n2748\n1117\n2772\n1921\n4357\n2960\n4504\n6021\n2300\n\n5684\n30508\n\n5467\n4827\n7991\n4299\n4152\n7070\n1911\n1345\n5607\n6490\n5631\n\n2288\n4534\n1402\n2221\n2137\n4623\n5745\n1848\n1638\n2562\n1095\n2539\n4090\n3929\n4330\n\n3776\n11693\n1189\n2039\n2662\n11224\n9212\n\n3778\n1619\n4008\n1706\n1926\n3844\n5194\n3554\n6272\n2988\n4779\n5481\n1443\n6297\n\n1712\n6076\n7332\n5267\n6685\n2555\n4517\n8692\n1819\n\n23640\n10894\n25482\n\n10592\n9277\n1228\n1197\n9162\n4838\n3783\n2691\n\n15579\n16090\n5228\n4273\n5288\n\n4044\n10911\n4767\n8658\n5775\n9369\n5332\n\n8063\n4322\n5109\n6744\n5653\n9544\n2610\n2241\n\n3885\n1140\n10508\n11910\n6096\n\n7234\n15371\n10892\n15338\n12191\n\n3698\n3413\n3783\n3362\n1828\n1302\n3426\n3147\n5558\n2644\n3636\n5842\n5261\n3312\n3164\n\n3088\n1303\n2194\n5841\n5330\n5986\n4108\n4571\n7161\n6276\n5920\n5011\n\n6546\n30555\n\n5922\n2401\n4792\n7175\n7942\n5040\n3601\n2213\n6802\n2244\n6891\n\n2694\n7905\n6046\n3782\n5591\n3665\n4195\n4579\n4300\n1822\n\n6308\n2993\n5663\n4780\n6638\n6503\n6307\n4682\n7281\n4580\n7441\n5611\n\n9706\n4619\n2108\n8345\n2422\n12140\n9146\n\n4984\n10121\n4062\n3797\n5130\n1641\n11492\n\n7592\n9412\n5474\n7809\n8073\n2056\n3839\n3557\n\n7893\n3556\n9427\n2836\n10256\n\n4410\n3041\n2124\n5830\n4200\n4102\n5146\n3355\n4318\n5422\n4992\n1979\n2696\n5277\n4058\n\n13134\n35366\n\n5363\n1706\n4925\n5967\n8514\n3362\n1424\n4427\n8906\n\n2891\n4388\n10112\n3409\n2477\n1138\n3790\n4712\n\n9130\n4622\n9723\n4660\n2778\n1083\n2326\n9254\n\n3221\n4739\n3752\n1220\n10337\n1159\n2367\n1900\n\n2038\n5545\n5904\n5378\n4334\n2897\n5745\n3670\n4773\n3087\n5760\n4026\n3719\n3084\n\n8674\n8656\n4162\n5125\n4183\n3496\n7379\n6150\n5225\n8014\n\n10321\n16081\n6163\n2030\n\n31755\n18352\n\n1666\n15493\n8858\n15689\n\n1903\n7006\n9002\n5067\n9397\n8703\n7534\n8188\n4983\n\n4398\n12055\n6820\n2412\n10308\n11231\n\n5914\n9582\n4568\n7679\n5867\n5798\n2955\n7834\n1833\n\n2554\n1886\n4590\n3753\n3161\n4039\n2435\n1172\n2690\n4564\n5160\n3715\n2834\n6074\n1251\n\n9837\n4501\n3669\n7682\n2762\n6072\n8731\n2324\n\n7030\n6956\n3040\n2185\n4717\n2907\n5255\n1194\n1309\n5100\n5630\n5164\n\n18808\n5780\n13062\n16131\n\n5436\n13758\n12390\n14884\n\n5344\n3178\n1907\n6945\n6435\n3985\n3637\n6984\n2108\n2282\n\n6870\n3774\n4149\n3361\n3208\n3696\n4265\n2295\n7068\n4365\n6729\n\n9828\n3819\n7654\n2391\n11354\n6751\n\n5409\n6025\n6772\n4005\n6894\n2723\n2485\n5866\n5744\n1804\n2509\n3285\n5663\n\n6630\n7966\n6366\n2854\n3478\n6566\n3790\n4047\n8471\n5911\n\n5930\n4813\n10365\n1430\n\n13119\n11915\n4732\n9949\n13699\n9790\n\n3413\n3027\n5513\n3320\n4421\n2507\n5781\n2622\n5472\n6590\n2021\n2164\n4106\n\n49386\n\n3656\n7422\n6157\n5982\n3944\n5726\n2628\n6618\n6138\n2186\n4744\n\n33805\n\n9976\n4213\n4359\n3723\n\n4106\n1423\n3334\n5115\n3819\n1308\n2652\n5954\n4439\n2188\n3415\n1104\n2973\n1681\n4704\n\n64085\n\n1097\n4369\n3803\n3247\n5135\n6928\n3419\n2418\n5130\n2555\n3043\n\n4831\n2425\n2023\n1667\n6410\n6422\n5851\n4966\n6721\n5312\n3792\n6700\n1545\n\n1742\n5176\n8587\n9261\n15254\n\n3097\n6016\n5558\n3004\n4372\n1986\n5576\n6105\n1709\n1326\n4997\n5528\n2823\n3072\n\n1228\n2891\n3056\n5874\n2267\n2232\n1754\n3979\n1881\n6633\n1889\n5506\n4377\n\n3703\n6310\n1020\n4891\n4911\n2913\n3888\n4642\n1963\n3716\n2222\n4528\n1030\n6081\n\n10172\n1472\n6212\n9125\n9365\n7866\n3525\n4752\n\n2546\n2326\n5739\n1010\n4724\n5324\n2495\n2999\n5272\n1937\n4396\n6333\n3632\n\n2944\n1285\n3457\n1980\n2346\n5712\n5088\n3718\n2036\n6725\n\n4335\n5577\n4533\n3275\n4297\n2774\n5029\n\n1396\n5993\n4058\n1095\n4388\n1843\n1643\n6192\n2801\n2583\n4286\n5483\n2308\n1577\n\n1584\n7552\n8133\n9503\n1989\n\n4584\n7691\n4707\n5757\n2519\n2097\n1460\n6651\n3569\n1159\n\n9366\n3998\n2020\n2598\n2166\n3298\n6533\n1323\n\n10007\n2282\n10952\n3217\n8819\n7164\n\n3095\n1126\n1893\n1540\n3172\n2310\n2566\n2438\n4431\n3423\n6675\n\n4131\n9513\n11678\n5248\n7769\n3887\n3494\n\n5382\n1013\n4021\n7366\n12330\n13746\n\n3536\n4407\n1205\n6210\n1388\n6202\n5314\n3286\n6888\n3049\n3946\n3684\n4187\n\n1934\n1285\n3262\n4136\n5790\n1340\n2597\n2992\n3008\n5698\n3688\n3086\n2459\n2413\n4769\n\n2150\n1030\n3068\n3747\n5417\n4237\n3311\n5081\n4846\n5555\n4650\n3830\n2209\n3069\n\n9935\n9564\n15110\n\n3038\n2079\n1059\n4905\n4104\n3502\n6338\n1366\n5990\n6073\n4692\n4706\n3474\n3469\n\n5845\n1176\n5553\n4578\n3868\n6154\n4799\n5079\n5927\n4185\n1806\n4449\n6248\n\n1280\n2823\n1372\n5899\n2547\n5738\n1545\n1046\n2917\n4931\n6094\n3690\n5021\n4657\n1214\n\n3046\n4952\n1138\n2373\n1412\n4848\n5772\n4750\n4741\n5752\n5977\n5270\n5526\n3509\n1793\n\n3228\n9849\n11815\n6507\n10144\n4756\n\n5119\n1764\n1718\n4813\n3662\n4731\n2755\n1315\n1975\n5716\n4859\n4748\n4809\n1296\n1689\n\n2909\n7209\n6124\n3235\n4089\n1271\n6220\n10328\n\n5630\n10237\n5572\n1065\n2126\n7181\n\n32487\n2379\n\n2718\n4228\n7834\n6711\n7619\n6321\n1080\n8584\n6860\n6542\n\n5106\n8514\n6109\n1204\n5159\n7935\n7292\n8114\n\n5898\n4837\n6825\n4587\n1021\n5713\n4862\n3864\n2022\n1129\n4444\n6439\n4369\n\n8875\n7916\n2177\n2085\n8103\n7908\n6266\n9099\n\n23274\n30650\n\n5537\n21092\n21841\n\n5852\n9025\n4459\n4883\n2577\n4679\n5673\n1548\n6726\n\n4034\n2542\n15179\n6499\n3472\n\n2228\n5558\n7863\n5080\n6441\n2064\n1676\n8473\n\n18854\n5610\n18471\n\n1196\n3063\n13221\n19006\n\n37369\n24756\n\n4271\n6806\n6381\n6363\n5221\n5729\n3829\n7832\n1150\n3352\n3210\n\n1422\n2606\n6070\n4950\n4300\n4023\n1862\n5027\n5668\n5058\n3969\n2359\n5394\n6001\n\n12165\n13318\n11945\n12507\n11398\n\n9539\n8607\n7451\n11189\n11056\n3209\n\n5845\n2759\n4046\n3838\n2768\n1168\n1237\n6370\n3384\n3938\n3946\n5028\n2603\n\n20671\n8067\n7232\n\n7376\n3530\n3343\n4917\n6712\n5080\n5846\n2774\n3020\n5738\n5500\n\n5185\n2455\n6887\n7349\n1917\n2435\n2458\n3676\n1783\n8567\n\n5585\n3750\n2664\n6867\n1506\n6830\n1279\n7877\n2757\n4091\n2731\n\n11132\n\n6128\n2421\n5519\n4390\n6457\n2769\n1410\n3365\n5682\n5685\n1502\n3245\n\n1265\n7559\n8923\n1805\n9738\n3780\n9131\n\n3052\n5440\n1672\n3462\n1053\n2902\n2137\n5053\n4905\n3544\n4374\n2718\n5799\n\n24868\n18500\n13495\n\n4653\n5142\n2117\n2908\n2324\n4335\n1096\n6733\n2380\n5352\n1830\n1893\n2491\n\n3142\n4111\n4577\n6019\n1075\n2596\n4950\n5814\n5880\n5573\n3672\n2623\n5602\n1032\n5599\n\n7365\n2959\n6303\n6111\n4607\n6530\n4873\n4367\n3776\n\n16700\n7439\n4758\n6160\n\n4203\n1817\n2941\n5662\n1387\n1698\n3031\n3718\n6087\n4971\n5592\n4460\n5271\n3867\n4998\n\n22671\n4704\n23657\n\n5028\n5059\n4212\n1200\n2284\n6082\n4589\n4383\n4682\n1243\n6449\n1380\n4515\n\n10431\n11132\n13078\n3070\n8963\n1329\n\n3931\n6924\n5760\n2448\n4709\n13742\n\n4493\n4759\n5130\n5004\n7898\n8508\n6718\n2769\n5103\n4254\n\n2261\n4383\n1602\n3767\n4634\n3704\n4242\n6316\n5351\n3531\n3470\n3904\n\n3541\n2879\n1596\n4477\n1209\n2089\n4365\n4813\n1830\n1069\n2994\n6076\n3379\n4130\n4102\n\n11774\n16285\n15432\n\n1364\n3558\n5162\n4115\n2730\n3464\n2673\n4541\n5020\n5299\n3199\n3221\n4372\n\n2696\n2080\n4206\n1901\n6091\n4955\n2674\n2184\n4977\n4339\n1011\n3766\n5911\n5316\n3703\n\n21030\n\n6714\n3093\n1168\n1507\n5134\n6516\n1572\n8383\n\n5080\n7055\n6559\n4514\n7036\n7348\n5836\n2223\n1996\n4888\n3666\n\n25117\n18822\n\n2855\n4165\n4812\n8068\n6471\n4447\n4482\n4775\n1002\n\n5999\n5674\n4022\n7403\n5593\n6164\n5109\n6856\n3449\n1689\n3727\n2115\n\n5781\n4639\n3684\n4010\n4018\n1004\n3081\n1003\n1702\n1457\n1301\n2122\n2014\n5790\n\n6373\n1849\n4389\n5772\n4888\n7981\n4238\n1476\n5550\n2922\n\n1513\n8603\n5489\n6664\n4505\n7378\n4185\n8087\n6799\n\n6482\n3622\n5516\n6214\n6243\n6214\n4711\n3038\n3398\n5483\n3145\n3536\n\n9125\n5549\n8576\n5240\n6032\n7952\n5140\n7580\n\n6079\n2048\n4407\n5706\n2535\n4588\n5182\n3204\n5287\n5221\n2457\n6932\n4174\n\n5505\n1576\n13849\n5436\n2535\n3865\n\n2178\n5420\n1013\n6435\n3810\n2903\n5079\n4332\n6257\n1344\n4511\n3127\n6464\n\n3805\n2215\n1614\n2501\n1067\n1874\n6199\n1733\n2146\n6581\n3514\n1175\n1099\n\n6473\n3376\n4934\n5773\n4970\n7229\n5716\n1014\n7507\n6012\n\n3636\n3377\n5729\n2413\n6252\n3314\n2928\n2317\n1157\n2788\n3842\n3906\n4650\n5338\n\n5103\n2724\n3794\n1431\n5838\n3971\n2107\n6475\n1746\n5986\n3736\n6345\n4124\n5664\n\n3774\n2420\n1478\n2100\n2608\n1168\n1584\n1266\n1346\n1262\n6217\n6392\n2148\n4525\n\n3294\n14112\n2438\n13482\n4287\n\n10170\n4078\n4238\n3724\n8472\n9110\n5386\n3743\n\n10397\n11155\n4476\n7990\n8374\n3340\n4575\n\n27723\n\n7777\n9699\n8470\n1721\n7728\n1288\n4458\n3428\n\n12000\n5191\n8549\n9184\n3081\n11587\n9430\n\n13626\n2596\n12534\n7672\n5161\n1160\n\n7830\n3505\n7940\n4756\n6977\n3085\n2639\n6439\n4919\n1421\n5196\n\n2714\n1424\n7020\n8593\n1436\n7652\n1146\n4168\n2069\n5958\n\n38215\n\n1436\n6327\n10725\n4280\n4509\n10301\n5183\n5166\n\n6068\n8243\n6171\n5575\n9093\n6123\n2831\n5664\n6278\n\n4093\n4619\n2578\n5902\n1131\n3288\n4886\n4994\n6088\n6377\n1852\n4254\n1419\n1504\n\n7127\n8649\n2523\n8023\n3063\n2677\n1759\n8632\n7805\n2999\n\n3419\n1111\n5599\n1055\n3407\n4964\n3556\n7249\n1100\n7148\n1852\n1549\n\n5414\n11474\n1685\n8818\n10288\n6138\n1983\n\n23129\n2195\n\n3104\n1599\n2327\n3640\n2230\n2791\n2344\n1035\n1046\n3399\n5096\n1067\n1987\n5786\n1395\n\n32647\n10609\n\n6020\n2279\n8718\n3103\n7022\n6464\n6180\n3968\n3275\n\n3221\n5381\n6110\n1860\n4557\n4705\n3658\n4172\n5002\n5578\n1355\n4114\n3501\n4821\n\n1312\n1921\n2644\n5044\n3336\n4520\n1253\n3184\n3732\n6754\n2139\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { sortNumDesc, sum } from '../util'\n\nconst parseInput = () =>\n  input.split('\\n\\n').map((block) => block.split('\\n').map(Number))\n\nconst process = (elves: number[][]) =>\n  elves.map((elf) => elf.reduce(sum)).sort(sortNumDesc)\n\nexport const Part1 = () => {\n  const [calories] = process(parseInput())\n  return (\n    <p>\n      The elf carrying the most Calories is carrying <Answer>{calories}</Answer>{' '}\n      total Calories.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const n = 3\n  const calories = process(parseInput()).slice(0, n).reduce(sum)\n  return (\n    <p>\n      The top {n} elves are carrying <Answer>{calories}</Answer> total Calories.\n    </p>\n  )\n}\n","export default `\nA Y\nA Z\nA X\nB X\nA Y\nB Y\nB Y\nA X\nA Z\nA X\nA X\nA X\nB X\nB X\nB X\nB X\nC Z\nB Z\nB Y\nB X\nA X\nA Y\nB X\nB X\nB X\nB Z\nB X\nB X\nB X\nB Z\nB Z\nA X\nA X\nC X\nB X\nB X\nB X\nA X\nB X\nB X\nA Z\nB X\nB X\nB X\nB Z\nB X\nA X\nB X\nB Z\nB X\nB X\nB Z\nA Z\nB X\nB X\nB X\nA X\nC Z\nA X\nA X\nC Y\nA X\nB X\nB X\nB X\nA X\nB X\nB X\nA X\nC X\nB Y\nA Z\nA Y\nB Z\nB Z\nC X\nB Y\nA X\nB Y\nA Y\nB X\nC X\nB X\nB X\nC X\nB X\nA X\nB X\nB X\nA Y\nA X\nB X\nB Z\nA Z\nB Z\nB Y\nA Y\nB Z\nB X\nB X\nB X\nA Z\nB X\nB X\nA X\nA Y\nB X\nB Z\nB X\nB X\nB Y\nB X\nC X\nB Z\nC X\nB Z\nB X\nA Y\nB X\nA Z\nC Y\nB Z\nB Y\nB X\nA X\nA Y\nA X\nB Z\nB Z\nA Z\nB X\nB Z\nB X\nA Y\nB Z\nB X\nB Z\nC X\nB X\nB X\nB X\nB Z\nB Y\nC Z\nA X\nB Y\nB X\nB X\nB Z\nB X\nB Z\nB X\nA X\nB Z\nB Z\nB Z\nB Y\nB X\nC Z\nB X\nB Y\nA X\nB X\nB Z\nA X\nB X\nB X\nB Z\nB X\nB Z\nB Y\nB Y\nB Z\nA X\nB X\nB Y\nA Y\nA Y\nC X\nB Z\nB X\nB X\nA Y\nC Y\nB X\nA Z\nA Y\nB Z\nB X\nB X\nB Z\nA Y\nB X\nB Z\nA Y\nB Z\nB X\nB X\nA X\nB Z\nA X\nB X\nB Z\nA X\nB X\nA X\nA X\nB X\nA Y\nB Z\nB X\nB Y\nB X\nB X\nA Y\nA X\nC X\nA Z\nB Y\nB Z\nC X\nB X\nB Z\nB Z\nB Z\nB X\nB X\nC X\nC X\nC Y\nA Z\nB X\nA X\nA Z\nA X\nB Y\nA Z\nB Z\nB X\nB Y\nB X\nC Z\nA Y\nB X\nA X\nB Z\nB Z\nA Z\nA X\nA X\nB X\nB Y\nB Y\nB Z\nB X\nB Z\nA X\nB X\nB X\nA X\nA Y\nA Z\nB Z\nB X\nB Z\nB X\nA X\nC Z\nB X\nA Z\nB X\nB X\nB Z\nB X\nB Z\nB X\nB X\nA Z\nB Z\nB X\nC X\nB X\nA X\nB X\nC X\nB X\nB X\nB X\nB X\nB X\nA X\nA Z\nA X\nB Z\nC Z\nB X\nA Z\nC Y\nB Z\nB Z\nB X\nA Z\nB X\nA Z\nB Y\nB X\nA X\nB X\nB X\nB X\nA Z\nB X\nC X\nB Y\nC X\nB Y\nB X\nB X\nB Z\nA X\nB X\nA Y\nA Y\nA Y\nA Y\nA Y\nB X\nA X\nB X\nA Z\nA Z\nB Y\nA Z\nA Y\nA X\nB X\nA Z\nA X\nA X\nB Z\nB Z\nA Z\nB Z\nB X\nB X\nA X\nB X\nB X\nB X\nA X\nB X\nC Z\nA Z\nA X\nA X\nB X\nB X\nB X\nB X\nA X\nA X\nA X\nB Y\nB Y\nB X\nA X\nA Y\nA Y\nB X\nA X\nB X\nA X\nA Z\nB Z\nB X\nB X\nA Y\nC X\nC X\nA Y\nB X\nB Z\nB X\nB X\nA Z\nC X\nC X\nB X\nB X\nC X\nB X\nB X\nB X\nB Y\nB X\nA Y\nB X\nA Y\nB Z\nB X\nB X\nB X\nB X\nA X\nB X\nB X\nB X\nB X\nB Y\nB Y\nB Z\nA Y\nB X\nB Z\nA X\nB X\nA X\nA Y\nB Y\nB X\nB X\nC Z\nB X\nA Z\nC Y\nB Z\nC Z\nA X\nB X\nA X\nA Z\nA X\nA X\nA Y\nB X\nB X\nB Y\nA X\nB Z\nB Z\nB X\nB Y\nC X\nB X\nB X\nB X\nA X\nC X\nA Y\nB Z\nB X\nB Z\nB Y\nC Y\nA X\nC Z\nA X\nB X\nA Y\nB Z\nC X\nB Z\nB X\nA X\nA Z\nB X\nC Y\nA X\nB X\nB X\nB Z\nB Z\nB X\nA X\nA X\nB X\nB Z\nA X\nA Z\nA Z\nA Y\nA Z\nB X\nC Z\nA Y\nB X\nB Z\nB X\nB X\nB X\nB Z\nA X\nB X\nA X\nB Y\nB Y\nB X\nC Z\nA X\nA X\nA X\nB X\nB X\nB X\nB X\nA Z\nB X\nB X\nB Y\nA X\nB Z\nC X\nA Y\nB X\nA Y\nA Y\nB X\nC X\nC X\nB Z\nB Z\nB Z\nB X\nB Y\nA Y\nB Z\nB X\nC Z\nB Z\nA Z\nA X\nA Z\nA X\nB X\nB Z\nB X\nB X\nA Z\nB Z\nC Y\nB Z\nB X\nB X\nA X\nA X\nC X\nB X\nC Z\nB Z\nB X\nA Y\nB Z\nB X\nB X\nA Z\nA X\nB X\nA X\nA X\nA X\nA Z\nC Y\nB X\nB X\nA X\nB X\nB Y\nB Y\nB X\nB X\nB X\nC Z\nB X\nB X\nC Z\nB Z\nA X\nC Y\nA X\nA X\nA X\nA X\nB X\nA X\nC Y\nB Z\nA X\nB X\nB Y\nC X\nB Z\nA X\nB X\nB Y\nB X\nC Y\nA X\nB Z\nB Y\nB X\nB X\nB Z\nB X\nB Y\nB Z\nB X\nC X\nB Y\nB X\nB Z\nB Z\nB Z\nB X\nB X\nB X\nB Y\nA Y\nB X\nB X\nB X\nB Z\nB Y\nC X\nC X\nC Z\nB X\nA X\nB X\nB Z\nB Z\nB Z\nA Z\nA Y\nB X\nA X\nA Z\nB Y\nA X\nB X\nA Y\nA X\nB X\nB Z\nA X\nA X\nA Z\nB X\nB X\nA X\nB Y\nB X\nB Z\nA Y\nB X\nA X\nB X\nB X\nB X\nA Y\nB X\nB X\nB Z\nC X\nC Y\nB X\nA X\nB Y\nB X\nB X\nB Y\nB X\nB Z\nB Y\nC X\nB Y\nB X\nC Y\nA Z\nC X\nB X\nB Z\nA X\nB X\nB X\nB X\nB X\nA Y\nC Z\nB X\nB X\nB Z\nA Y\nB X\nB Y\nA X\nC X\nB X\nA Y\nA X\nB X\nB X\nB X\nB Y\nA X\nC X\nB X\nA X\nB X\nB Z\nC Z\nA X\nA X\nB X\nA X\nC X\nA X\nB Z\nB X\nB X\nB X\nA Y\nA Z\nB X\nC X\nB Y\nB Z\nA Z\nA Y\nB Y\nA Y\nB X\nB X\nC X\nB X\nA X\nB X\nB Z\nA Y\nB Z\nA X\nB X\nA Y\nB X\nB X\nB X\nB Z\nB X\nB X\nA X\nB X\nB X\nB X\nB X\nC X\nA Y\nA Z\nB Z\nA X\nA Z\nA X\nB Z\nB Z\nB X\nB X\nB X\nA X\nB X\nB Y\nA X\nB X\nC X\nA Z\nB X\nB X\nC Z\nB X\nB Z\nA Y\nA X\nA Y\nA X\nB X\nB Y\nB Z\nB X\nB X\nB X\nB Z\nB Z\nA X\nA X\nB X\nB Z\nA X\nA Y\nA Y\nA X\nB X\nA Z\nB X\nA Y\nB Z\nA X\nC X\nB X\nB X\nA X\nB X\nC X\nB Z\nB X\nB X\nC X\nA Y\nB X\nB X\nB Z\nB X\nA Y\nB Z\nC Z\nB Y\nB X\nA Y\nB X\nB X\nB X\nB X\nC X\nA Y\nB X\nB Z\nB X\nB X\nC Z\nA X\nB X\nA Y\nA X\nB X\nB X\nA X\nA Z\nC X\nA X\nA Y\nA Y\nB Z\nA X\nB Z\nB X\nB Y\nA Z\nA X\nA X\nA Y\nC Z\nB X\nA Y\nB Z\nB X\nB X\nB Z\nB X\nA Z\nC Z\nB Z\nA Z\nB X\nA X\nB Z\nA X\nB X\nB Z\nB X\nA X\nB Y\nA Z\nA Z\nB X\nB Z\nA Y\nB Z\nA Y\nB X\nC X\nA Y\nB Z\nA X\nB X\nB X\nC X\nB Y\nB Z\nB Z\nB X\nA X\nA X\nB X\nA X\nC Y\nA Y\nA X\nA Z\nA X\nA X\nB X\nB X\nB X\nB Y\nC Y\nA X\nB X\nB X\nB X\nB X\nB X\nC Y\nA Z\nB X\nA X\nA X\nA Z\nA Y\nC X\nA Z\nB X\nB X\nB X\nA X\nB Z\nB X\nC Z\nA Y\nB X\nA Y\nB Y\nB X\nA Y\nB Z\nB X\nB Z\nB X\nA Y\nB Y\nB Y\nA X\nB X\nC Z\nB Z\nB Z\nB X\nA Z\nC X\nB Z\nC Y\nB X\nA Y\nA X\nB X\nA X\nB Z\nA Y\nB Y\nB Y\nB X\nC X\nC X\nA Y\nA Z\nB X\nB X\nB X\nB X\nC X\nB X\nC X\nB X\nB Z\nA X\nA X\nB X\nA Y\nB Z\nB X\nA X\nB X\nB X\nA Z\nC X\nB Z\nC X\nA X\nB Z\nC X\nB X\nB Z\nA X\nC X\nA Y\nA X\nA X\nA Y\nB Y\nB X\nB X\nB X\nB Y\nB X\nA Y\nB X\nA X\nB X\nC X\nB X\nB X\nB X\nB X\nB X\nA X\nC X\nC Z\nB X\nB X\nB Z\nB Z\nA X\nB Y\nB X\nB X\nA Y\nB X\nB Z\nA X\nA X\nC X\nB X\nB X\nC X\nB X\nB X\nB X\nA X\nA X\nC X\nB X\nB X\nB Z\nB Z\nA Z\nB X\nA X\nA X\nB X\nB Y\nA X\nB X\nB X\nA X\nB X\nB X\nB X\nB X\nA Y\nA X\nB X\nA X\nB X\nA Z\nA Y\nB X\nB X\nA Z\nB Z\nB X\nB X\nB X\nB X\nA X\nB X\nB X\nB X\nA Y\nC Y\nA X\nB Z\nA X\nB X\nB X\nB X\nB Y\nC X\nA X\nB Z\nB X\nC X\nA X\nA X\nA Y\nB Z\nB X\nB X\nB Z\nC Z\nB X\nB Z\nB X\nA X\nA Y\nA Y\nB Z\nB X\nC Y\nB X\nB Z\nA Y\nB Z\nA Y\nB Y\nB X\nC Z\nB X\nA X\nA Z\nB Z\nC X\nA Y\nC X\nA Y\nB Y\nB X\nC X\nA X\nA Y\nA Y\nB X\nA Z\nA Z\nA Z\nB X\nA Z\nB Z\nA X\nB X\nA Y\nA Z\nA X\nB X\nA Y\nB X\nB X\nB Z\nA X\nB X\nB Y\nC Y\nB Y\nB X\nC Y\nA X\nC Y\nA Z\nA Y\nB Z\nB X\nA X\nC X\nB X\nC Z\nC Y\nB Z\nB X\nC X\nB Z\nB X\nC X\nB Z\nB Z\nC X\nB X\nB Z\nA X\nA Y\nC Y\nB X\nA Y\nA Y\nA Z\nB X\nB Z\nA Y\nB Y\nA Z\nB X\nB Y\nA Y\nB Y\nA X\nA Y\nB Z\nA Y\nB Z\nB Z\nB X\nB X\nC Z\nA Y\nA Y\nB Y\nB Z\nB Z\nA X\nB X\nA Y\nC Z\nB X\nB Z\nB X\nB Z\nB X\nC X\nA X\nB Z\nA X\nB Z\nC X\nB X\nA X\nA X\nA Y\nB X\nB Z\nB X\nA X\nB Z\nB Z\nB Y\nB Z\nC Y\nB X\nB X\nB X\nA X\nB X\nC Z\nB X\nC Z\nA X\nB Y\nB X\nC Y\nC X\nB X\nB X\nB Z\nB Z\nB X\nB X\nB Z\nB X\nB Y\nA X\nB X\nA X\nC Z\nB X\nB Z\nB X\nB X\nB X\nA X\nA X\nA Y\nB Z\nC X\nB X\nC Y\nA Y\nB Y\nB Y\nA X\nB Z\nB X\nA Y\nB Z\nB Z\nA X\nB Z\nB Y\nC X\nC X\nB X\nB X\nB Y\nB Y\nB Y\nA X\nB X\nB X\nA Y\nB Z\nA X\nA Z\nA Y\nA Z\nB Z\nB Z\nA Y\nA X\nA X\nB X\nB Z\nA Y\nB X\nA Y\nB X\nB X\nA Y\nB X\nB X\nB Z\nC X\nA Y\nB X\nB X\nC Y\nB Y\nB X\nB X\nB X\nA X\nB X\nA Z\nB X\nA Z\nB Z\nA Y\nB X\nC X\nB X\nA X\nA Z\nB Z\nB Z\nB X\nB X\nC X\nB X\nB Z\nB X\nB Z\nB X\nB X\nA Y\nB X\nB Y\nB X\nB X\nB Y\nB X\nB Z\nB X\nB Z\nA X\nA Y\nB Y\nA X\nB X\nA X\nB X\nA X\nA Y\nB Y\nB Y\nB X\nB X\nB Z\nA X\nB X\nA X\nA X\nA Y\nB X\nA Y\nA X\nA Y\nB Y\nB Z\nB X\nA X\nB X\nB X\nA Y\nA Z\nB X\nA Z\nB X\nB X\nC Z\nB Z\nB Z\nB Y\nA Z\nB Z\nA Z\nB Y\nB X\nC Z\nA Z\nB Z\nA X\nB X\nB X\nB X\nC Y\nC Z\nB Z\nC Z\nB X\nB X\nB X\nB X\nB X\nA X\nA Z\nB X\nA X\nB X\nC Z\nB Z\nB X\nA Z\nA X\nB X\nA X\nB X\nA Y\nB X\nA X\nA Y\nC X\nB X\nC X\nA Z\nC Z\nB X\nC X\nB Z\nA X\nB X\nB X\nB Z\nA Y\nA Z\nB Z\nB X\nA X\nC Y\nB Z\nB Z\nB X\nB X\nA X\nB X\nA Y\nB X\nB Y\nA Z\nB X\nB X\nA Z\nA X\nB Y\nB Z\nB X\nB X\nC X\nB Z\nA X\nB X\nA Z\nB X\nB X\nB X\nB X\nB X\nB X\nB Z\nA X\nB X\nB X\nB X\nB X\nB Z\nB Z\nA Y\nB X\nC Y\nB Z\nB Z\nA Z\nB Z\nC Y\nB X\nB Y\nA X\nA X\nA Z\nB X\nB Y\nC X\nB Z\nB X\nB X\nB X\nB Z\nB X\nB X\nC Y\nC X\nA X\nB X\nB Y\nB X\nB X\nA Y\nA X\nB X\nA X\nB X\nA Z\nB X\nC Y\nC Y\nA Y\nB Z\nC Y\nC Y\nC X\nC Y\nC Z\nC X\nB X\nB X\nB X\nB Y\nB X\nA Y\nC Y\nB X\nB X\nA Z\nB X\nB X\nB X\nC Z\nB Y\nA Z\nC Z\nB X\nB Z\nA X\nB X\nB Z\nB X\nB X\nB Z\nA Y\nB Z\nA X\nA X\nB X\nB X\nB X\nB X\nA Y\nA Z\nB X\nB Z\nB Z\nB Z\nB X\nB X\nB Y\nA Y\nB X\nC Y\nB Z\nB Y\nB Z\nB X\nC Y\nB Z\nA X\nB X\nA X\nB Z\nB Y\nB X\nB Z\nC Y\nA Y\nB X\nC Y\nC Y\nA X\nA X\nA X\nA X\nB X\nB X\nA Y\nA Z\nB Y\nB Z\nB X\nB X\nB X\nB Y\nB Y\nA X\nB Y\nB X\nB Z\nB X\nB Z\nB X\nA X\nB X\nB X\nB Y\nB X\nB Z\nB Z\nB X\nB X\nB X\nB X\nB Z\nB X\nB Z\nA Z\nB X\nB X\nB X\nB Y\nA X\nB Z\nA X\nC Y\nB Y\nB Z\nC X\nC X\nB Z\nB Z\nC X\nA X\nB X\nA X\nB X\nB X\nA Z\nB X\nA Y\nA X\nA X\nB Y\nA Y\nA Y\nC X\nA X\nB X\nB Y\nB Y\nA Y\nA X\nC Y\nA Y\nB Z\nB X\nB Y\nB Z\nA Y\nA Y\nB Z\nA X\nC X\nA Z\nB X\nB X\nB X\nB X\nA X\nA Y\nB X\nB X\nB Z\nA Y\nA Y\nC Z\nB Z\nB Y\nA Y\nA X\nC X\nA Y\nB X\nC X\nA X\nA Z\nB X\nA X\nB X\nB Z\nC X\nB X\nA Y\nB X\nB Z\nB X\nB X\nB X\nC X\nB X\nC Y\nB Z\nB Z\nB X\nB X\nB Z\nC X\nB X\nB X\nA Z\nB X\nA Y\nB X\nB Y\nB Z\nA X\nA Z\nA X\nB X\nB Z\nB Z\nB X\nA Y\nB Z\nB X\nC Y\nA X\nA Y\nA Y\nB Z\nB X\nA X\nA Y\nC X\nA Y\nA X\nB X\nB X\nA X\nC X\nB Z\nA X\nB Y\nB X\nA X\nC Z\nC X\nB Z\nA X\nB X\nB Y\nB X\nB X\nA Y\nB Y\nA X\nA X\nA Z\nB X\nA Z\nA X\nB X\nA X\nB Z\nA X\nA X\nA X\nB X\nA Y\nB X\nB Z\nC Z\nB X\nA X\nB X\nC Z\nB X\nB Z\nA X\nC X\nB X\nB X\nA X\nB X\nB Z\nA X\nC X\nB Z\nB X\nB X\nB X\nB X\nB X\nA Y\nC Y\nB Z\nC Z\nB X\nA X\nA X\nA Y\nB X\nB X\nC Y\nB X\nC Z\nA X\nB X\nA Y\nB X\nB X\nA X\nC X\nB X\nC Y\nB X\nC Y\nA X\nB X\nB Y\nC Y\nB Z\nB X\nA X\nB X\nB X\nB Y\nA X\nB X\nA Z\nA Y\nA X\nA Z\nB X\nA Y\nC Y\nB Z\nC Y\nB X\nB X\nA Y\nC X\nC Z\nB Z\nB X\nB X\nA Y\nB X\nB Y\nA X\nA X\nB X\nB Z\nA Y\nA Y\nA Y\nB X\nB X\nC X\nB Y\nB X\nA Y\nA X\nC X\nB X\nB Z\nA Z\nB Z\nA Y\nB Z\nA X\nB X\nB X\nB X\nB Y\nC Z\nB Y\nB X\nA X\nB X\nA X\nA Z\nB Z\nB X\nB X\nB X\nC X\nC Z\nB Z\nA X\nB X\nB X\nA Y\nB X\nB Z\nA X\nB X\nA X\nA X\nC Y\nB Z\nA X\nA X\nB Y\nB X\nA Y\nB Y\nC X\nB Z\nA X\nA Z\nB X\nB X\nA X\nB X\nA Y\nA X\nC X\nB X\nA X\nC X\nB Z\nB X\nA X\nA Z\nB X\nB X\nB Z\nB X\nB Z\nC X\nB Z\nA X\nA X\nB X\nB X\nB Y\nB X\nB X\nB Z\nA Y\nA X\nC X\nA X\nB X\nA Z\nB X\nA X\nA X\nB X\nA X\nB X\nB X\nA Y\nA Y\nA X\nB X\nB Z\nC X\nA X\nB X\nB X\nB Z\nB X\nB X\nA Z\nB Z\nB Z\nB X\nB Y\nC X\nB Z\nA X\nB X\nB X\nB Z\nA Y\nB X\nB X\nB X\nB X\nB X\nC X\nC Y\nA Z\nB X\nC Y\nA Y\nC X\nB X\nB X\nB Z\nB X\nB X\nA X\nA X\nA Z\nC Y\nB X\nB X\nA Y\nB Z\nB Z\nA X\nA Z\nC X\nB X\nB X\nB X\nB X\nA X\nC X\nB Z\nB X\nA X\nA X\nA Y\nB X\nB X\nA Z\nC X\nB X\nA X\nB Z\nA X\nB Y\nB X\nB X\nA Y\nC Y\nB Z\nA X\nA Z\nA Y\nC Y\nB X\nC X\nB X\nB Y\nB X\nB Z\nA X\nC Y\nA Y\nB Z\nB X\nA X\nC Z\nB X\nB Z\nA X\nC Y\nB Y\nB X\nB X\nA Y\nB X\nB Z\nB X\nB Z\nB X\nB Z\nA Y\nA X\nB X\nB X\nA Y\nC X\nA X\nC X\nB X\nB X\nB X\nA X\nB Z\nB Z\nC Z\nB Z\nA X\nA X\nB Z\nC X\nA Z\nA Y\nB Y\nB X\nA X\nA Y\nA X\nA Z\nB X\nB X\nB Z\nB Z\nA Y\nB X\nB X\nB Z\nB X\nA X\nC X\nB X\nB X\nB Y\nA X\nB X\nB X\nC Z\nB X\nB Z\nB X\nB Y\nB X\nB X\nA X\nA Y\nA Y\nB X\nA X\nA Z\nB Z\nB Z\nB X\nB X\nB Z\nB X\nA Z\nB X\nA X\nC X\nB X\nB X\nB Z\nB X\nA X\nB Z\nB X\nB Z\nC Y\nB X\nB X\nB X\nB Z\nC X\nB X\nB X\nB Y\nB Z\nB X\nC Y\nA Y\nC X\nA X\nB X\nA X\nB Z\nB X\nB X\nA Y\nC Z\nA X\nB Y\nA X\nB Z\nB X\nC Z\nB X\nC Z\nA X\nB X\nA X\nB X\nA Y\nB X\nB Z\nB X\nB Z\nC Z\nB X\nB X\nA Z\nA X\nA X\nB X\nA X\nB X\nB X\nB X\nB X\nA X\nB Z\nB X\nA X\nB Z\nC Y\nC Z\nA X\nB X\nB X\nB Z\nB Z\nA X\nA Y\nB X\nA Y\nB X\nB X\nC X\nB Z\nB Y\nB Z\nB Z\nA Y\nC X\nB Y\nB X\nB X\nA Z\nB X\nB Y\nC X\nB Y\nC Y\nB X\nB X\nC Y\nA Z\nC X\nB X\nC X\nA Y\nB X\nC Z\nB Z\nB X\nB Y\nA Y\nA X\nB X\nC Y\nC X\nA X\nB X\nB X\nA X\nB X\nB X\nC X\nC Y\nA Z\nC X\nA X\nC X\nB X\nA Y\nB X\nA Y\nC X\nB X\nC Z\nC X\nB Z\nB X\nB X\nA X\nA X\nA Y\nB Y\nB Y\nA Y\nC Z\nA Y\nA X\nB Z\nB X\nB X\nC X\nB X\nC X\nA Y\nB Z\nB X\nA Y\nA Y\nC X\nA Y\nB Z\nB Z\nA X\nB X\nA Y\nB Y\nB X\nA Z\nB X\nB X\nB Z\nC X\nB X\nC X\nB X\nB X\nC X\nA X\nA Y\nB X\nA Y\nC Z\nC X\nA Z\nB X\nB X\nB X\nA X\nB X\nB Y\nB X\nB Z\nB X\nA Y\nB X\nB X\nB X\nB X\nB Y\nB Y\nB Z\nC X\nA Y\nC X\nB Y\nB X\nB Y\nB X\nA X\nB Z\nB Z\nB X\nA Z\nC X\nA X\nB Z\nB Y\nA Y\nB X\nB X\nB X\nA X\nB X\nA Y\nA X\nB X\nB Z\nB X\nA X\nA Y\nB X\nB X\nA X\nB Z\nA Z\nA X\nA Y\nC X\nA Z\nB X\nB X\nA X\nB Z\nB Z\nA X\nA Y\nB X\nB Z\nB X\nA Y\nB Y\nA Y\nB X\nB X\nA X\nB X\nA X\nB X\nC Z\nA X\nB X\nC Z\nA X\nA X\nB X\nA X\nA X\nC Z\nB Z\nB X\nB Z\nA X\nB Z\nB X\nB X\nB X\nA Z\nB X\nB X\nB Z\nA X\nA Y\nB X\nA X\nC X\nA Y\nA X\nB X\nB X\nB Y\nA Y\nB X\nA Y\nA Z\nB Z\nB Z\nB Z\nB X\nB X\nA Y\nA Z\nB X\nB X\nB X\nB X\nB X\nA Z\nA Z\nB X\nB X\nB X\nB X\nA X\nB X\nA X\nB X\nB Z\nC X\nA X\nB X\nC Z\nB X\nB X\nB X\nA X\nA Z\nB Z\nC X\nA X\nB X\nC X\nB X\nA X\nC Z\nA Z\nA Y\nB X\nC X\nB X\nC X\nB X\nB Y\nB Z\nA X\nB X\nB X\nA X\nA Z\nB Z\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { invert, sum } from '../util'\n\nenum Option {\n  Rock = 1,\n  Paper = 2,\n  Scissors = 3\n}\n\nconst parseInput = () =>\n  input\n    .split('\\n')\n    .map((line) => line.split(' '))\n    .map(([opponent, command]) => ({\n      opponent: { A: Option.Rock, B: Option.Paper, C: Option.Scissors }[\n        opponent\n      ] as Option,\n      command\n    }))\n\nconst wins: Record<Option, Option> = {\n  [Option.Rock]: Option.Paper,\n  [Option.Paper]: Option.Scissors,\n  [Option.Scissors]: Option.Rock\n}\n\nconst lose = invert(wins)\n\nconst calculateScore = (opponent: Option, you: Option) =>\n  Number(you) + (wins[opponent] === you ? 6 : opponent === you ? 3 : 0)\n\nconst runCommand1 = (command: string) =>\n  ({ X: Option.Rock, Y: Option.Paper, Z: Option.Scissors }[command] as Option)\n\nconst runCommand2 = (opponent: Option, command: string) =>\n  ({\n    X: lose[opponent],\n    Y: opponent,\n    Z: wins[opponent]\n  }[command] as Option)\n\nexport const Part1 = () => {\n  const score = parseInput()\n    .map(({ opponent, command }) =>\n      calculateScore(opponent, runCommand1(command))\n    )\n    .reduce(sum)\n  return (\n    <p>\n      Your total score will be <Answer>{score}</Answer> according to your\n      strategy guide.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const score = parseInput()\n    .map(({ opponent, command }) =>\n      calculateScore(opponent, runCommand2(opponent, command))\n    )\n    .reduce(sum)\n  return (\n    <p>\n      Your total score will be <Answer>{score}</Answer> according to your new\n      strategy guide.\n    </p>\n  )\n}\n","export default `\nlDDWVvlVVQfDMlWjGJTRjQCgTGLCLj\nZLZpwzLBhwZhSLBsjntGCtgJRjbnJgSG\nqppdZzzsdsmZphrNsNwZhllDHLcVVDWFPvFWcWdFlv\nztdhgJDBJghmQtPFQPpmbw\nlVlLRcnfllcfVcccGnSQVLcsTPFbpwsPFspTSqmbpswpbF\ncCHRGcGcCRGlGrGcVGnrdWHWBDzBNhhQZWWNBhJz\nNfnSSQpdnRSSpvWdSsjZDGNDjGDwTGTjHG\nwlPzPqzPFbMmqPCFCJmbsjbHLDDHDZjDjbGHsT\ngwMlgmtmPcqVVvhVnvcRnn\ncBNBBCHhbhNhblBcCCvcBHSwTwDQSqRwDQpDRsjHST\ndPmzMVWdmmMnnZJtZVdqjTSrjTjrpQrsTTVwQRSj\nqzmZMmdZPtnGqclblGlbGvgBFc\nZfpmNDfRhzbbqDnD\nSFtFjTTZVTFvVTjHrsVvqGBJqhnSSnbJznLGJwJq\nTjdPPtdMPPWCcZgW\nqsbmGCsjHNhmhmhzTDznpnlQZlbWlZ\nLTSSfSvggVVgBgfLtvvtTSczzpWnZQZnlnzpBcnWpQWc\nFrLvrrrVPgdPftSHHdNsjTHjmGThhm\nwGQlMjvMwpvjvZjZTZlWjplWJJTggDTgfCnntPgTJPbtPgSP\nqNhJmcVmdJqhHnPnDNtnPDCg\nLrrchqhRdLVzRdmhJcFFQWGGMjpGlvZzlQQv\nZqZMbZMfQZptpjlF\nPJCggvHlwWHvSSvCJNvSPvDBtFDQThFQjtRQhhFTsVThQtsF\nPwWCnBBCClcMMznMdG\nrNwwQJrJrnQswrQrRRwCShBSLndZpdnhpGFSdhBp\nPvzzWVzbclGFhLFGdZll\nVWjPWvbjcVbVcGVzjcgzgwQQRRRrqwRJQwwstCRR\nzjBMMzznjbssrBrMBbvHDmrlprlrpwGpwQDV\nLhRwPPTLLNRZqScPWPWPTSmQvQQDGGdQHVDlmVpQGD\nNtfhNwhLLNwRwRNcTBgnJMCBzsBFjsJfCz\njZjsWNDlPfClfMlM\nGjqbVSqjhgvgSVSBCPmMmCmfpwTBfh\nnGbjqtqcGzsLDFcJLs\nZQtmZdtdQcLndRncdQQLFjWWDHNPfhpnqhqsHNNDnpHs\nTrMBGbJTwwlmDPPPWshWHfJq\nwmVzbrwbwvBlBlVGtSVLSdFjdFtdjLVR\nLBhZFhRPbbnPddMdPPlD\nNQszQNczlCSlJSsg\nmwmrVQwpQVWwTlvBpHHHFhZj\npzzDffWpQBzMpHvzMfRnTNhZdrdBcnLrcdrTLZ\nmsgJgtmbgmqJJcdrGcJjGn\nbSVPgwntmVnngQWvWSSMpMMHWH\ngmGMDHHdpngdrGmGcwbNCCnNcbbCSLwL\nzQPPPffQQlVlsPFQFzQchZZbLZNVcbqbNqbZgq\nPRjQzfRgRfjQBTfJQTlPFRHWmmvmWHGWrWvWWtjrdHpD\nvfrHfqrLfLwwNHdvnthpnnFFpstn\ngWcMclgmcRcWgDMWgBgGGFnntqQnGphdQhtbdFnh\nqRWmRDlcDqWBBPwPNrZHrwSHjTfr\nHVVbhdCdndhZSShMzRrzSM\nqBjWqvtWvDJjTjjGJtJtnqBvZMrgSGZlgfSgSRrMQGQRMgMR\nwmwtJsvjtTJwsNnVsHpdnsHdds\nFCJNZDMPNCNvzqQJHqzGqv\nhwjWcSTHwRpSWnQtGgQgGStgQQ\nWpwhRHTRpcLRjwlwwTWBcWdlFbCrsPrrLCMDrZCFsCDPrZPM\nDJjjShSGhGDSNdpfrWWcLFzrDWrDlF\nwtqZgwMBBPVMCBPQggMwqMMzfLlWrWLLzsWcFzTzVTzLss\ntgtwQqZBQQZbBZtPgbHpNJnJShcmJppSHh\ntHrWmrdzzdHflmHmHrSmqswlqhqNgssMhGgghssn\npJcCBPPQPCcPpRpgwZNZBMnDhMsMBw\nRJCvRRVcQpjLpCJPWrftWvSnrFffWbrz\njzlwwzDzTlQftzlWjfrBGBgVHBgpgBtPGVtP\nvhsshbMbNhZpgZrrrpHcZr\nqhdMqqSLSSbSJMqqSwwjzFzmjFQQFfHzLQ\ngDhHNnphPPPNCprHFhHFdbdczzjNqbzjVcdbQTcc\ntVJWBtVVZRWtjQbctjqcdj\nRfvlGLvLLLlLMZBmZBRhHDVPnVHPHCgFCnhlpn\nRFhZFTZvFdjlqqlRNCPwSSPCNPBSwC\nspHGswpnWgJLLJCPGg\ncWpDrVVbWfWbVfbsdQqcQzjjzlhdwqll\nWWJPpQwWdQQPNpQvqlvvCblbvbvwLL\ncmRMBMBTbSrTDRMcGBscTGfLZfvfvsCqhLlChZlLhfsC\nTVbzGSMGVVgdpdPJpQ\nlwsFfsZWGsGmsnlGQcPdBBdMbcPHfcCN\nRVvSLtSTrTVrTFPcBdCHRcPHbNNb\nLrqzLFTLrgSJLLLtTgJjVJvWlDDnjDWnWWlhlGWGhZWZhn\nGQJCMGbrMbbCGrrGtcwhctGjNSvWpVVVRjNJqVqqBBRRJq\nssnglHHsnHzFmHnzHFPVDDSDRgVjvWDNpSSNpB\nPZfHmndFzzfPZPZfCdwchwGcbwwhCdMW\nDRGVQGmGQVnnGVmnnFpNbzCNRbRttCbpLztC\nqdqHBdjTqPlcTchBjJMvvvLtLCcLggLvtmgb\nfqhlHjdwqjjJTwldDmDmrGrrWFrDGZwD\nwFscLVLrrVhwWgZPrcswgZWFTnQdtTMnpQtjdpqdqvqQMt\nJRbHmmbDDSzDmDNpTnBBdpMHQtqtvp\nJmCCbvRGzbbGJsLgZsVhgLwwGW\nWDQwsBzWbBlMjdVpzTJVMj\nfncRngntnPCpJgmdFpFWgm\nRGZPZtZCfvWSvRZGSLvPccHwsrHbwHLrwHHQQsBDbllB\nPlNZhwgpppccgrqVvttbBfrlls\nCznSDDdHDRnRStVsVfDvfrtDZq\nQCddZFSFLTmccQmw\nrnwfVnclGPPFfSPSqBWZvvBBWqZvqWFh\nzLgLQgJssspmQTJmsgjZNmqqzqdHbthDdDDWHbhqBBqb\nQgmmjpNgCCZpjJLpmTrfrSrVRPfnrClfPwnS\nzDzPPwvwqvPPBqjnqvDqBffSfcSNJpNVfccLLNffBR\nMdTMZbgbmmTWGGdmssRCSNsSNVVVcJsNppsC\nMJghbhHhbtMMdWhbJhHgdmWvnFzHDQPDjQDvHHwvQwvzwF\ngGbqqRDrqDMdcBpVlpMG\nWzhPCnWfqMcpBnnNLZ\nfCqPHHJCfJhStwhWHbrrgvjFgbQbSbmbQs\nfhcchnSpfsNpjVVqnqjrGHqq\nzzlFLlPLWdggFqRBjqsrHrBTzz\nFDwgFLZWlbbchpwshsCNcw\nCmPlqqRJDHRDDsFv\nMfSpBQQNNfBfrfVZsmVVdzzrHZmH\nQSBSLSgmQBmwPCtgClhjPP\nNPNsHHHNsPsvHwDqgpwlqt\nrTRWSRrWRzgTzZrRVVLRQzjpbtmmGLlGDDbDwwmtblvDvw\nnRzSRrjSVRrnjrgZfrfzNdPdMPBfBMhJhhBcPhcJ\nLLhzQSDHDHNpNzHHJBQBMvMBqBRJBBqw\nrmbdtmlWCCMnvJrn\nFTVdmVgtjdtbWsvjjmdLSDcgHpDzShzDLPLSHh\nVFFJQVWHtQVHHWbJRRRHwqPvpMLpLZZWLwlwMllL\njsngsdGssLvlqnZqZw\nhhmfDjDsmDNjjNRNVqNVJRtQHJ\njvTnffrgFTwvqMzqGdMMSW\nsPbCtCCQQLffZGdWNLWDDzLzGM\nPQPBBtfZCZsmJPPplwwmTwpcTcmcgj\nNBmBRCCsBTRNTndGdswnlwvwnw\nfvbqrbPLqpGwScGGwbbb\nHJDPJFJLJtpJHCvCFBBBBNNWvF\nHJHgNQJBSlRRbJDRDb\nRptsfnshscWMLMZDZp\nnjmrnPznnsTRTtPzFzRTswgQwqvVVwBNwwvjqCHqHq\nCBMgBJCTNgQcsQspPpWjRrWrsWsn\nmwLvHLGbdHbGzSHmvmvHzrhjjjPptjWGqZPPZhPRWWGP\nvbbrLFwLFDJFDfFN\nTnPvZSnQgQPHnnnQvgMSWppWNfWRpWfMtthMNDhN\nwLJmLBmGFBFdLBbCBbVCVlsGsWhtHqthRRhqhtHHGqqf\nLmHLbCjjBLVZzZSgzQgjrc\nwdSwfpBhtFbStpftjSVhBwFrGrsQnQgnGrQmqCPmDrmmDb\nzJvzLJLNZNscLzNHHLrGPvGGPrDDqGgDPDgC\nRWsNNRMsHTHLHTlMczLHZLWtpFwfpthSjFtwFhjSVplwtj\nQbrBDLGGRJMQJQJDbQbGvNscWNnTdvnvtnLcccvl\nfqZgpVPZHPmfgPPjBFgcscvNNccdddtdNvdFTs\nCgPpghfjjPgVmfBMMCRJQQJzJBwM\njLWDqLdWdwLfHwJwzSSfwS\ngCgRRltMrlrCcCMzcBSVfZQfVNZNVSBVNNNh\ngMrcPntccGgzgTMlMPrtDWFvLqqdLnDsmLLFFqvp\nttHJNccRRwmnsnHnHWMSwqfgvgfwSQZfQf\nShpLhhzTPBMpQqQgvM\nzhbFjVdrjFjVljrVbdPddSTPHNssHnHlRNCHtRtsctJtGsRJ\nzMVTscVhQhGGhClv\nLfMJmgSBpLRfHmBPgpmJPSBdvQNtlHvrHvNNtNNNClGdGN\nJFJmmSFFbFFbRJPBgFPmSBPMzzWWTDjjTsTqqwjVWbjjVVsZ\nHZpCnwnggfFggbgLDcTb\nSjvWjGzNGGzRjSGmMcLhvhMhFMCcmv\nrjrVJNjVrzVNPrwtPwPCHBPB\nSWwFbTzsSjPzpjFbsWPTWTcWLCLgLgLBZjGVDjCVBBgCBGCZ\nlrJJttQcHqrHrvggHVBgBLffBC\nlnhhcqNRJWzhTdsWFz\nvzldvzlclbFjFvmtjZ\nDDNMNStMsSsGnhSMwQjTQVgVbwMbVTTQ\nDsDSCNNGpLtsNLpnNsqLppDzCBcdJHBzllcJfzJBPBdBlR\nqWNfDvffbJBFDpNfmpbwhGhwjLgTrGwhbGGwrj\nZctMVCcVVQtTpthlnLtppw\nQMcRSPMZcpCZqDFNRFHNJFFF\nRmztpGSssNMzJRpCvqsCrqdHCBlBdw\ngffPFDcqVbgqWgjlPlwCCrdBdllnBH\ncFFZcbcqfQhgbcNJZRSMRtmNJptS\nPZthPBWlPNPSPtmHHggFGgBJJbwg\nqqzDvLLrfDpvvDLzqvnLzqpzbrCRGJRHwFCmHRwGwgwbbRCj\nnnpnMfpMLTVqfmthmsMNSScMhS\ndflvbdvpfffzpnNLNbWqtblqHjmVhVRhHrwrwrswhHnjsmwh\ngSGMdMcJBgMTGPSPDVZhHhHZmDZhrwwjVm\nCPJQGBGGPcSTFcTCScFtLLdWvptWLbNpNzvWQL\nWThqhvvRDJDRhwcrscNDNFgDHNct\nfnrZVnfVjrSGGLzZbnLzZLjVHstHHHQtgQbPpPcpHsscsFpN\nSVjZSzZdndVCdSSZmTRvMWBRWvvWlrvmhJ\nBcllhPPmMMBPcbRwgQtgHHgtmwgzmt\nrpLqbrbTnNvqjLqLNqrNLvHzDtwpDCzFwggttFFHCQFQ\nLrrrNLqjZSTsZZsvjbLjPhcBBlBsBcGPPcPlPVGP\nHHhrggvSHDtCDsfF\nZMpLblppNZBDBwLzLLpMssCntfWdCFCnfCCtRNtq\nlbmJlzzLMPMmlBzhSJVccSJhTvSTDh\nsdjBBFqHscFnHTzCnRSnzgVTlC\nLpWWtvZfrpbLpZpWftprLCCNMzCZMmmzTNNTmSSVSM\npLVtrtbGvpbpGLfPddHBscBQJJGcwsQq\nhLcLnVVcfQBLZPVZnThfVVmjqjHNjgvNfdvpNdrrvvfp\nlbRlWFHJtGNGpqmrqrCN\nDzRRDFsbDtFtDJtWRztzJZVBQMhTsLhQZMZHVLcLcP\nWgbdmgMmWDDvcPcpbz\njffpllHSpHRptRRGRntSVwvLSCCJDzcCcDLvCzPP\ntRFrnlGfZrQpBpgQQsgF\nTpbBZbCCHCGZNHbzGqgFdNlcFSdNlStSqg\nwvWnWwLCPjJPJhMWtWdMfFSMgcdM\nhhmvmJrJLJJJPvvhDjswCRGHHrHzBBHGVRQBzRRQ\nzChCSBbpSsQscDHHQh\nLNJJRgGltJDvfcrfgHfZ\nlJNRGlLnNJtTGVMlFTbwSWqjBbzWWHSW\nNDTJQDVwCTCJhVGDLfbBbBfbGqbfHBfBHb\nlMgMrggMrmmtzMcgWdlmMlbsRjSRBsTRBWsSHSBTHRBj\ncMPlgztzrPMznnMPpgddgdzpwDDNNwhNFCTwNZQFLTVTwV\nZgshQgzQnnwMtDwBwv\nSFWFlFZRRcmlWmWRBCDwvwwftBtLmfLf\nPjRFdTdWGddrGlPjcsJZpJzTqhzQJzNHhz\nPgHQgddszgdGPWpMjljMcj\nbSqTqnZLnDJSmnmZmtllGsnVtnWjGGWtjl\nfqSLDbRSfBdHsRwsFdHd\nRwHWZpCWhHvwvHCBMBpJMJGPJJnJgc\nlztljTFljRRBBzBnBMnJMS\nQbRljFtQfljbbFqNFrdZVrZfdCCwVwvddH\nsHzztVzLTgnssPggHHsnCtzBmfBMrMccBBmqmrBqBCRqMf\nZhDQJhFDqjmSMrRF\ndZpwDhNhhZpQJdDQpwnsGttGwLtRRTLRts\nQJNhClVgPTTtPNCJJCtJhlNPZZRVZfvfzZzmvvzvsmZsvmzR\nblBWBpdbLBDqBpszzffRsvdzjvvd\nBLWpqBbqnDHqBbGlnWGBPcPJcHTTPrhtgNtCtgPc\njWVJqVwgsJcHCVlQVVQNBp\nvGhGhTPtSSNCddSBCH\nZCCDtbDftZsqrrcnWW\nhJThjThhVzVTZZwnNZRdgmzt\nlrbSSddsrbPQpsvNtgPRmtHmvtnR\nGQrspWdSGbDcsFFLBhCGVBjhjj\nrHdlHdZDlTcflcNfcrCgcTWWpWQFsRWsFjRCsCjWCmhF\nBnqbvQPLGLBPwqGmsVshsSWShGms\nPzzPPQJPMJtJbbznPnDdrHlNldDNltrgtfDg\nSmmMQhPSlmTwPpmnpllMSMPrccFDqFrDFGgqrDcCwfDgwq\nbVdLLNvdQWVbJbQLVGfGDGfDgrFrqgqJgg\nvjjWsbQdBsszhsHlhhPPSHsM\nPqzJqNzsJgsgNqPdLJPPPNVpMMVWGlFWNFGMpWppGF\nZnZBjttQZcQZRTQDjQwGFlWMlGdGWVrWWlGn\nZRDBRSZDSdSLsqJHfSbzzL\nrljJqtZlJqlJcvBNJBNQfQ\nTVMWznvPMTFWznwPFFvwFbbBNBgbcNpQdNcBFQpb\nmDnLWsPLvLMnnnmTzLzVCtlRRtjSljCZhDlhtqSq\nfgWMHClGMWfgRWWWGCfmfgCSVQNTDFHTtddVQQDZNLDZtVVL\nwSqbsvzpwpbpdFTNLQwLNTFN\nzscjPnPqsJlmPJCJSC\nGZSwQjGwGrCGwrTjdCTwdTBpqqlmNmVpNrNvplJqNNpl\nzMfJnDcbRRDRFbzDFRLFBtqNmqqtNBmNBvNm\nsHcJRRHzzfQTjjCjQjCH\nwJCVVbJgCLCwGsMbbGTlsRWHsztZPZWtPrPrWrHzrz\nDBqdvfqDBqFpWZFrtppZJp\ndjqNfQcjDQjMgbbwLjlJGn\nTSwfZMfpQwcCCCCrbbCZ\nPLJmGJnjqjrsCjMMVj\nLnNNLLLnFFWmLFMGNMDgfRpDQSfwSfgQzBHwTS\nCdjNCMmdCrVmCjJdVjFNMtMzhWwpGbpBhPZZZDbGPpDhpr\nQSfHzlvgTQffSSHHclgfHnqPbPPPppBhpWDhwWvPhvbwwh\ncQfQRgQnQsnsQSgHRQJsCFMsCjLzJJFjCdNC\nltLlJttmQdfVRhNmhB\ngWWDrPSvCSWgMMMZBVBdTQPQZNZVPR\nvCbwQzcQrCrLFHwJpHHGpp\nVbRVvVHRbJVTzVLBVPtt\ncSdgSZSZZFhnFcFwdDQcZZhgzpTlzLDzlWTvBWLztBtpLplT\nhZZvdrcSZQZSSwncdHCqHmGHqJrCJqbNbq\nlwWmsQlDbCZbVWZq\nrRShhhhPjTsjTRvHhqfzqfqvBZZvBCZffC\nscPThhRSjQmmNpplcg\nFChtDTThDqZtjppjvgNvjl\nLBwsVdVHLVvvpVGjjgjS\nBbHLBfRcsHcBdMbdWJQPWFCQCZZhWrJPQp\nzMtWCstzNrQLpbplFwQwhb\ngDTDHGvvHVfVdGZVJGDGdnmbwmWFwfhpbnfjwwjpLl\nGJcHVJdvZJVGZWHSSvTZMCzrzzRNSBtBNPBMqNBB\npLzZVVGGZmZVlmDsQglgsllc\nWSvrjRjrMMFFnFjnrnrdjBRRgdsblQQPbpggsclNDDbPstDs\nSMWRBrrrvSRBSSvWWWBTMTCqpZzLCCTCwJZwwzGZzqHL\nTvfGwGZpPnSNgSSnGh\nsrLVHLcjsjVtHqjjrjFjcCqPBggqNQQnMqhgngnznNNB\nVtdmPHLmtVHFLdmZWRJlWpWWWlmWfp\nSbSbdTsrVrdhfSdDGJWGmNwWWPwTGP\nBqlRpBMmllpmnpvvDJPZWPJwZcJgDD\nFFRMCnRFtCMRlMplqMBRBppVbtzdrdhssrmHzVVSsVhVHz\ndNrhhLsrshSmmRcPhm\nWMCngCzCvzvMMpplQvzWlRBPcVStSmTSQbbVSPQmwm\nMpzvWnllglJfqfMgsNdZHqNjdDsPHqqZ\nrNvGZRsRcRRBtBCttB\nDwPPQWnWWnPQnJlPhmTtBFBmqzhpmnFh\nQwQQQlbPPMWwDdDwlVDJJPPdvdSjrjdrsgssLLsZLNBrNNNr\nVjMMVzngnjQQfJDchZqGNqFPcg\nSWBwTtWSFTHwFClHHmwBPcJJDhNGPJNPPhPPGhJt\nCBvSBBBWHdmRTvRWRQFLQRnjnfLLzVbs\nflSpvLlmZpCpZmVSBtlvHHjFHTdssZdjHFdTWdNh\nRmQMQJRQJQmPgrzJrPcRQRJcWdNTGTGGFhGTdFhHThHGMTsF\nRzJrqqcqPRqqJDDqttCpmtlwBpDflSLt\nhBjPZbPBbWvTRnLRWntD\nMNGQNsQwfzsdGfgTGfzQwwffmnCRDVmJLRLCvnvLDvJCDgRL\nwTTdFldNHzTMljjFqphrBqhrZb\nwDcMCbZbzPDcZDWQdrJLrQrZBLRBQr\nFFSHStjtHgllgFdSNmlfFStBqRRssRsRJrLrjrrJBRVhLJ\nfGggtfHtgWMwbCGdCT\nRQrQDDbVGrRSfbVbGtmGtwHFWsCCzsJSJJHsJPJvWC\nhphQnhZQNjlBBcMMpCsHwFjvvHWHWsFvjC\nppcnnBZqllTQfmrffbtGTDGt\ndsDFsBZBhCFhshFrpBFnmLQmHmRgRbLqmmmRQDLm\nPPBBNNNtGTwJNfTJffNttfLQgqLgHvHbqRwlgmblRvll\nNSNTGTJTWPjGWMPSJJzrBSpzdFSddCFdncrs\nbPzRlMPTzTMldJMnhswcjzfQVccQhc\nHCCqNmNmQQmQssJn\npHptprtgRStTtMJt\nnTmhrsPMsTfmHHGcSgtj\nbJJwdlrJQLlvwlQDDwSbgffGVNjfgjNtVbcf\nQlpDQFJdvdFqJdFpLvDFpLLnzZMnBMRRzMTqnrzqTRPznz\nqRVRqBzgwqRpqRgVqQRPpQJJPrPhPGJnsGrCFdFJrZdG\nZvWDmMvmSvCndssrsJ\nWcZcNWlcMjBQpzNTqVBp\nDpLPZLDDlcgmDmhVgfgfWWRwhwwt\nVrVMdbCrrBTjCMQQtMwQNSqMQW\nVCBHdJHdvrrFsbsdrBJTdTzZcpmZGDGPlmzmlccFDZDn\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { groupArr, sum } from '../util'\n\nconst parseInput = () => input.split('\\n')\n\nconst priorities = [...'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']\n\nconst calculatePriority = (sacks: string[]) =>\n  priorities.reduce(\n    (sum, letter, i) =>\n      sum + (sacks.every((sack) => sack.includes(letter)) ? i + 1 : 0),\n    0\n  )\n\nexport const Part1 = () => {\n  const sacks = parseInput().map((line) => [\n    line.slice(0, line.length / 2),\n    line.slice(line.length / 2)\n  ])\n  const total = sacks.map(calculatePriority).reduce(sum)\n  return (\n    <p>\n      The sum of the priorities of your item types is <Answer>{total}</Answer>.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const sacks = groupArr(parseInput(), 3)\n  const total = sacks.map(calculatePriority).reduce(sum)\n  return (\n    <p>\n      The sum of the priorities of your item types is <Answer>{total}</Answer>.\n    </p>\n  )\n}\n","export default `\n35-73,35-82\n9-27,10-80\n25-93,2-42\n37-54,52-53\n3-8,2-97\n46-89,45-49\n52-76,75-75\n26-27,21-27\n22-96,21-80\n98-99,6-99\n4-9,8-91\n32-46,39-54\n14-14,15-51\n49-56,65-87\n16-16,16-33\n63-96,95-97\n3-81,3-96\n3-69,3-68\n9-93,11-93\n3-8,8-94\n94-97,5-92\n35-73,53-73\n17-17,17-84\n88-88,5-89\n11-99,12-62\n31-33,23-34\n98-98,10-99\n26-26,26-86\n21-63,22-50\n44-81,20-45\n40-41,16-42\n1-39,38-40\n33-97,97-97\n8-9,8-77\n3-76,2-75\n71-82,71-81\n65-85,84-86\n13-71,12-14\n57-95,28-96\n10-35,3-35\n4-99,98-99\n53-60,54-85\n39-43,16-43\n1-86,85-86\n6-7,6-35\n3-3,4-69\n15-72,3-16\n25-48,24-48\n12-33,12-34\n61-63,8-62\n76-76,59-77\n18-82,81-81\n83-91,24-87\n2-2,9-9\n29-94,29-29\n41-87,41-93\n43-44,44-81\n9-83,82-83\n78-97,9-97\n11-26,12-49\n2-20,1-72\n29-97,28-88\n54-73,30-55\n30-77,96-97\n4-62,62-62\n25-60,60-60\n12-89,4-99\n96-98,4-83\n20-68,12-14\n76-76,19-76\n2-93,5-93\n64-64,46-65\n14-61,14-15\n19-85,18-86\n4-85,16-85\n88-88,15-89\n66-66,66-73\n1-93,1-2\n16-81,10-81\n79-89,3-88\n57-94,79-95\n52-52,12-53\n13-27,27-27\n13-13,14-14\n82-84,22-82\n68-93,25-69\n43-85,44-85\n2-27,24-75\n34-44,31-43\n6-47,12-54\n43-75,42-74\n12-91,7-90\n48-54,53-66\n40-54,53-90\n11-61,12-95\n16-86,17-85\n10-94,11-11\n86-88,4-87\n17-94,16-93\n16-55,15-17\n29-50,28-49\n12-75,13-76\n27-37,33-36\n9-9,9-95\n47-99,98-98\n35-87,87-87\n38-99,39-99\n5-58,16-57\n84-86,84-88\n73-75,74-76\n10-92,11-92\n6-51,50-52\n3-21,20-21\n15-55,14-15\n50-50,50-98\n5-55,6-66\n44-97,86-96\n2-62,3-63\n3-98,1-99\n32-75,75-76\n71-71,70-79\n46-89,5-61\n79-95,80-94\n71-88,69-89\n49-72,48-80\n3-56,8-76\n10-79,12-89\n33-97,33-96\n41-91,90-90\n32-44,31-32\n25-52,45-47\n38-57,38-57\n88-88,13-89\n23-45,22-44\n12-93,13-69\n76-76,27-77\n16-17,16-24\n16-92,91-93\n8-95,8-85\n4-64,3-65\n18-94,17-34\n43-52,43-52\n16-97,15-95\n10-39,15-38\n33-33,10-34\n35-56,34-48\n97-99,41-95\n45-49,44-49\n5-94,7-94\n2-98,1-7\n17-73,16-74\n11-20,9-12\n27-27,26-64\n5-93,8-92\n16-77,16-76\n58-90,93-94\n36-59,40-59\n72-84,72-84\n2-81,4-95\n31-63,32-76\n4-88,4-5\n18-20,19-87\n84-84,84-95\n26-76,75-75\n7-79,42-79\n29-37,23-29\n28-51,28-50\n38-65,8-39\n55-89,56-90\n6-6,6-49\n14-18,23-43\n61-70,2-70\n5-92,92-92\n6-71,7-75\n41-59,42-59\n99-99,7-46\n15-50,51-57\n17-95,16-17\n54-88,55-87\n36-36,36-73\n79-87,27-79\n38-85,32-39\n91-93,41-92\n71-75,52-74\n37-52,37-53\n33-67,4-68\n27-94,27-99\n12-90,89-90\n7-70,6-69\n97-99,96-98\n91-95,7-92\n23-95,24-74\n8-35,34-53\n26-94,26-94\n90-90,71-91\n8-16,7-15\n3-97,3-98\n23-23,22-24\n25-65,24-40\n24-24,13-25\n1-83,3-82\n10-11,10-65\n40-41,41-41\n91-91,2-92\n70-95,94-95\n2-86,3-83\n10-12,11-93\n77-90,38-71\n25-25,12-26\n75-77,5-76\n9-85,7-10\n7-94,87-93\n95-95,41-96\n51-75,50-52\n40-87,41-41\n23-47,47-72\n21-98,20-98\n10-63,10-53\n68-82,68-68\n18-78,18-50\n29-60,33-96\n2-53,9-53\n5-97,1-5\n23-49,48-78\n23-70,23-24\n4-95,3-96\n14-35,13-34\n41-67,40-40\n4-96,3-81\n54-55,54-70\n7-79,18-81\n61-71,61-70\n9-9,9-76\n69-91,69-92\n10-90,11-95\n95-97,67-96\n85-94,86-91\n70-73,68-73\n23-76,92-99\n1-12,11-94\n46-77,46-78\n65-73,52-72\n27-62,28-98\n30-76,73-75\n5-45,5-71\n11-90,89-89\n14-92,14-15\n62-75,61-87\n25-88,84-94\n16-84,17-95\n18-93,17-93\n27-59,27-27\n36-43,36-42\n42-42,43-56\n7-41,40-41\n6-95,6-7\n23-98,12-98\n6-87,52-88\n54-62,53-68\n33-86,18-37\n2-98,12-98\n78-96,73-81\n93-97,93-96\n7-7,6-91\n34-49,34-48\n43-65,61-66\n57-72,67-98\n16-89,15-89\n3-66,2-65\n21-45,22-31\n7-47,47-54\n1-78,1-79\n31-77,32-77\n88-91,18-88\n15-82,11-16\n37-90,20-90\n18-52,21-81\n1-96,2-96\n6-54,5-25\n20-46,17-47\n2-7,7-94\n10-42,16-43\n25-43,26-56\n11-99,11-12\n4-95,3-94\n61-63,69-88\n1-93,37-99\n94-94,14-95\n4-43,3-46\n79-98,78-78\n2-78,2-78\n48-72,48-72\n10-98,3-99\n22-47,35-54\n8-62,9-16\n2-22,3-8\n4-93,5-91\n3-84,72-84\n18-32,18-19\n40-65,51-64\n34-36,34-34\n11-65,12-64\n23-98,24-97\n23-75,74-75\n4-6,5-72\n5-89,5-88\n25-86,85-87\n65-91,2-91\n93-94,2-81\n11-54,23-54\n57-94,93-99\n18-23,22-23\n88-88,4-87\n97-97,1-98\n6-99,5-5\n15-49,16-48\n41-68,68-68\n40-88,89-89\n89-91,7-90\n5-87,52-86\n31-39,32-38\n98-99,1-99\n36-49,48-49\n15-61,14-41\n41-53,42-63\n2-21,12-20\n37-47,47-47\n21-21,22-94\n48-65,49-69\n38-80,10-39\n7-7,7-85\n32-85,32-33\n42-79,78-78\n22-92,21-23\n1-35,3-47\n6-92,7-93\n40-94,6-87\n48-96,8-95\n45-95,79-94\n1-92,9-89\n21-64,20-65\n7-76,7-8\n1-59,3-45\n9-9,8-85\n16-32,31-70\n56-93,56-56\n8-15,13-89\n43-43,42-60\n31-73,6-74\n24-24,20-25\n36-72,36-37\n74-96,75-75\n6-94,5-93\n13-97,5-14\n10-22,22-22\n39-86,39-39\n75-75,75-83\n25-76,14-77\n9-67,66-66\n6-25,24-26\n8-8,15-62\n23-61,8-61\n32-34,6-33\n38-78,77-79\n52-77,53-77\n17-86,9-12\n88-90,2-89\n10-25,15-26\n25-86,24-24\n35-92,40-91\n19-79,83-86\n1-1,4-64\n66-72,71-79\n43-45,42-44\n7-93,6-89\n1-75,1-76\n7-8,7-99\n11-54,10-44\n5-6,1-6\n24-41,5-25\n7-93,7-85\n96-96,71-93\n41-84,41-83\n50-72,65-81\n23-24,23-77\n7-97,3-62\n26-26,25-32\n36-65,30-66\n83-83,77-82\n10-75,74-75\n10-90,11-89\n98-99,19-99\n98-99,1-94\n7-39,14-39\n8-8,9-91\n27-77,26-26\n22-78,36-78\n51-67,67-68\n12-35,11-49\n27-61,60-62\n23-51,26-94\n48-79,49-96\n13-95,6-39\n75-84,76-80\n18-67,19-68\n51-76,46-76\n40-93,33-41\n37-80,66-90\n16-50,15-95\n6-81,5-7\n10-94,9-65\n42-96,43-97\n16-71,17-72\n1-38,36-39\n62-63,62-86\n5-99,1-99\n71-72,8-72\n4-35,2-36\n1-52,51-53\n70-80,79-81\n46-47,47-82\n29-65,40-67\n42-60,35-54\n39-74,7-74\n74-97,4-97\n62-97,55-75\n8-36,7-35\n31-75,74-81\n12-34,11-85\n49-79,14-50\n52-53,53-63\n93-94,62-85\n85-93,13-87\n60-61,62-95\n2-5,4-80\n60-61,60-98\n24-58,24-59\n13-67,14-80\n13-80,14-81\n6-36,5-73\n9-76,80-81\n11-96,11-98\n20-97,88-98\n6-78,5-77\n7-7,19-47\n35-41,84-88\n57-59,44-59\n24-55,24-54\n13-80,13-14\n5-6,5-42\n51-90,52-52\n18-92,19-93\n20-20,23-94\n91-91,23-90\n22-77,98-98\n14-33,15-96\n28-34,28-29\n26-73,96-96\n45-86,44-87\n40-95,21-93\n15-20,14-14\n5-99,2-99\n89-89,23-88\n35-92,73-92\n92-92,36-93\n6-70,16-70\n18-85,19-85\n44-51,43-56\n17-88,16-48\n7-94,8-96\n90-90,34-83\n53-66,68-70\n19-82,18-81\n10-91,9-91\n22-76,31-77\n55-55,15-55\n2-61,2-3\n18-75,37-74\n36-95,35-37\n57-65,64-66\n89-91,10-90\n35-40,34-35\n6-90,6-6\n6-27,17-85\n9-10,10-30\n7-85,8-84\n60-60,34-60\n74-75,20-76\n58-94,7-93\n83-98,14-93\n10-86,9-62\n46-87,76-87\n34-73,34-74\n35-66,13-66\n99-99,4-93\n56-83,52-83\n3-90,2-98\n34-97,33-87\n71-71,10-71\n4-8,8-96\n81-89,17-81\n46-96,46-95\n20-34,19-32\n77-89,71-74\n18-71,19-20\n43-88,44-85\n40-94,40-40\n7-73,72-73\n98-99,50-97\n8-45,7-46\n33-73,33-73\n38-97,96-96\n24-86,24-87\n17-54,17-17\n46-84,43-84\n5-92,4-31\n58-93,99-99\n33-35,34-98\n43-74,36-49\n9-76,10-83\n4-93,3-92\n67-83,66-89\n17-54,15-17\n86-89,88-89\n16-50,4-51\n10-11,9-11\n41-94,94-94\n58-74,59-92\n19-35,34-36\n4-5,4-99\n38-75,56-76\n50-84,58-85\n1-35,34-35\n36-37,37-89\n1-47,15-95\n67-68,67-69\n50-94,93-98\n59-59,37-59\n62-63,63-79\n31-98,30-82\n32-91,31-92\n3-91,5-91\n1-1,2-92\n19-42,18-44\n62-70,22-64\n79-87,79-86\n3-86,2-2\n88-92,52-95\n3-49,1-7\n9-60,10-70\n70-94,40-71\n15-43,16-44\n62-94,93-94\n19-64,24-64\n7-75,74-99\n14-14,15-60\n9-71,9-71\n4-80,2-81\n39-78,49-78\n1-98,5-98\n1-14,2-44\n7-20,6-19\n41-41,40-84\n90-95,90-90\n11-16,15-45\n11-82,81-83\n20-73,15-73\n50-62,50-61\n11-88,12-95\n76-76,15-77\n4-6,5-64\n88-88,47-89\n68-81,8-69\n80-82,81-81\n54-93,20-56\n56-65,64-85\n50-90,15-90\n39-89,1-58\n50-77,76-78\n1-84,2-90\n46-87,45-87\n7-61,60-60\n35-99,36-80\n98-99,6-99\n53-62,33-54\n44-94,2-76\n2-93,4-93\n2-36,2-36\n74-76,6-75\n20-77,21-83\n8-9,8-97\n37-84,37-83\n11-54,54-54\n39-99,38-98\n17-37,33-76\n98-98,5-99\n33-66,34-59\n38-44,37-74\n54-59,59-59\n7-31,6-57\n14-19,15-44\n11-77,1-10\n26-70,27-70\n60-71,48-76\n45-50,49-92\n21-95,3-90\n63-79,64-99\n1-97,4-96\n28-69,30-68\n39-86,85-85\n28-28,3-29\n55-55,56-94\n31-87,30-31\n75-77,74-76\n19-19,19-99\n81-89,82-86\n37-68,16-68\n65-89,5-61\n71-97,72-96\n18-31,30-82\n74-96,75-75\n37-87,38-86\n13-46,13-14\n64-99,41-86\n50-95,49-97\n73-82,49-81\n13-39,22-40\n6-68,6-68\n51-88,51-90\n5-99,2-3\n99-99,73-96\n36-82,53-82\n12-79,13-79\n54-56,16-55\n7-52,15-63\n17-30,18-30\n21-59,22-59\n55-77,54-77\n5-81,4-4\n13-75,9-59\n42-53,52-52\n15-51,52-52\n8-31,7-7\n76-84,7-77\n22-99,22-23\n2-90,2-2\n32-73,72-72\n10-36,36-36\n30-52,53-79\n9-9,6-8\n91-94,1-95\n72-78,24-73\n40-86,85-87\n53-97,53-98\n15-49,25-49\n12-96,4-96\n17-97,99-99\n29-74,73-74\n64-98,63-99\n87-94,93-93\n2-90,5-89\n4-88,97-98\n10-77,11-78\n6-68,4-6\n16-64,11-21\n3-28,5-77\n29-87,29-88\n56-80,9-56\n2-41,40-46\n48-49,48-64\n46-46,5-46\n37-65,64-64\n6-53,7-54\n10-31,18-62\n47-56,53-56\n5-97,96-98\n18-97,19-57\n50-83,23-84\n47-57,2-58\n26-70,11-71\n26-28,27-80\n1-99,3-98\n80-91,79-81\n16-24,10-21\n5-98,6-97\n36-71,37-72\n67-69,2-68\n14-99,14-90\n33-72,23-34\n8-85,12-85\n4-77,3-67\n22-24,13-23\n27-90,22-28\n20-87,8-82\n73-74,29-74\n99-99,9-39\n14-64,65-65\n18-68,14-69\n24-43,42-96\n98-99,38-99\n4-7,6-83\n1-12,13-93\n16-38,2-39\n36-87,21-29\n24-26,76-92\n6-69,7-7\n8-22,4-11\n33-79,31-80\n73-73,72-73\n36-48,37-48\n6-9,8-80\n1-36,1-1\n5-33,33-33\n89-96,26-89\n42-54,43-56\n40-49,39-49\n60-60,61-81\n66-95,65-65\n5-96,6-6\n24-75,23-76\n82-89,32-45\n17-21,21-61\n39-66,39-40\n3-93,4-94\n10-35,9-79\n65-94,64-64\n77-77,76-76\n29-94,28-76\n10-83,11-84\n1-13,12-12\n92-92,39-93\n87-89,52-88\n55-70,55-71\n21-21,20-22\n2-99,98-99\n3-34,25-84\n58-68,58-69\n5-92,24-91\n1-55,2-66\n5-97,97-99\n49-56,48-50\n62-77,1-76\n27-73,28-73\n66-74,58-74\n4-38,1-38\n69-69,69-76\n8-95,9-97\n84-97,83-96\n24-26,12-25\n34-36,35-37\n28-50,28-49\n37-93,4-94\n42-94,20-95\n7-9,9-86\n2-5,10-85\n29-45,45-99\n59-74,56-74\n68-93,97-99\n10-10,9-9\n9-72,8-69\n52-52,21-53\n75-88,7-76\n3-90,4-99\n16-92,10-92\n1-96,95-98\n10-78,11-79\n28-58,29-59\n11-60,17-61\n33-97,32-95\n5-46,43-50\n27-96,26-66\n8-38,38-94\n19-61,61-61\n24-58,71-90\n13-96,10-14\n47-88,47-87\n77-99,44-98\n2-4,1-34\n25-88,26-64\n13-38,10-53\n31-45,44-75\n1-51,1-52\n69-90,68-88\n12-12,13-13\n14-95,13-89\n51-52,50-87\n32-32,33-77\n46-54,80-95\n28-79,65-78\n22-56,21-57\n51-75,52-75\n49-51,29-90\n14-70,11-70\n2-95,94-96\n36-64,6-36\n22-60,22-61\n68-68,59-68\n1-48,2-2\n5-92,6-69\n5-84,6-85\n15-84,47-93\n13-93,97-98\n30-69,29-70\n87-95,2-75\n53-53,18-54\n93-99,50-93\n40-42,6-41\n10-73,10-10\n1-2,1-98\n55-57,53-57\n26-27,27-27\n72-72,71-94\n13-99,4-77\n37-94,12-93\n41-54,53-55\n23-24,23-63\n28-61,7-29\n3-89,4-88\n58-59,26-58\n3-5,4-94\n13-15,14-63\n10-67,11-78\n57-72,56-70\n2-96,2-97\n9-11,10-80\n80-83,80-82\n97-99,1-98\n24-54,25-33\n19-24,20-29\n1-98,2-97\n13-92,12-92\n74-90,91-91\n26-40,27-38\n51-81,18-81\n37-71,37-38\n7-67,3-4\n88-88,13-88\n9-25,24-93\n90-90,41-90\n41-52,40-86\n2-8,9-92\n6-56,6-56\n18-22,19-78\n29-56,55-99\n20-83,21-84\n21-21,21-67\n17-87,13-19\n64-66,65-86\n32-79,1-73\n13-97,12-86\n91-91,4-92\n43-61,61-61\n10-95,11-99\n3-95,8-96\n6-85,5-7\n2-92,1-93\n59-59,20-59\n14-93,92-94\n19-20,19-52\n47-64,46-51\n3-4,3-95\n5-90,5-91\n66-96,12-74\n39-93,40-95\n3-5,4-96\n39-80,2-40\n8-87,9-87\n12-91,2-12\n79-88,43-88\n29-64,64-64\n17-76,16-75\n14-97,14-15\n88-88,43-89\n40-60,34-40\n16-24,15-16\n16-94,47-89\n32-40,32-80\n93-93,12-94\n23-66,31-66\n60-78,37-39\n38-65,9-65\n28-28,27-29\n24-77,1-10\n14-59,15-95\n15-15,16-81\n83-86,7-83\n6-63,3-63\n54-71,56-70\n43-90,42-44\n7-63,6-44\n44-78,44-77\n63-82,81-81\n31-96,31-97\n27-45,28-34\n47-78,47-48\n90-95,12-95\n23-46,23-46\n1-50,51-81\n23-24,24-24\n4-22,21-44\n10-72,9-22\n66-67,22-67\n1-63,2-33\n62-62,17-61\n34-75,35-42\n30-45,29-44\n2-92,3-94\n50-51,41-51\n31-44,44-45\n7-27,6-73\n34-93,35-94\n23-74,38-74\n24-97,38-99\n9-9,10-73\n35-36,35-99\n67-76,4-75\n95-97,20-96\n69-69,61-70\n21-98,20-20\n96-98,52-97\n49-49,16-49\n11-84,11-12\n34-42,42-43\n53-58,16-56\n24-86,24-24\n29-63,29-29\n21-84,5-80\n94-96,23-95\n11-31,12-30\n54-86,53-85\n16-87,17-88\n9-90,8-10\n12-78,11-77\n11-84,12-85\n26-33,27-40\n63-77,69-95\n40-87,41-88\n5-94,4-6\n40-82,37-51\n44-52,41-51\n52-97,53-99\n57-58,51-58\n13-80,76-79\n58-67,29-67\n59-91,58-59\n49-83,13-75\n6-21,9-85\n86-99,98-99\n11-79,96-97\n3-4,3-97\n21-95,95-97\n84-89,47-86\n29-87,63-89\n5-89,90-92\n27-45,28-44\n53-90,52-91\n7-7,2-7\n51-66,51-51\n45-47,18-46\n37-48,36-38\n9-28,25-28\n55-98,55-99\n35-39,40-99\n31-69,1-69\n43-60,36-60\n16-36,30-35\n65-66,65-80\n12-88,12-12\n53-53,53-63\n17-18,16-18\n30-56,10-30\n7-38,10-46\n1-77,78-78\n6-94,5-78\n5-57,58-60\n49-76,48-75\n26-96,95-96\n45-47,11-46\n55-56,22-56\n29-83,84-84\n51-72,46-52\n67-83,68-87\n76-91,51-91\n25-97,25-26\n3-92,17-92\n55-68,68-69\n39-95,38-96\n1-83,82-83\n7-47,48-67\n45-73,72-73\n9-99,3-55\n81-82,31-82\n5-5,4-32\n14-23,22-87\n48-51,24-50\n23-23,22-46\n50-51,18-50\n17-91,3-17\n31-89,30-88\n11-74,7-12\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\n\nconst parseInput = () =>\n  input\n    .split('\\n')\n    .map((line) => line.split(',').map((part) => part.split('-').map(Number)))\n\nexport const Part1 = () => {\n  const contains = parseInput().filter(\n    ([[s1, e1], [s2, e2]]) => (s1 >= s2 && e1 <= e2) || (s2 >= s1 && e2 <= e1)\n  ).length\n  return (\n    <p>\n      <Answer>{contains}</Answer> ranges fully contain the other.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const overlaps = parseInput().filter(\n    ([[s1, e1], [s2, e2]]) =>\n      (s1 >= s2 && s1 <= e2) ||\n      (s2 >= s1 && s2 <= e1) ||\n      (e1 >= s2 && e1 <= e2) ||\n      (e2 >= s1 && e2 <= e1)\n  ).length\n  return (\n    <p>\n      <Answer>{overlaps}</Answer> ranges overlap.\n    </p>\n  )\n}\n","export default `[T]             [P]     [J]\n[F]     [S]     [T]     [R]     [B]\n[V]     [M] [H] [S]     [F]     [R]\n[Z]     [P] [Q] [B]     [S] [W] [P]\n[C]     [Q] [R] [D] [Z] [N] [H] [Q]\n[W] [B] [T] [F] [L] [T] [M] [F] [T]\n[S] [R] [Z] [V] [G] [R] [Q] [N] [Z]\n[Q] [Q] [B] [D] [J] [W] [H] [R] [J]\n 1   2   3   4   5   6   7   8   9\n\nmove 3 from 8 to 2\nmove 3 from 1 to 5\nmove 3 from 1 to 4\nmove 2 from 7 to 4\nmove 3 from 7 to 4\nmove 8 from 5 to 7\nmove 2 from 1 to 8\nmove 7 from 3 to 2\nmove 1 from 5 to 2\nmove 1 from 6 to 7\nmove 2 from 5 to 9\nmove 1 from 9 to 1\nmove 3 from 9 to 6\nmove 5 from 6 to 2\nmove 10 from 7 to 2\nmove 3 from 8 to 9\nmove 7 from 9 to 2\nmove 1 from 1 to 2\nmove 1 from 9 to 6\nmove 1 from 4 to 1\nmove 1 from 8 to 2\nmove 11 from 4 to 2\nmove 1 from 7 to 9\nmove 1 from 4 to 6\nmove 1 from 9 to 7\nmove 1 from 1 to 3\nmove 1 from 7 to 5\nmove 1 from 4 to 9\nmove 1 from 5 to 2\nmove 1 from 3 to 8\nmove 1 from 6 to 9\nmove 1 from 8 to 6\nmove 11 from 2 to 1\nmove 1 from 6 to 8\nmove 7 from 2 to 1\nmove 14 from 2 to 7\nmove 1 from 6 to 3\nmove 1 from 8 to 2\nmove 1 from 3 to 9\nmove 7 from 7 to 1\nmove 1 from 6 to 5\nmove 5 from 7 to 6\nmove 4 from 2 to 8\nmove 3 from 6 to 7\nmove 3 from 7 to 8\nmove 9 from 1 to 3\nmove 8 from 3 to 7\nmove 1 from 3 to 1\nmove 2 from 2 to 3\nmove 1 from 6 to 7\nmove 2 from 1 to 7\nmove 7 from 1 to 6\nmove 1 from 3 to 5\nmove 2 from 5 to 3\nmove 7 from 6 to 3\nmove 9 from 7 to 5\nmove 1 from 9 to 1\nmove 4 from 8 to 5\nmove 7 from 1 to 5\nmove 4 from 7 to 2\nmove 1 from 7 to 8\nmove 1 from 6 to 4\nmove 10 from 5 to 3\nmove 8 from 5 to 1\nmove 2 from 8 to 3\nmove 2 from 8 to 9\nmove 8 from 2 to 7\nmove 4 from 9 to 8\nmove 13 from 3 to 7\nmove 1 from 5 to 3\nmove 6 from 3 to 9\nmove 10 from 1 to 9\nmove 1 from 3 to 4\nmove 6 from 9 to 7\nmove 1 from 5 to 8\nmove 14 from 7 to 6\nmove 14 from 6 to 1\nmove 13 from 1 to 8\nmove 1 from 1 to 2\nmove 9 from 8 to 9\nmove 6 from 8 to 5\nmove 2 from 4 to 6\nmove 1 from 8 to 1\nmove 2 from 2 to 1\nmove 2 from 8 to 6\nmove 3 from 1 to 2\nmove 3 from 3 to 9\nmove 16 from 9 to 1\nmove 3 from 2 to 4\nmove 3 from 7 to 2\nmove 6 from 5 to 4\nmove 5 from 7 to 3\nmove 4 from 6 to 1\nmove 10 from 2 to 9\nmove 13 from 9 to 1\nmove 5 from 7 to 2\nmove 2 from 4 to 6\nmove 1 from 9 to 1\nmove 2 from 9 to 5\nmove 2 from 6 to 8\nmove 2 from 5 to 3\nmove 1 from 8 to 3\nmove 31 from 1 to 7\nmove 2 from 1 to 5\nmove 12 from 7 to 3\nmove 11 from 3 to 2\nmove 1 from 8 to 4\nmove 6 from 4 to 5\nmove 1 from 3 to 4\nmove 8 from 3 to 2\nmove 5 from 5 to 6\nmove 2 from 6 to 7\nmove 4 from 7 to 3\nmove 1 from 6 to 9\nmove 13 from 7 to 6\nmove 13 from 2 to 3\nmove 1 from 4 to 8\nmove 10 from 2 to 3\nmove 3 from 7 to 3\nmove 2 from 2 to 1\nmove 1 from 8 to 2\nmove 2 from 4 to 7\nmove 1 from 9 to 2\nmove 3 from 7 to 3\nmove 1 from 5 to 1\nmove 2 from 5 to 2\nmove 15 from 6 to 7\nmove 4 from 1 to 9\nmove 22 from 3 to 9\nmove 7 from 3 to 9\nmove 4 from 3 to 8\nmove 4 from 9 to 4\nmove 3 from 2 to 4\nmove 5 from 7 to 1\nmove 7 from 4 to 7\nmove 2 from 8 to 4\nmove 1 from 4 to 8\nmove 3 from 1 to 5\nmove 2 from 1 to 4\nmove 1 from 2 to 9\nmove 2 from 5 to 7\nmove 1 from 5 to 9\nmove 3 from 8 to 6\nmove 8 from 7 to 1\nmove 6 from 7 to 1\nmove 10 from 1 to 9\nmove 3 from 6 to 2\nmove 2 from 1 to 3\nmove 2 from 3 to 6\nmove 3 from 7 to 4\nmove 2 from 7 to 1\nmove 1 from 2 to 5\nmove 13 from 9 to 5\nmove 12 from 9 to 3\nmove 6 from 5 to 3\nmove 2 from 9 to 1\nmove 11 from 9 to 3\nmove 1 from 4 to 6\nmove 2 from 5 to 3\nmove 1 from 1 to 8\nmove 24 from 3 to 5\nmove 2 from 9 to 3\nmove 2 from 2 to 4\nmove 1 from 9 to 2\nmove 2 from 6 to 8\nmove 5 from 3 to 5\nmove 2 from 8 to 9\nmove 1 from 9 to 8\nmove 4 from 1 to 4\nmove 1 from 9 to 4\nmove 1 from 8 to 4\nmove 1 from 8 to 4\nmove 7 from 4 to 5\nmove 1 from 1 to 8\nmove 1 from 6 to 5\nmove 35 from 5 to 4\nmove 18 from 4 to 3\nmove 6 from 4 to 3\nmove 8 from 5 to 8\nmove 8 from 8 to 1\nmove 2 from 4 to 9\nmove 23 from 3 to 1\nmove 1 from 8 to 5\nmove 1 from 9 to 1\nmove 1 from 5 to 1\nmove 1 from 9 to 4\nmove 11 from 1 to 2\nmove 16 from 4 to 5\nmove 3 from 3 to 5\nmove 9 from 2 to 5\nmove 1 from 4 to 1\nmove 2 from 2 to 6\nmove 1 from 2 to 9\nmove 1 from 6 to 2\nmove 1 from 3 to 5\nmove 1 from 3 to 9\nmove 1 from 2 to 9\nmove 23 from 1 to 5\nmove 1 from 6 to 9\nmove 1 from 9 to 8\nmove 27 from 5 to 1\nmove 1 from 9 to 3\nmove 18 from 5 to 8\nmove 6 from 5 to 7\nmove 1 from 5 to 6\nmove 1 from 9 to 8\nmove 12 from 8 to 3\nmove 1 from 1 to 4\nmove 6 from 7 to 8\nmove 1 from 6 to 3\nmove 1 from 4 to 2\nmove 2 from 1 to 8\nmove 1 from 2 to 9\nmove 8 from 3 to 2\nmove 2 from 9 to 7\nmove 5 from 2 to 7\nmove 7 from 7 to 2\nmove 2 from 8 to 2\nmove 3 from 1 to 9\nmove 5 from 1 to 2\nmove 3 from 9 to 8\nmove 3 from 8 to 7\nmove 5 from 2 to 5\nmove 2 from 7 to 6\nmove 12 from 8 to 9\nmove 12 from 1 to 4\nmove 9 from 9 to 3\nmove 4 from 5 to 8\nmove 12 from 3 to 8\nmove 1 from 7 to 9\nmove 3 from 9 to 2\nmove 1 from 4 to 7\nmove 3 from 1 to 7\nmove 7 from 4 to 6\nmove 3 from 6 to 2\nmove 2 from 7 to 9\nmove 18 from 8 to 1\nmove 2 from 4 to 7\nmove 1 from 2 to 8\nmove 1 from 8 to 2\nmove 10 from 2 to 3\nmove 3 from 9 to 8\nmove 2 from 6 to 7\nmove 13 from 3 to 1\nmove 2 from 8 to 9\nmove 28 from 1 to 8\nmove 1 from 5 to 2\nmove 1 from 4 to 3\nmove 4 from 7 to 6\nmove 5 from 6 to 7\nmove 7 from 2 to 6\nmove 1 from 9 to 6\nmove 2 from 2 to 4\nmove 1 from 9 to 1\nmove 4 from 1 to 2\nmove 3 from 2 to 5\nmove 3 from 4 to 9\nmove 3 from 5 to 7\nmove 1 from 1 to 4\nmove 6 from 7 to 6\nmove 1 from 2 to 6\nmove 1 from 4 to 1\nmove 1 from 1 to 8\nmove 3 from 9 to 4\nmove 18 from 6 to 3\nmove 4 from 3 to 6\nmove 1 from 7 to 9\nmove 1 from 6 to 9\nmove 2 from 3 to 6\nmove 1 from 9 to 6\nmove 1 from 9 to 2\nmove 6 from 6 to 8\nmove 3 from 4 to 7\nmove 2 from 7 to 2\nmove 35 from 8 to 7\nmove 3 from 3 to 1\nmove 26 from 7 to 2\nmove 10 from 3 to 9\nmove 6 from 9 to 4\nmove 3 from 1 to 2\nmove 1 from 4 to 3\nmove 4 from 4 to 1\nmove 1 from 3 to 6\nmove 1 from 8 to 3\nmove 1 from 6 to 2\nmove 1 from 3 to 2\nmove 13 from 7 to 3\nmove 3 from 1 to 4\nmove 4 from 3 to 1\nmove 3 from 1 to 9\nmove 2 from 1 to 9\nmove 10 from 2 to 9\nmove 19 from 2 to 9\nmove 6 from 3 to 9\nmove 2 from 3 to 4\nmove 2 from 2 to 6\nmove 17 from 9 to 8\nmove 1 from 2 to 8\nmove 2 from 9 to 3\nmove 2 from 6 to 7\nmove 8 from 9 to 3\nmove 5 from 4 to 5\nmove 14 from 9 to 4\nmove 1 from 2 to 3\nmove 1 from 7 to 2\nmove 2 from 9 to 3\nmove 1 from 2 to 7\nmove 5 from 5 to 1\nmove 1 from 2 to 1\nmove 1 from 3 to 1\nmove 1 from 9 to 7\nmove 3 from 7 to 2\nmove 3 from 3 to 7\nmove 1 from 2 to 4\nmove 1 from 3 to 8\nmove 1 from 2 to 4\nmove 4 from 3 to 4\nmove 16 from 8 to 9\nmove 3 from 1 to 4\nmove 21 from 4 to 6\nmove 1 from 7 to 2\nmove 1 from 8 to 2\nmove 1 from 1 to 3\nmove 6 from 6 to 7\nmove 3 from 1 to 9\nmove 3 from 7 to 3\nmove 1 from 4 to 6\nmove 1 from 4 to 7\nmove 2 from 2 to 6\nmove 1 from 8 to 6\nmove 13 from 6 to 7\nmove 1 from 2 to 3\nmove 15 from 9 to 8\nmove 6 from 6 to 3\nmove 13 from 8 to 3\nmove 4 from 9 to 4\nmove 5 from 4 to 8\nmove 19 from 3 to 9\nmove 3 from 3 to 1\nmove 5 from 8 to 9\nmove 17 from 9 to 7\nmove 1 from 1 to 8\nmove 4 from 9 to 6\nmove 3 from 3 to 8\nmove 1 from 1 to 2\nmove 3 from 3 to 1\nmove 36 from 7 to 6\nmove 1 from 1 to 2\nmove 7 from 8 to 2\nmove 24 from 6 to 5\nmove 2 from 6 to 7\nmove 1 from 3 to 2\nmove 4 from 6 to 8\nmove 19 from 5 to 1\nmove 8 from 6 to 4\nmove 7 from 2 to 5\nmove 3 from 2 to 8\nmove 15 from 1 to 6\nmove 2 from 9 to 5\nmove 2 from 7 to 8\nmove 3 from 4 to 1\nmove 4 from 5 to 6\nmove 1 from 9 to 7\nmove 1 from 8 to 3\nmove 3 from 6 to 1\nmove 2 from 4 to 7\nmove 13 from 1 to 8\nmove 1 from 3 to 7\nmove 1 from 4 to 5\nmove 19 from 8 to 6\nmove 1 from 7 to 3\nmove 8 from 5 to 8\nmove 1 from 6 to 8\nmove 3 from 5 to 9\nmove 1 from 6 to 4\nmove 3 from 4 to 7\nmove 1 from 3 to 9\nmove 4 from 7 to 9\nmove 20 from 6 to 3\nmove 1 from 8 to 4\nmove 2 from 9 to 4\nmove 2 from 9 to 2\nmove 2 from 9 to 3\nmove 13 from 6 to 9\nmove 9 from 9 to 8\nmove 2 from 6 to 3\nmove 8 from 8 to 2\nmove 2 from 7 to 3\nmove 5 from 9 to 3\nmove 12 from 3 to 5\nmove 1 from 4 to 7\nmove 8 from 2 to 4\nmove 8 from 4 to 7\nmove 2 from 2 to 6\nmove 2 from 8 to 9\nmove 2 from 6 to 8\nmove 2 from 9 to 6\nmove 2 from 6 to 9\nmove 2 from 4 to 8\nmove 2 from 9 to 2\nmove 6 from 3 to 1\nmove 2 from 2 to 9\nmove 3 from 9 to 3\nmove 8 from 7 to 2\nmove 6 from 1 to 2\nmove 8 from 3 to 8\nmove 1 from 7 to 3\nmove 5 from 3 to 8\nmove 6 from 2 to 7\nmove 3 from 7 to 6\nmove 2 from 7 to 9\nmove 1 from 7 to 8\nmove 8 from 5 to 7\nmove 7 from 2 to 1\nmove 7 from 1 to 6\nmove 7 from 7 to 9\nmove 1 from 7 to 6\nmove 2 from 3 to 9\nmove 2 from 8 to 5\nmove 25 from 8 to 5\nmove 5 from 5 to 1\nmove 1 from 6 to 4\nmove 17 from 5 to 4\nmove 5 from 5 to 4\nmove 23 from 4 to 7\nmove 2 from 5 to 2\nmove 4 from 6 to 3\nmove 6 from 3 to 7\nmove 1 from 5 to 2\nmove 1 from 1 to 7\nmove 2 from 2 to 8\nmove 2 from 2 to 9\nmove 1 from 5 to 7\nmove 4 from 1 to 6\nmove 2 from 8 to 3\nmove 2 from 9 to 4\nmove 1 from 4 to 8\nmove 7 from 9 to 1\nmove 2 from 3 to 5\nmove 28 from 7 to 4\nmove 4 from 6 to 2\nmove 2 from 6 to 2\nmove 3 from 7 to 4\nmove 2 from 5 to 6\nmove 4 from 2 to 6\nmove 9 from 6 to 5\nmove 4 from 1 to 7\nmove 1 from 6 to 2\nmove 3 from 2 to 3\nmove 1 from 8 to 6\nmove 1 from 7 to 4\nmove 2 from 3 to 4\nmove 1 from 7 to 4\nmove 2 from 1 to 6\nmove 1 from 7 to 9\nmove 1 from 7 to 9\nmove 1 from 6 to 2\nmove 7 from 5 to 8\nmove 1 from 3 to 9\nmove 1 from 5 to 2\nmove 7 from 8 to 7\nmove 4 from 4 to 8\nmove 2 from 8 to 4\nmove 2 from 2 to 7\nmove 1 from 1 to 7\nmove 1 from 5 to 6\nmove 32 from 4 to 7\nmove 2 from 6 to 5\nmove 2 from 8 to 2\nmove 1 from 2 to 1\nmove 2 from 5 to 4\nmove 1 from 2 to 5\nmove 1 from 1 to 4\nmove 4 from 4 to 3\nmove 1 from 6 to 4\nmove 1 from 5 to 4\nmove 5 from 9 to 1\nmove 4 from 3 to 5\nmove 3 from 1 to 6\nmove 2 from 9 to 5\nmove 2 from 1 to 3\nmove 15 from 7 to 1\nmove 5 from 5 to 3\nmove 1 from 5 to 2\nmove 3 from 4 to 5\nmove 2 from 5 to 9\nmove 3 from 3 to 6\nmove 3 from 3 to 4\nmove 1 from 3 to 8\nmove 1 from 9 to 3\nmove 2 from 4 to 9\nmove 1 from 5 to 3\nmove 2 from 9 to 6\nmove 1 from 8 to 1\nmove 1 from 3 to 2\nmove 1 from 4 to 9\nmove 2 from 9 to 3\nmove 9 from 1 to 3\nmove 5 from 3 to 4\nmove 2 from 1 to 3\nmove 4 from 1 to 5\nmove 1 from 2 to 8\nmove 3 from 4 to 9`\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { nTimes } from '../util'\n\nconst parseInput = () => {\n  const [stackBlock, instructionsBlock] = input.split('\\n\\n')\n\n  const stack = stackBlock.split('\\n')\n  const [positions] = stack.splice(stack.length - 1)\n  const crates: string[][] = Array(9)\n    .fill(null)\n    .map(() => [])\n  for (let n = 1; n <= crates.length; n++) {\n    const index = positions.indexOf(n.toString())\n    for (let i = stack.length - 1; i >= 0; i--) {\n      const letter = stack[i][index]\n      if (letter && letter !== ' ') crates[n - 1].push(letter)\n    }\n  }\n\n  const instructions = instructionsBlock\n    .split('\\n')\n    .map(\n      (line) =>\n        line.match(/move (?<n>\\d+) from (?<from>\\d) to (?<to>\\d)/u)!.groups!\n    )\n    .map(({ n, from, to }) => ({\n      n: Number(n),\n      from: Number(from),\n      to: Number(to)\n    }))\n\n  return { crates, instructions }\n}\n\nconst moveCrates = (crates: string[][], from: number, to: number, n = 1) =>\n  crates[to - 1].push(...crates[from - 1].splice(crates[from - 1].length - n))\n\nconst getTopCrates = (crates: string[][]) =>\n  crates.map((c) => c[c.length - 1]).join('')\n\nexport const Part1 = () => {\n  const { crates, instructions } = parseInput()\n  instructions.forEach(({ n, from, to }) =>\n    nTimes(n, () => moveCrates(crates, from, to))\n  )\n  return (\n    <p>\n      After the rearrangement procedure, the following crates are at the top of\n      the each stack: <Answer>{getTopCrates(crates)}</Answer>\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const { crates, instructions } = parseInput()\n  instructions.forEach(({ n, from, to }) => moveCrates(crates, from, to, n))\n  return (\n    <p>\n      When moving multiple crates at once, after the rearrangement procedure,\n      the following crates are at the top of the each stack:{' '}\n      <Answer>{getTopCrates(crates)}</Answer>\n    </p>\n  )\n}\n","export default `\nmqllsjlslffbqbsbpbcbdbfbfvbfblfltffpddsmmhjmjvmvsmvvjfvfjjfccblbddhrdhrrlcrllrrswwlpwlwwgrglrgllrrlsshffrwfwcffmrrdfdrrncrnnlvllbsbcbwcchsshsrhhbnhbbqbmmmfdfvvqpqlpqppfgpfgpfpfttwrwwwfmfpfpmmpgglwglgfgsfgsggdllfhhmchmhttlhlchhrzrszsqqqzdzrrbbpgpccmfcmcbcdcrdrzzvjjgjfgfqfcqffvbbjbjbjsbjjbhjjzjlzjznzbbjvvpssdfdvffssrffpzfppsddgwgzgccrmrmdrrzpzbbjlbjlbjbgjbjmmtmllqffpjfppzzztfzfzfmfnndmdtmmhgmmsdshdhppbnpnbpnpdndgdbdwdtwwzqqjwjpphnnjddlglzlczzdpdjdjtjtgtqtptrrbqqqspsfswsdwdjdsdcdllpzpqplqqjnjrnnvrrnrccnwnnsttqzqcqppvmvdmdjjpnppljppptpzzwbwrrqgqhghshlslblflhflfbbwhwlhwhbwbdwbdwwzlwzwhzwznwwmmrddlttdrtrsttqbqtqtdqttqwwglwlbbdmbmcbbwbnbtbmbggdqqnhqqptpdtttvcvmvmdmtdttcwclccjcrctcllrprlrqqzqccttgnntstrtqqtfthtghhvcczhhctclljcljlcjcdjcdchhmjmjjrsjszjszsbsqqpfflqffqvfqvqjjnjtthvvvcjcjrcjclcwcrcrjcrchrcrggcjjpjjbwjbwjbwjwsjjrssfggzbgzgzrzmrmwmrrczcppnmnmzzgtglljlhjlhhgzgtgddrrhvvvlhlwhlhzzgzfgzzbvbvrvllplnlqnnfvnvgvdgvddsdqsdscscjjjvrvpptgpgdgtdtdzdtztfzfszfftjftfmftmtftddjzdzssfllfsllpwpwswrwdrwrcclczlclpccdrrftrftrtltftnftfnfrnfrfgfjfttrsrqsshlhdhnnztntwwnwppwbbmrbbtntznzggthghfggttpnpnpbplpvvpmmpwmbgcpwgsfndbrclcwbdcfhlcqblplglnqpnrpjqbddfqlqvbzrtwbwzvwqntcgmzrzztlffzmfmcmfzrmcvfctmlrlbtbpsgddbqrlblsslsbcmcglzdzjzlpgzprbrmfmlzrssqddzfjzfgbpvdgrrnldmtqgtjppqqwtzbltpfgpqtdqpwhbbwblnvvpmnljdghwrbnphswhgcvhpcplbbmwprznzzwnfntfplscpflhwdmlvfwtgrjhchnmnqbfgvsglllnnzwchqtcrvqzzhttcmblcthqrjdbvpwptcqtsnwrnfbbsqlshhtqdvcfcgdlbgzqjvzvglbcdwzpzttjnsvwrdldcqqstnnfnjthncgfvggphgfgstnmvnbmtvhpmsgmrccmmslqmjfzdjnbcjbjnpmsnvmzrphhjrdrrssnclvwbnzvpccqglnpljdtwrlnvpqzlshpcmfnmrjchqvlmthqbdrlnnpwcmfnwfzpbpnrsdmrqgqsjgwttwhgqlwghjntrvdndfhdwfzbwnmbjlzbhhdqfrdtwcjjvfnjbqdmdwncfhmslflvhqdmrcdrcdrldnqdmhzsvlglgflmlhwjqvfjdmqbmgffvdmmsbrrnrlcsbncvsjffttmhnbpwmqrnvdmzhztbbsrtwgfshjnlvhqvzwpvrmqfbsszswvrglnmwlmcdpjvmqsgnjshspzwrwctwwghmgjvbthcqcrlflsnrnpwvbnghrhvzpzchjlcljplflzqdvglgtvczhnbnlqltblddslqmdpvfbstvszqdsjvgfqlmdgbsnlzlrnbbqqfqjfqhljzlpbbgbnchwljjcpzbhdmwfzmqstcwtvgtvwcpgvmhpsngrshjvzzngbhjqmcfgjjzgdzcsbsvfwmznmwnnvlbntvcmgphqmdfjvhrlldcpwgnmbpjlqflvsrwqphvlpzlsdthfzdzvlphzdbqldvggsgrcmmfmfnjsfszqqbhnmntfgrbfwtlpqgwnrcqdsmqpqbtfdsnhbdcbwcdrhrfgsctrnlchrrnlptbcnqhndcpcdrgtznqrbgjlwzsjhblptncwtqcqcbzccrnjcmfvfnzwlrgdtgcvvcprwvnrrbdjzfnlvlqfpgbpwsvcnmnmmhnshtjgrcnscljwncdjqtwhlhvcggnwbzlzvfqmcdhmzddrdhvnnjbzbtnrgqcbmzhzzfldhlwwsgztfhncgctvjvszdzhrqmzvffmhvsqssjjvrrmtwqswhwjqgbfghbgfmgqssfhbcrglnbstfnqzvwqcznzgtnvjdvhtrlmgthcrqcwbjnzddsqhzwmdwndqcplhvpbpsdthngqwmlfqfndfqbpbwwrvsrnsjbsrwjdjbcqcvdfcsscgblggwggtmbntnbmmswfhvzhltwvprdgvzwltchhzsqlpwdndwftmsgbfwbpmhsdjhwbvvpzlpspsrsnpbwtdspfvdqdjfjbzmmtbnpzrqngccrbfndnjbcjfvwjvfjdvmsqdvgctzvpzmjmjvggpqfmmrsvqbrrlwrmzhmhpcmpltwdbtmwgzrrvsdhvhlwzggjwqzpbzvzrdbptzhzcrrjwjmdwdpsfwfspjgtmfcvddgspldbldtbtwrzdsjrbhvvcjgnrsbzvbrnqjwhrzgfsbdjlfqlszvlnrbfcrgfwrsmqmmnrwbtvfdpjzpfbhplfdsrwwgqqtgnzvddbgjjllmmcjjlglwmsbwrdrnnznwzplnbhlrlnmnllwgwgdpqdqqlmvsbgcshsmntrrlrvdhjgctzsfhmvfqtthvvchftflhlqqhhhbhqvgwtcmgcfwldhgptfddpsqrfzqmtpszswfrztzfsspltcvjwwsljsnjpnnqggscwwmcwfrljlrtqwqvplthsctvbndjfpnvcbdngzqtgjvwlsdhthdwmjvtnzrplwzwsfmgszpqjcjttslsmtbbvhjgpqmqfjbcccsnrlwmjhbsqgzqldmlhnbjnjfwmgzpvdcwndbwcncmtzccngcghhpwmjnncfgqtdtzwmhbdrpwsfbnjzfnwzwqncnlfjqjrjhgnqgvbcdhgdnbwpqjcfgprmfhzlrqtwlqpshfrgdszrwdtqfcntrzbgzlvrhtlsbjjwtnlqllnsvbzwjlmqvdgvtslmbwwcfstmqntwwwsjmrflrqnttfzjchpgwczzdtqbhdrtrpvhhbscvjtdtrhbstpqrnrzszwvcqzhbrzhlblvzrgwtqzbslbmgdqhpfqrdqrzcsbglcsshcwvlcpgjtjmcgpmsnldjzlwnrqlzzznpvmgssvzshjvtsmmzvstpqrhfvttnsrddfcqcbwhgpfdtlhcvcgjgdrvvntvdjqpvwvfmphhpzjgmshddqfsbpjbzrfdjnwrhmgcfbccmzqgvrbmcjdpvwfrtdpbwvjtjcrmnpzrrqbbvbsgcplwmlbsdwptbprlczjcqhdzprpttvnthbmtscdtjvrnwqhnvqbzvwnphnzwlgvvjhddjvjrvwlmhqcsffcnhgjzdjppqqwbglbhgzsmvzwjdvbqpztphshtrbrrhzmdlfdtssbhrcltwlqpzvpgbsgngpfjsjbrnnlzctqcqzwswhfnjjngwsztdgmmcffqfhbsgwstnflqjqttzbtgjvcfrrdwzcvhwjnhmtphszrsptjsqqwcwfnmtlzvzsqsmghtztrpvdslrmjqqvwfmzlwwjbwtpmhtqcfctdztsnfrhfqwqcjdzmjhvwwgrslmdqqwgwfvwlzzsznmdrzgcvbmrtcvjsqlftnpdhwmrzjwsnjjdrczbjcwhwlrtljwjsfmcfcrsjflsldbjrzpdgltmhtszzznjjlfqmgpbjfjncvtvlcfsmltbsvsrgdhwwhcpbdbntqhgjztvlwtwdsgqfwtlcdzffcszjmjvj\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\n\nconst findPacket = (size: number) => {\n  for (let i = 0; i < input.length; i++) {\n    const str = input.slice(i, i + size)\n    if (new Set(str.split('')).size === size) return i + size\n  }\n}\n\nexport const Part1 = () => (\n  <p>\n    The first start-of-packet marker is detected after{' '}\n    <Answer>{findPacket(4)}</Answer> characters.\n  </p>\n)\n\nexport const Part2 = () => (\n  <p>\n    The first start-of-message marker is detected after{' '}\n    <Answer>{findPacket(14)}</Answer> characters.\n  </p>\n)\n","export default `\n$ cd /\n$ ls\n268495 jgfbgjdb\ndir ltcqgnc\n272455 pct.bbd\n200036 phthcq\n174378 qld\ndir rbmstsf\n130541 trhbvp.fmm\ndir twjcmp\n$ cd ltcqgnc\n$ ls\n227634 brjmpbfg.hjh\ndir cmdzcq\ndir dnbf\n203609 fpj\ndir frt\n288222 lcr.nlr\ndir ngm\ndir ngsrlzc\n5927 phrnnw.dzj\ndir shjv\ndir wsvfbb\n$ cd cmdzcq\n$ ls\n37316 cfvhc.qsw\n41839 mgwlr\ndir pfmbt\n281659 tlpqzz\ndir vmd\n189667 zdvj.sbl\n$ cd pfmbt\n$ ls\n120151 bhzsnw.gft\n45035 cfvhc.zpp\n$ cd ..\n$ cd vmd\n$ ls\ndir dnc\ndir rgftffp\n$ cd dnc\n$ ls\ndir dvndwjzs\n216199 fzwrr.ndp\ndir gwhtzlpg\ndir lsfn\ndir lzcv\n237080 qld\n131509 rwhffw.ldj\n84024 wph\n$ cd dvndwjzs\n$ ls\n264750 htjvzrv.plg\n$ cd ..\n$ cd gwhtzlpg\n$ ls\ndir cfvhc\n285900 fpj\n112604 gqng.zww\n188180 phthcq\ndir prgbvj\n$ cd cfvhc\n$ ls\n136528 bbsmm\n$ cd ..\n$ cd prgbvj\n$ ls\n180538 hfgg.fbm\n$ cd ..\n$ cd ..\n$ cd lsfn\n$ ls\n133375 fzwrr.ndp\n242940 gcftj.nlb\n$ cd ..\n$ cd lzcv\n$ ls\n121565 plnqnqq.zwr\n100302 wdmqc\n$ cd ..\n$ cd ..\n$ cd rgftffp\n$ ls\n259406 rwhffw\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd dnbf\n$ ls\ndir bft\n219468 czjvl.brj\n130503 fpj\n120522 rwhffw.hrn\n92338 sngz.qsd\ndir vpmvnmfj\n$ cd bft\n$ ls\ndir zdvj\n$ cd zdvj\n$ ls\n50020 sngz.qsd\n$ cd ..\n$ cd ..\n$ cd vpmvnmfj\n$ ls\n78395 dlch.vfb\n270867 hnmq\n172551 pct.bbd\n186790 phthcq\n65750 sjjlnf.bjn\n$ cd ..\n$ cd ..\n$ cd frt\n$ ls\ndir bbsmm\ndir cfvhc\n22983 dpvmzlv\ndir fptlqh\n290097 fzwrr.ndp\ndir hvwdzbsw\ndir nlm\n57046 pct.bbd\n208565 qld.mms\n261556 wcfvpmz\n$ cd bbsmm\n$ ls\ndir bbsmm\n238522 hmjvg.pfn\n228873 nvvsml.bcg\ndir rwhffw\ndir sgbnzbqt\n$ cd bbsmm\n$ ls\ndir lnz\ndir msmpndgh\ndir ncpbn\ndir wfr\n$ cd lnz\n$ ls\n99970 fjbmpmrz.ldw\n$ cd ..\n$ cd msmpndgh\n$ ls\ndir sfsqwrhg\n$ cd sfsqwrhg\n$ ls\ndir vfqg\n$ cd vfqg\n$ ls\n17855 bbsmm\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ncpbn\n$ ls\ndir nltglc\n$ cd nltglc\n$ ls\n247577 qld.vjz\n$ cd ..\n$ cd ..\n$ cd wfr\n$ ls\n135424 bbps\n243274 hsvjddff.nfw\ndir prg\n158111 qld.zff\ndir rwhffw\n$ cd prg\n$ ls\n214834 lfpqlt.bdt\ndir nclpwh\n104870 phthcq\ndir trrtpgd\n$ cd nclpwh\n$ ls\n104441 mjjftn.sqt\n$ cd ..\n$ cd trrtpgd\n$ ls\n137542 qld\n$ cd ..\n$ cd ..\n$ cd rwhffw\n$ ls\ndir glsrf\n$ cd glsrf\n$ ls\n189772 phthcq\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd rwhffw\n$ ls\ndir bbsmm\n$ cd bbsmm\n$ ls\n104690 cfvhc.nwc\n$ cd ..\n$ cd ..\n$ cd sgbnzbqt\n$ ls\n191204 cfvhc.jnv\n127263 vwfbr\n$ cd ..\n$ cd ..\n$ cd cfvhc\n$ ls\n72894 bbsmm.dns\n$ cd ..\n$ cd fptlqh\n$ ls\ndir bbsmm\ndir bdvp\n162052 vnnjfh.stw\ndir zshvq\n$ cd bbsmm\n$ ls\ndir bbsmm\ndir pchdq\ndir rwhffw\n$ cd bbsmm\n$ ls\n174590 bbsmm\n45636 fpj\n102831 qld\ndir vpwcmgq\n229136 zdvj.rtw\ndir znw\n$ cd vpwcmgq\n$ ls\ndir cfvhc\ndir jvd\ndir zdvj\n$ cd cfvhc\n$ ls\n55907 ccvdlc\n272581 fpj\n29765 phthcq\n$ cd ..\n$ cd jvd\n$ ls\ndir cfvhc\n$ cd cfvhc\n$ ls\n289471 cjzwdvs.gtn\n$ cd ..\n$ cd ..\n$ cd zdvj\n$ ls\n98507 cmldvpnc.qtl\n$ cd ..\n$ cd ..\n$ cd znw\n$ ls\ndir zdvj\n$ cd zdvj\n$ ls\n46012 wrgvln.lmf\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd pchdq\n$ ls\ndir cbssm\n98102 cfvhc\n259488 pct.bbd\ndir rwhffw\n7541 sngz.qsd\n167971 wvgrzn.bds\n$ cd cbssm\n$ ls\n45025 bbsmm\n22500 fpj\n$ cd ..\n$ cd rwhffw\n$ ls\ndir fncszbm\n166012 phthcq\n165925 rbs\n171350 tsbv.zws\n$ cd fncszbm\n$ ls\ndir wzrlzvm\n$ cd wzrlzvm\n$ ls\n191811 qzzs\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd rwhffw\n$ ls\n218844 dnbmcbr.wrc\n201091 mmpvsgjv.wgs\ndir mzt\n223628 pct.bbd\ndir qftlpdt\n56441 sngz.qsd\n33730 zdvj.jfs\n$ cd mzt\n$ ls\n25768 sngz.qsd\n283843 vjrmbw.jcs\n$ cd ..\n$ cd qftlpdt\n$ ls\n287536 mzhmjrg\n223797 pcp\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd bdvp\n$ ls\ndir lnvvwlm\n$ cd lnvvwlm\n$ ls\n210345 zll.scl\n$ cd ..\n$ cd ..\n$ cd zshvq\n$ ls\n251997 cfvhc.mcr\n220501 pct.bbd\n$ cd ..\n$ cd ..\n$ cd hvwdzbsw\n$ ls\ndir cfvhc\n21816 fpj\n251732 vcfcwjh.pjh\n187137 zdvj.bzd\ndir zgprrg\n$ cd cfvhc\n$ ls\n99722 zgq.bbh\n$ cd ..\n$ cd zgprrg\n$ ls\ndir brzpsnjl\n$ cd brzpsnjl\n$ ls\ndir qld\n$ cd qld\n$ ls\n30055 phqdjs.zwv\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd nlm\n$ ls\n176700 fzwrr.ndp\n256184 pct.bbd\n25442 qhngw.jwm\ndir rwhffw\n160900 wqr.wdn\n$ cd rwhffw\n$ ls\n240085 pcjjgjcr\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ngm\n$ ls\n118461 bbsmm\ndir czjzwl\ndir gjwws\n43114 nwvltczv.jpf\ndir qjpgzsj\n145909 rjdzrjzc.fdr\ndir tvmpgrq\n75554 zdmfhpwz.rhc\ndir zdvj\n196704 zdvj.nfm\n$ cd czjzwl\n$ ls\ndir btnsjtl\ndir cfvhc\n100911 cfvhc.mqg\ndir gljbgjq\n247017 jmrq\ndir qld\n$ cd btnsjtl\n$ ls\n76658 pmgnqr\n$ cd ..\n$ cd cfvhc\n$ ls\n189214 jvrcttm\n265333 mmgd.sbn\n$ cd ..\n$ cd gljbgjq\n$ ls\ndir ccqsnp\ndir fng\n104525 fzwrr.ndp\n31517 gmqhmwj.rbs\n122232 htddmr.wjm\n51362 rtlnr.mwh\n42769 rvddl\n$ cd ccqsnp\n$ ls\n192021 cfvhc.lww\ndir mbmsfgtb\n222388 nvgppmv\ndir qbpnbsv\n$ cd mbmsfgtb\n$ ls\n104492 jfwl.jlv\n273739 phthcq\n238815 rwhffw.tjp\n$ cd ..\n$ cd qbpnbsv\n$ ls\n176577 tlqnmmsc.gpt\n$ cd ..\n$ cd ..\n$ cd fng\n$ ls\n243298 cfvhc.pvb\n54364 fbrtb.hqd\ndir hvhwh\ndir rtcsp\n$ cd hvhwh\n$ ls\n87079 zdvj.gfq\n$ cd ..\n$ cd rtcsp\n$ ls\ndir zdvj\n$ cd zdvj\n$ ls\n288617 rwhffw.lzl\n161000 sngz.qsd\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd qld\n$ ls\n113942 bbsmm.msn\n239442 cchgv.mtd\n181920 nnlfh.gwz\n274766 rqtvc.frp\n$ cd ..\n$ cd ..\n$ cd gjwws\n$ ls\ndir bpzsc\ndir cfvhc\ndir fsnf\ndir zdvj\n$ cd bpzsc\n$ ls\n88033 cndwmvj.pzm\n275297 hslg.smz\ndir qld\n25067 qvntlcd.nzs\n$ cd qld\n$ ls\n240593 bbsmm.bgn\ndir dpqgcc\n277540 fpj\ndir qld\n$ cd dpqgcc\n$ ls\ndir rhqvcfd\n$ cd rhqvcfd\n$ ls\n199386 fzwrr.ndp\n$ cd ..\n$ cd ..\n$ cd qld\n$ ls\n269177 cjrc.dvq\n21631 fpj\n263874 pct.bbd\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd cfvhc\n$ ls\ndir nzd\n$ cd nzd\n$ ls\n273225 qld.jmn\n$ cd ..\n$ cd ..\n$ cd fsnf\n$ ls\n17887 fzwrr.ndp\n$ cd ..\n$ cd zdvj\n$ ls\n160076 rwhffw.trf\n$ cd ..\n$ cd ..\n$ cd qjpgzsj\n$ ls\n227586 njqbnz.hwl\n239840 zdvj.qcp\n$ cd ..\n$ cd tvmpgrq\n$ ls\ndir hdrsmnvc\ndir psrjr\n$ cd hdrsmnvc\n$ ls\ndir rjm\ndir zdvj\n$ cd rjm\n$ ls\n244666 bzvmdcm\n$ cd ..\n$ cd zdvj\n$ ls\n132943 gnz.ntd\n$ cd ..\n$ cd ..\n$ cd psrjr\n$ ls\ndir nfvllp\ndir plfgfs\n94173 qmdhr\n3133 swjh.rbg\ndir zmp\n$ cd nfvllp\n$ ls\n39707 zbsm.vsd\n$ cd ..\n$ cd plfgfs\n$ ls\n186603 cfvhc.sgb\n183833 ljn\n$ cd ..\n$ cd zmp\n$ ls\n123313 fzwrr.ndp\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd zdvj\n$ ls\ndir hzzs\n230054 nhcvn.dfl\ndir rgwfsqdc\ndir zwtjr\n$ cd hzzs\n$ ls\n58585 cbfhrf.vqn\ndir cfvhc\ndir fbzpmc\ndir fdtjp\n28182 fzwrr.ndp\n35581 nzwndl.zzs\ndir pmrv\n253508 qgdnnl.tqq\n$ cd cfvhc\n$ ls\n256186 nlgzqw.frl\n$ cd ..\n$ cd fbzpmc\n$ ls\ndir cfvhc\n$ cd cfvhc\n$ ls\n193322 rwhffw.vwc\n$ cd ..\n$ cd ..\n$ cd fdtjp\n$ ls\ndir bbsmm\n140927 fzwrr.ndp\ndir lcmpbs\n94413 mpnfgpsm\ndir qvrd\n247202 tlp\n$ cd bbsmm\n$ ls\n206896 clsqp.hbr\n$ cd ..\n$ cd lcmpbs\n$ ls\ndir bbsmm\ndir cfvhc\ndir rplqgm\ndir tmh\ndir zdvj\n$ cd bbsmm\n$ ls\n235479 sngz.qsd\n$ cd ..\n$ cd cfvhc\n$ ls\n285029 fpj\n29405 mhpr.czj\n$ cd ..\n$ cd rplqgm\n$ ls\ndir bbsmm\ndir cfvhc\ndir mwhf\n$ cd bbsmm\n$ ls\n257187 hsldvt.jdt\n186098 pct.bbd\n$ cd ..\n$ cd cfvhc\n$ ls\ndir rfw\n$ cd rfw\n$ ls\n254454 fzf.ltl\n$ cd ..\n$ cd ..\n$ cd mwhf\n$ ls\n3915 dtcjptnd\n116218 fzwrr.ndp\n$ cd ..\n$ cd ..\n$ cd tmh\n$ ls\n49016 ljsvgl.npd\n258257 mlfq.rrr\n$ cd ..\n$ cd zdvj\n$ ls\ndir jjj\n154441 lcpvwhp.mpq\n$ cd jjj\n$ ls\n31731 bbsmm.mhb\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd qvrd\n$ ls\n199473 pgqbpq\n$ cd ..\n$ cd ..\n$ cd pmrv\n$ ls\n120831 cfvhc.btv\n$ cd ..\n$ cd ..\n$ cd rgwfsqdc\n$ ls\n281099 cfvhc.trc\n119483 mntqrvw.qwz\n275572 zhphps\n$ cd ..\n$ cd zwtjr\n$ ls\n187404 gwjsj\n230074 qmr\n212641 wdhl.dfl\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ngsrlzc\n$ ls\n164729 lnc.mdg\n33748 pct.bbd\n119803 rfst.blw\ndir zdvj\n$ cd zdvj\n$ ls\ndir bbsmm\n251550 sngz.qsd\n120940 zlmcvg\n$ cd bbsmm\n$ ls\n206509 bsddjdv\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd shjv\n$ ls\n17754 lqqz.qmf\n265175 rdmsqztj.lnt\n$ cd ..\n$ cd wsvfbb\n$ ls\ndir bhbb\n271856 fzwrr.ndp\n114188 hgfjq.jvn\ndir jgnl\ndir qnddp\n51700 rwdnzwhv.vtr\n$ cd bhbb\n$ ls\n107036 rwhffw.pld\n$ cd ..\n$ cd jgnl\n$ ls\ndir qld\n$ cd qld\n$ ls\n39294 rbsvwh\n$ cd ..\n$ cd ..\n$ cd qnddp\n$ ls\ndir vzmrb\n58723 wcbz.dwh\n$ cd vzmrb\n$ ls\n203361 rvrbgd.cpw\n167876 zgpdcb.rql\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd rbmstsf\n$ ls\ndir bbsmm\ndir cfvhc\n63250 hcdlfmt.ccg\ndir mgzl\ndir ngflwbmp\ndir shvjprl\n123258 spqchmj.wpv\n$ cd bbsmm\n$ ls\ndir cfvhc\ndir gtvszgs\n6558 nzdhg\n121160 qld\ndir rfjfp\ndir rwhffw\ndir sbfshph\n$ cd cfvhc\n$ ls\ndir btmbjrw\ndir pzq\n133178 sngz.qsd\n$ cd btmbjrw\n$ ls\ndir ftpvz\ndir tjflfshs\ndir wvncjmf\n$ cd ftpvz\n$ ls\ndir lqlrh\n$ cd lqlrh\n$ ls\n114380 pcn.cbn\n$ cd ..\n$ cd ..\n$ cd tjflfshs\n$ ls\n274555 bbsmm.wpr\n$ cd ..\n$ cd wvncjmf\n$ ls\ndir nnrqcfmm\n$ cd nnrqcfmm\n$ ls\n217188 pct.bbd\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd pzq\n$ ls\n89797 sngz.qsd\n255100 thg\n$ cd ..\n$ cd ..\n$ cd gtvszgs\n$ ls\n87661 sngz.qsd\n$ cd ..\n$ cd rfjfp\n$ ls\n130164 cfvhc.rbt\ndir lhf\ndir qld\n20799 qld.gts\ndir qwzj\n150977 sngz.qsd\n$ cd lhf\n$ ls\n125848 lvgv.jtg\n81087 mdcw.rbv\n80091 qld\ndir rmsggp\n49093 thf.jnh\ndir tmf\ndir zdvj\n$ cd rmsggp\n$ ls\ndir fznsmbq\ndir lhghnn\ndir zdvj\n$ cd fznsmbq\n$ ls\ndir wqzwsspq\ndir zdvj\n$ cd wqzwsspq\n$ ls\ndir gbzfpfq\n$ cd gbzfpfq\n$ ls\n185410 pct.bbd\n$ cd ..\n$ cd ..\n$ cd zdvj\n$ ls\n140384 pct.bbd\n$ cd ..\n$ cd ..\n$ cd lhghnn\n$ ls\n36868 fpj\n181925 pct.bbd\n$ cd ..\n$ cd zdvj\n$ ls\n256916 bbsmm.mtr\ndir rwhffw\n75846 rwztfcj.qns\n$ cd rwhffw\n$ ls\n234834 bbsmm.gtp\n140315 pbwqrps\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd tmf\n$ ls\n88583 dhndg\n52796 qld.mlp\n$ cd ..\n$ cd zdvj\n$ ls\n8822 pct.bbd\n221658 sngz.qsd\n$ cd ..\n$ cd ..\n$ cd qld\n$ ls\n119026 dfc.bgr\n87684 fzwrr.ndp\ndir zdvj\n212120 zdvj.jhw\n$ cd zdvj\n$ ls\ndir cfvhc\n169434 mhlpvf.vjz\n$ cd cfvhc\n$ ls\n243919 brtvv\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd qwzj\n$ ls\n101395 qcjvs.mjs\n$ cd ..\n$ cd ..\n$ cd rwhffw\n$ ls\n94012 fzwrr.ndp\n205816 hqrgfm.wwt\ndir lzbmzw\n155203 qjv\n$ cd lzbmzw\n$ ls\ndir dfrdczdj\n$ cd dfrdczdj\n$ ls\n126459 tphtshwc\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd sbfshph\n$ ls\n229389 ccbgcv\n135997 cfvhc.ctl\n119490 rwhffw.pqp\n94530 vjtjz.cfs\n$ cd ..\n$ cd ..\n$ cd cfvhc\n$ ls\ndir cmr\ndir jvh\ndir mjs\n$ cd cmr\n$ ls\n227026 fpj\n$ cd ..\n$ cd jvh\n$ ls\ndir qld\n$ cd qld\n$ ls\n96968 phthcq\n$ cd ..\n$ cd ..\n$ cd mjs\n$ ls\n98117 qld.ftd\n$ cd ..\n$ cd ..\n$ cd mgzl\n$ ls\n198793 nfvnfqn.zwd\n$ cd ..\n$ cd ngflwbmp\n$ ls\ndir bbsmm\ndir jthnmqs\n137176 nrn\n80344 ntbq.ssw\n133166 phthcq\n210691 sngz.qsd\n255501 vgwn.gqr\ndir zdvj\n$ cd bbsmm\n$ ls\n98501 npwwzjgt\n134593 sngz.qsd\n46020 tjszcpm.brs\n213591 zdvj.sgj\n$ cd ..\n$ cd jthnmqs\n$ ls\ndir bbsmm\ndir cfdbp\ndir dpwqmbw\n67233 lzz.tmg\n21344 pzvjlt.qdb\ndir rwhffw\ndir sdtntw\n268059 vwhqh\ndir zdvj\n$ cd bbsmm\n$ ls\n263767 fpj\n46528 tpq.wtb\n$ cd ..\n$ cd cfdbp\n$ ls\ndir grczc\n$ cd grczc\n$ ls\n241829 vnnjnz.nww\n$ cd ..\n$ cd ..\n$ cd dpwqmbw\n$ ls\n287899 pct.bbd\n$ cd ..\n$ cd rwhffw\n$ ls\n41741 ffsqr.cwc\ndir ffzc\ndir nrs\n279620 qchg\n$ cd ffzc\n$ ls\n10583 pct.bbd\n$ cd ..\n$ cd nrs\n$ ls\n195239 zdvj.npp\n$ cd ..\n$ cd ..\n$ cd sdtntw\n$ ls\n245601 fpj\n9552 lgftw.ntj\n$ cd ..\n$ cd zdvj\n$ ls\ndir smjvcql\n$ cd smjvcql\n$ ls\ndir qcqljj\n$ cd qcqljj\n$ ls\n286791 fhm\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd zdvj\n$ ls\ndir bcghd\n57663 fzwrr.ndp\n177473 gzpfmsz.tnw\n53543 pswpr\n251188 sngz.qsd\ndir snqjl\n$ cd bcghd\n$ ls\n106732 sjvhjd\ndir vtgsnb\n$ cd vtgsnb\n$ ls\ndir gtj\n$ cd gtj\n$ ls\n151689 nncsjvn.vhd\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd snqjl\n$ ls\n104993 bjjqd.pqv\n233367 fzwrr.ndp\n11942 sngz.qsd\n$ cd ..\n$ cd ..\n$ cd ..\n$ cd shvjprl\n$ ls\n130539 jpzsdjw.hlz\n$ cd ..\n$ cd ..\n$ cd twjcmp\n$ ls\n86053 pct.bbd\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { sortNum, sum, Tree } from '../util'\n\ninterface File {\n  name: string\n  size: number\n}\n\ninterface Directory {\n  name: string\n  files: File[]\n}\n\nconst buildFileSystem = () => {\n  const fs = new Tree(Symbol(), { name: '/', files: [] } as Directory)\n  let cwd = fs.root\n\n  for (const cmd of input.split('\\n')) {\n    const match = cmd.match(/\\$ cd (?<folder>.+)/u)\n    if (match) {\n      const { folder } = match.groups!\n      if (folder === '/') cwd = fs.root\n      else if (folder === '..') cwd.parent && (cwd = cwd.parent)\n      else {\n        let dir = cwd.children.find((d) => d.value.name === folder)\n        if (!dir) {\n          const key = Symbol()\n          fs.insert(cwd.key, key, { name: folder, files: [] })\n          dir = fs.find(key)\n        }\n        if (dir) cwd = dir\n      }\n    } else if (cmd.match(/^\\d+/u)) {\n      const [size, name] = cmd.split(' ')\n      if (!cwd.value.files.find((f) => f.name === name))\n        cwd.value.files.push({ name, size: Number(size) })\n    }\n  }\n\n  return fs\n}\n\nconst listDirSizes = (fs: Tree<symbol, Directory>) => {\n  const dirs = new Map<symbol, number>()\n  const getSize = (node = fs.root) => {\n    const size: number =\n      node.value.files.map((f) => f.size).reduce(sum, 0) +\n      node.children.map(getSize).reduce(sum, 0)\n    dirs.set(node.key, size)\n    return size\n  }\n  getSize()\n  return dirs\n}\n\nexport const Part1 = () => {\n  const fs = buildFileSystem()\n  const sizes = [...listDirSizes(fs).values()]\n  const totals = sizes.filter((n) => n <= 100000).reduce(sum)\n\n  return (\n    <p>\n      The total size of all directories less than 100000 is{' '}\n      <Answer>{totals}</Answer>.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const totalSpace = 70000000\n  const updateSpace = 30000000\n  const fs = buildFileSystem()\n  const sizes = [...listDirSizes(fs).values()]\n\n  const totalSize = [...fs.postOrderTraversal()]\n    .map((d) => d.value.files.map((f) => f.size).reduce(sum, 0))\n    .reduce(sum, 0)\n\n  const freeSpace = totalSpace - totalSize\n  const neededSpace = updateSpace - freeSpace\n  const dir = sizes.sort(sortNum).find((n) => n >= neededSpace)\n\n  return (\n    <p>\n      The smallest directory that can be removed to have {updateSpace} unused\n      space is <Answer>{dir}</Answer>.\n    </p>\n  )\n}\n","export default `\n211212222022130201331244204031330314133103224443222153333314030424430144322333133111111001110111100\n011010002312022022213333124244332200012535311241312425233452234232332434002404314010213010300011020\n000122211022332331322030422114134234533543153332141433442315454242340242334121020031011333101002002\n212001231120020114443023323004341314244553111423553551151313122524454330124123430302021112131311210\n010023233323302131223113103422131413124511225231551512331151422122222242244011341133031332000123002\n010122332320232121222313343422344153542155353422554151444431132214155255442032200104444102212213121\n220311123023010212113012214434253241131125125144553514355135411412253214211034342023023233100210312\n012021233322101322014410134244343233151425141125355346552431312541441525552551132210132341231131213\n212022110210121130141215541523415532154426463253225335424345244125452453353521224302113344031023330\n001331301002442002234333243154523422345544442555654454522262236353114253113323520332302343300332303\n022221002233442142312112451142555566553525565662234553562446526522354241453541211024234444203213103\n121222311004442143452433443451433246356323333462224663645332426432564453315351524511430324331330313\n020033121433043013523451315525355225662246464433535443555244533263653654532332123344232243011131122\n331231332041133215352242534163532264356442645556436224536332662235525664241551351544514242443122020\n211224100401201134234315434244552434552354262423454635464345236222546422664131225224254043442021032\n231012303303415245123421452352524655622263645375354655347574553332462346426612522542555340213441312\n211043401112034321445551526323233226554374763356556636777355756535336234634241534141122200101402030\n112341023410451542221225654622622255353544565345645766565677556375252446634536424143355510132222200\n321013312335143545355422445454636567463677663737736766333543334747425233256224451325314525244413200\n134134112125343512236525526335246366357455663434636554535666675345375546365323352441311155004121134\n134103302234334422434623253335635454465444433673744644777565643336547576243523623215313211444123100\n121214332422533433642563564345446775634333677454565663433553464453353655453565463223325554140013211\n140340201515224355236356553354564345656637544677644666867363673577375377725566454643343552314401102\n242234123324245145352363463474556736655588548485584448876875743457645676744566665635145243345232034\n240002433255552223455653336765744666634687546687484788677745778643457356557523233245233345322203230\n203033145215334435435262347664466473474457867646854578857546674775433665576464664524234245315323221\n220240145522153253653343354334676665555545854865676474576864645785537443574743555546543552211424323\n203303223355443662564323675465776857766847558445856455464888855484856565473734263625333553514131204\n141343234343462623453376444565367475584744446846868687745447856768847544336577422435266221431351302\n011105311221546266246563346475574856785486544597695996967678786457746835375453766563243343232132222\n342153442535526543536765573565848468586567799675857888667865686547568643564577744364252242513532434\n303412514235522642433473653567558668878798557765777686957585688674776587434464373226246544543135343\n134313521546426353375756547586484656765785675686695796677998878746476587743677774454422656531211434\n330442321112644425464657363687688585599859586878658555897556995948874866676663357754662526513313351\n031152255535654264775364478686688678756896855798669886769655865898565686588637345474344563445412320\n033412231333255266746776747686577558998969786586588679955768678756678668685355457353433435511243215\n233232325556234436547474646776556656557756668998669967658757689688987578684577474336565246255532551\n232114313222322224464545378545768899675966969678976998999568556595885874447557776576555222565311333\n153554334255253356567537674646656569995678676788797887778695969889798866846683333743344642351554423\n345414252243643374353655675557769798967656689687786868687886675866575467874583577644342363531311344\n452213536622456254743557585655789799758988877898878787688797798767876666484675654443325664563135251\n151114452544554546436654876678799866898876787668968979699879995587987774468485375644536533255541211\n211514523322654673674356655476766668559777787767896697698867686989688685867584637757652452536532521\n325431245645266644556638674587856588976776679887879899868878797869579957766466547664576666553424155\n351353232222444754473488547447588977799698788797978898877869989965559967448746574666366225422555234\n413323553464546456467374574775588578597999986799989888988976899856686587855784743346666424425221545\n231444363436566774435677574767669997976869899777989877888676989766766555785667844345663255424355441\n131332342664544366547384447849957999767988788889999977889998688686776576587687545564772363266441344\n344323153255254475756447668487668876766786779788778999997667996768669658886648456344746335633653214\n432125224655454763335585885578768897889868679897777999877987996687598957855747536767467246264213342\n251123242522227743643744785665768788969768778798979798899976766779955656454747664477375562423352144\n335215134645536564436664555587969577787979887889798779897877686768869888764467653676646454662351122\n455541145534236474533477845547655956799686678788787897899877888979567875855484663636455423534225343\n443412355542265645777686678647889565778786879979978999977689898868965569867655855463733536555332123\n554333534644243647547485474889997578686899879987778777979796897956885659856478875353562443646414133\n523521346442456477365347646745578595568686668879987988977879897858556977787654645645753546466532354\n415551454256456643353367445455568986897777877789988897768879899869965985464454846544732365343211244\n045253325223423633465535668844665696698867976878987997697669698795567764745785435374775534356323555\n324424513464646646773334458686678768868668789699687898687769799596757997646887333456353525562532334\n333314122436424634656654458578885567975698998866676766687677986678988577887848647435423555654245141\n441323436226324474354554865578679696675896767799799699977678687576559874657778736635335633336333245\n325541255634234335777446557648487588986657787766698699877877978598595778688447674476666264664525524\n334224432254623447467743486544648996678656987989788868878788589778785746455873547654626326245514114\n413352531625243455733366467566645868987999997776889888868757777796558764784776476377665635553522333\n425235531356553325567457674875556778688685899689977798685876768589645658567837344646524442654525432\n103455532456342526657354677664785588679779979577568567955568596777454678585774353354436633221153331\n422433153464256665575466474547467484759655656769697755696555696797648476876754465655362463541153510\n200221512352422423435457444587878556556776655658757679865666957677874646877574343466422645122433143\n233312332322644356544567546775446655776887566656897679779679567464757846575634746754632245245312322\n440413534453435243635457637637844865678595957869877877556795746685484886655763473646525455242423424\n133015323213554533656353736775587775585487676857757689778864864846456683634546376645266241223134331\n341325554355154464532756673544377888566757758978576696758777847844684656374464563435536313553154410\n123231515424162465563463554775765668488574776875475754584748666766764547366777353655635341211544214\n411120434335113656445353437475335766655568765658746576454466786655883677746675446244525421121551010\n402433144311354446525322467654675484475575676777445476666764865885847756657433654652532114452353133\n432424042535244564355554365363676576876745584585766548666774675753564565547462524462425114452201003\n102313425251124435654356367537734654638566846546448757455657555476436573637522622235212353325544024\n220311435524234432323565463344475534664484764648754486454485567435377667774553343222531144155033034\n231020004114553111534454422257546737666353776748664584464344633646464475423245232221444424255211432\n032121221243151355266464525344734574375363364375343377346676563457354333464322642455152553422410413\n224424204312344155546224253423664743337765335743365463543544433363437353323264646443514252343204010\n001321143122112341544253536644545554446436763477746674374776466344577623333354536412412241240000301\n012121423241523355214265352225525345574443757474534637556673367573322622226565351432424315423431120\n002001243100554231422332533535466634675453664437575544663735566344653636536633315425145230310333331\n111131341421342553234223552634336262456343575734674633673656737332422423254544335452112104141212220\n312222012123233525325553364332226636325523744473366567533732646636556526353413122533352224001243232\n222104333230343332423213113445433536266452535452556675623325555336233552464241241531142132324111100\n120033123241410113453233151144554262266263655622523332323624264526223446642241422415122401000243333\n300110321321220332412453221523552552665236344464424652635635223664335443125224432335044114323031213\n022320323221440340524544434152545623533526235366642566655434622263663532553353311521231430123330113\n002023331000112411134112432323353142332443352524442462645622663225223434341133154204330110021211033\n001030002322324022304135433132453151564563345632626222566526534531324522534413523110111000231032001\n021300020130201201401332235525125513213453326526662453442553331541555225115331120431314320302111303\n021321020201323321211302324413125143432142143524266333524534451124153311112131123343411412020232121\n202310321020334220421002031152143124243343112321122253451541422112235155133111203114013232211133211\n210131010322112330120423222122351343151544412545222452312115521551124142440421412131234310031213311\n200022120033030133130312000240311254212234133155524431352242335344153414002444032121311102101011000\n022201303110101303411200001233415242353252421341231234412423235311314133130301320201102330230131001\n200002110210232130434243031312421313244134152512112542334551242213212344113244124232001302221200010\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { max, parse2dArray, product } from '../util'\n\nconst parseInput = () => parse2dArray(input, Number)\n\nconst deltas = [\n  { dx: 0, dy: -1 },\n  { dx: -1, dy: 0 },\n  { dx: 1, dy: 0 },\n  { dx: 0, dy: 1 }\n]\n\nconst inBounds = (grid: any[][], x: number, y: number) =>\n  x >= 0 && x < grid[0].length && y >= 0 && y < grid.length\n\nconst getVisibilityMap = (trees: number[][]) =>\n  trees.map((line, y) =>\n    line.map((tree, x) =>\n      deltas.some(({ dx, dy }) => {\n        let curX = x + dx\n        let curY = y + dy\n        while (inBounds(trees, curX, curY)) {\n          if (trees[curY][curX] >= tree) return false\n          curX += dx\n          curY += dy\n        }\n        return true\n      })\n    )\n  )\n\nconst getScenicScoreMap = (trees: number[][]) =>\n  trees.map((line, y) =>\n    line.map((tree, x) =>\n      deltas\n        .map(({ dx, dy }) => {\n          let curX = x + dx\n          let curY = y + dy\n          let score = 0\n          while (inBounds(trees, curX, curY)) {\n            score++\n            if (trees[curY][curX] >= tree) break\n            curY += dy\n            curX += dx\n          }\n          return score\n        })\n        .reduce(product)\n    )\n  )\n\nexport const Part1 = () => {\n  const trees = parseInput()\n  const visible = getVisibilityMap(trees)\n  const totalVisible = visible.flat().filter(Boolean).length\n  return (\n    <p>\n      <Answer>{totalVisible}</Answer> trees are visible from outside the grid.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const trees = parseInput()\n  const scores = getScenicScoreMap(trees)\n  const bestScore = scores.flat().reduce(max)\n  return (\n    <p>\n      The highest possible scenic score is <Answer>{bestScore}</Answer>.\n    </p>\n  )\n}\n","import { h } from 'preact'\nimport { Answer, Visualization } from '/components'\nimport input from './input'\nimport { sum } from '../util'\n\ninterface Command {\n  cmd: 'noop' | 'addx'\n  n: number\n}\n\nenum Pixel {\n  Off = ' ',\n  On = '█'\n}\n\nconst parseInput = () =>\n  input\n    .split('\\n')\n    .map((line) => line.split(' '))\n    .map(([cmd, n]) => ({ cmd, n: Number(n ?? 0) } as Command))\n\nconst run = function* (program: Command[]) {\n  let register = 1\n  let cycle = 0\n  for (const { cmd, n } of program) {\n    cycle++\n    yield { cycle, register }\n    if (cmd === 'noop') continue\n    cycle++\n    yield { cycle, register }\n    register += n\n  }\n}\n\nconst newLine = (size = 40) =>\n  Array(size)\n    .fill(null)\n    .map(() => Pixel.Off)\n\nexport const Part1 = () => {\n  const program = parseInput()\n  const strength: number[] = []\n  for (const { cycle, register } of run(program)) {\n    strength.push(cycle * register)\n  }\n  const signals = [20, 60, 100, 140, 180, 220]\n  const totalStrength = signals.map((i) => strength[i - 1]).reduce(sum)\n\n  return (\n    <p>\n      The sum of the signal strengths during the{' '}\n      {signals\n        .map((n, i) => `${i === signals.length - 1 ? 'and ' : ''}${n}th`)\n        .join(', ')}{' '}\n      cycles is <Answer>{totalStrength}</Answer>.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const program = parseInput()\n  let line = newLine()\n  const drawing: string[] = []\n  for (const { cycle, register } of run(program)) {\n    const pos = (cycle - 1) % line.length\n    if (Math.abs(register - pos) <= 1) {\n      line[pos] = Pixel.On\n    }\n    if (pos === line.length - 1) {\n      drawing.push(line.join(''))\n      line = newLine()\n    }\n  }\n  return <Visualization forced>{drawing.join('\\n')}</Visualization>\n}\n","export default `\nnoop\nnoop\naddx 6\naddx -1\nnoop\naddx 5\naddx 3\nnoop\naddx 3\naddx -1\naddx -13\naddx 17\naddx 3\naddx 3\nnoop\nnoop\nnoop\naddx 5\naddx 1\nnoop\naddx 4\naddx 1\nnoop\naddx -38\naddx 5\nnoop\naddx 2\naddx 3\nnoop\naddx 2\naddx 2\naddx 3\naddx -2\naddx 5\naddx 2\naddx -18\naddx 6\naddx 15\naddx 5\naddx 2\naddx -22\nnoop\nnoop\naddx 30\nnoop\nnoop\naddx -39\naddx 1\naddx 19\naddx -16\naddx 35\naddx -28\naddx -1\naddx 12\naddx -8\nnoop\naddx 3\naddx 4\nnoop\naddx -3\naddx 6\naddx 5\naddx 2\nnoop\nnoop\nnoop\nnoop\nnoop\naddx 7\naddx -39\nnoop\nnoop\naddx 5\naddx 2\naddx 2\naddx -1\naddx 2\naddx 2\naddx 5\naddx 1\nnoop\naddx 4\naddx -13\naddx 18\nnoop\nnoop\nnoop\naddx 12\naddx -9\naddx 8\nnoop\nnoop\naddx -2\naddx -36\nnoop\nnoop\naddx 5\naddx 2\naddx 3\naddx -2\naddx 2\naddx 2\nnoop\naddx 3\naddx 5\naddx 2\naddx 19\naddx -14\nnoop\naddx 2\naddx 3\nnoop\naddx -29\naddx 34\nnoop\naddx -35\nnoop\naddx -2\naddx 2\nnoop\naddx 6\nnoop\nnoop\nnoop\nnoop\naddx 2\nnoop\naddx 3\naddx 2\naddx 5\naddx 2\naddx 1\nnoop\naddx 4\naddx -17\naddx 18\naddx 4\nnoop\naddx 1\naddx 4\nnoop\naddx 1\nnoop\nnoop\n`.trim()\n","export default `\nMonkey 0:\n  Starting items: 83, 62, 93\n  Operation: new = old * 17\n  Test: divisible by 2\n    If true: throw to monkey 1\n    If false: throw to monkey 6\n\nMonkey 1:\n  Starting items: 90, 55\n  Operation: new = old + 1\n  Test: divisible by 17\n    If true: throw to monkey 6\n    If false: throw to monkey 3\n\nMonkey 2:\n  Starting items: 91, 78, 80, 97, 79, 88\n  Operation: new = old + 3\n  Test: divisible by 19\n    If true: throw to monkey 7\n    If false: throw to monkey 5\n\nMonkey 3:\n  Starting items: 64, 80, 83, 89, 59\n  Operation: new = old + 5\n  Test: divisible by 3\n    If true: throw to monkey 7\n    If false: throw to monkey 2\n\nMonkey 4:\n  Starting items: 98, 92, 99, 51\n  Operation: new = old * old\n  Test: divisible by 5\n    If true: throw to monkey 0\n    If false: throw to monkey 1\n\nMonkey 5:\n  Starting items: 68, 57, 95, 85, 98, 75, 98, 75\n  Operation: new = old + 2\n  Test: divisible by 13\n    If true: throw to monkey 4\n    If false: throw to monkey 0\n\nMonkey 6:\n  Starting items: 74\n  Operation: new = old + 4\n  Test: divisible by 7\n    If true: throw to monkey 3\n    If false: throw to monkey 2\n\nMonkey 7:\n  Starting items: 68, 64, 60, 68, 87, 80, 82\n  Operation: new = old * 19\n  Test: divisible by 11\n    If true: throw to monkey 4\n    If false: throw to monkey 5\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { lcm, nTimes, product, sortNumDesc } from '../util'\n\ntype Operator = '*' | '+'\n\ninterface Monkey {\n  items: number[]\n  operator: Operator\n  n: 'old' | number\n  divisible: number\n  ifTrue: number\n  ifFalse: number\n}\n\nconst parseInput = (): Monkey[] =>\n  input.split('\\n\\n').map((block) => {\n    const { items } = block.match(/Starting items: (?<items>.+)/u)!.groups!\n    const { operator, n } = block.match(\n      /Operation: new = old (?<operator>.) (?<n>.+)/u\n    )!.groups!\n    const { divisible } = block.match(/Test: divisible by (?<divisible>\\d+)/u)!\n      .groups!\n    const { ifTrue } = block.match(/If true: throw to monkey (?<ifTrue>\\d+)/u)!\n      .groups!\n    const { ifFalse } = block.match(\n      /If false: throw to monkey (?<ifFalse>\\d+)/u\n    )!.groups!\n    return {\n      items: items.split(',').map(Number),\n      operator: operator as Operator,\n      n: n === 'old' ? n : Number(n),\n      divisible: Number(divisible),\n      ifTrue: Number(ifTrue),\n      ifFalse: Number(ifFalse)\n    }\n  })\n\nconst keepAway = (\n  monkeys: Monkey[],\n  times: number,\n  calmingMethod: (n: number) => number\n) => {\n  const business = Array(monkeys.length)\n    .fill(null)\n    .map(() => 0)\n  nTimes(times, () => {\n    for (let i = 0; i < monkeys.length; i++) {\n      const monkey = monkeys[i]\n      const { operator, n, divisible, ifTrue, ifFalse } = monkey\n      while (monkey.items.length) {\n        let item = monkey.items.shift()!\n        const num = n === 'old' ? item : n\n        if (operator === '*') item *= num\n        else item += num\n        item = calmingMethod(item)\n        const throwTo = item % divisible === 0 ? ifTrue : ifFalse\n        monkeys[throwTo].items.push(item)\n        business[i]++\n      }\n    }\n  })\n  return business.sort(sortNumDesc).slice(0, 2).reduce(product)\n}\n\nexport const Part1 = () => {\n  const monkeys = parseInput()\n  const business = keepAway(monkeys, 20, (n) => Math.floor(n / 3))\n  return (\n    <p>\n      The level of monkey business after 20 rounds is{' '}\n      <Answer>{business}</Answer>.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const monkeys = parseInput()\n  const mod = monkeys.map((m) => m.divisible).reduce(lcm)\n  const business = keepAway(monkeys, 10000, (n) => (n %= mod))\n  return (\n    <p>\n      The level of monkey business after 10000 rounds is{' '}\n      <Answer>{business}</Answer>.\n    </p>\n  )\n}\n","export default `\n[[[[4,7,7],0,4,[6,3,3,7,10],2],2,[[3]]],[]]\n[[[[1,4,8],[3,3,1,4]]]]\n\n[[7,6],[],[[5],0,10,[7,9,[7],0]]]\n[[[[6,9,0]],0]]\n\n[[7,7,[[5,1,4,9,4],8,[8],[1,1,6,2]],[[],3,6,[],[]]],[],[10,2,7],[0,[1,2,4,1,0],[1,[],0],5,[]],[4,[[],[],[]],[]]]\n[[3,6],[[9,6,[]],8,[8,8,3,[8,2,3,10],[6,5]],[6,4,[8,5],8]]]\n\n[[[[4,8,1,3,4],[2,4,10,5,4],[7,7],7],[[9,8,4,7,0]],8,[3,1]],[[],[[9,3],5],[],7,[[],8,8,[6,0,3,10,2],[0,8,7,0]]],[9,[4],7,3]]\n[[5],[[[],[],[7,10]],3,6],[[[],4,[8,6,3,1],0,[5,1,0,4]],[],[[9,5]],4]]\n\n[[6,10,9,[],[[2]]],[9,[10,[3,5,0],[6,5]]],[],[[8,[2,2,3]],6]]\n[[],[[],9,[9,2,[6,8,10,3],2],9,3]]\n\n[[[[3],[]],5],[[],[7,[3,3,3],2,[1],[6,7,9]],[],8,1],[9,[0,0,[5,3,5,1],[2],2],3],[2,[0,4]]]\n[[[]],[[[],10,[8,0,5,5],[5,4,8,10,1],[6,8,0,3,5]],2,[9,[5],[9,2],[]],[8,[]]]]\n\n[[3],[[8],6,5],[]]\n[[],[0],[],[3,0],[]]\n\n[[0,[[9],[],[6,10,9,9,6],[1,1,10,6],[1,2,6]]],[]]\n[[[3,[5,3,7,10,5],[9,2,1]],[[3,7,0,6]],[[]],[4,[1]],[8,8,[2,4,8,3]]],[[5,6],[]],[[],5],[]]\n\n[[3,4,[[1,6,10],[10],[1],[]],8,[[4,10,3]]],[9,8,0,0]]\n[[0,[9],[],9,0],[6],[[0,7],0,[[10],[8,5],[3,3,6,2,7]]],[[[2,7],1,10,6],[]]]\n\n[[[],5,10,[7,0,[3,0,1,0]],6],[[[7,10,3,9],2,[5,6],3,[4,0]]],[[],[6,[3],[5,0,8,2],[0,9,10,5,5]]]]\n[[9,1,0,4],[]]\n\n[[0,0,2,6,[[3],[3,4,7],[10,8,7,9],[4],4]],[[3,[]],8,[[10],8,3,[4,4,8],[0,2,9,7]]],[]]\n[[[4,1],4,8]]\n\n[[[[1,9,4,3,8]],[[2,8,0,9,0],0,4,5,[2,9,5,1,8]],8,3],[[[4],1,8,[5,8],[4,0]]],[[0,7,[8,1,4,0,5],7],[[8],[],[0,8,5,7,5],6],0,[[4]]],[[],9,4,[6,[],[1,2,3,10],1],[[6,0],[8],5,6]]]\n[[[5,[]],[],0],[[5,4]]]\n\n[[[6],[],1],[0,[7,1]]]\n[[[6],5,4,10],[8],[[[6,0,1,4,4],7,[],6]],[10,4],[[[3],[0,0,1],3]]]\n\n[[[6,[9,10]],[[],3,[8,3],3,[3]]]]\n[[[7,0,9,[8]],[[3,2,9,6,1],6,[4]]],[[[5,2,2],1,0,9],8,4,10]]\n\n[[2],[]]\n[[5],[[[4,3,5],[5,9,10,6,7],[5],4,[9,7,6,2]],2,[]]]\n\n[[2,0,[[]]]]\n[[[[8,2,8,8,6]]],[7,[[4,0,8,9,9],10,3,[],[5,7,6]],9,3,9],[7,[1,9],[6,[],3],10,1],[[]]]\n\n[[[2,10,7,[8]]]]\n[[3,[[2,5,2]],[8],[],[[]]],[]]\n\n[[[5,7,4,0,[3,9,0,7,4]],[]],[7,4],[2],[[[5]]],[[[3,7]],[9],[5,[4,0],4,3,8]]]\n[[9,[8,[],[2,3],[9,2,10]],[]],[1,1,[9,7,[0],[8,10,7,10,4]],8,[]],[7],[[7,[10,1,5,7,7],8,[3]]]]\n\n[[],[[[5,4,7,10,3]],0],[],[[4]],[[],[2,0],1,[[4,0,6,9,1],[5,5,0,8,9],[4],[]]]]\n[[[],6,[7,8],1,0]]\n\n[[[4,[7,1,9,4,0],[10,8,8,3],[7,10,4,3,9]],2,[3]],[[[]],[9,[10],8,0,10],4],[],[[1,4,7,[]],3],[[[4,1],[4,0]],[[10,3],[10,7],1],3,[9,[3,6,10,4,3]],0]]\n[[[0,[0,10]]],[[],[],[0,[],[1,0,5,3],1,7],[7,4],2],[[7],8],[[[7,8],[10,2,0,5,1],[8,6]]],[[6,[7],[1,5,1,5],9]]]\n\n[[[5,[7,8,0,6],0,4],[[6],1],[1,[0,0,6,9]],[10,[5,4,4],[8,9,7,8,1],[9,8,3]],[[6,7,5],10]],[[2]]]\n[[[[4,4,1,0],[1,5,7,7]],[9,[6,7,6,7],7,[0]],2,[[3,1,4,4,5],[0,4],[3,5,7]]],[[3,5],4,5,3,6],[1,9,[[9,10,2,10],5,[9,9],[3,0,0],7],0],[5,5]]\n\n[[2,3]]\n[[],[8,5],[[[7,4,4,10,8],[],[10,6,10]],8,4,1]]\n\n[[[[],8],[10,2,[],4,[5,9,4,3]],[[0,1]]],[1,10],[5,6,10,[10,[3,10],[]]],[9,[2,[0,7,1,8],5],[6],1]]\n[[3,[8],3,[4,10,[5,10],3,10]]]\n\n[[0],[0,[[1,6,10],[5,3,10],1,[7,10]],1]]\n[[],[5,0],[[4,[1,8,4],[8],[3,1]],6,[9,[3],10,8,[1,8,2,1,6]],3,[[8],0,4,6]],[[[10,1,1,9],0],[1,[],[1,6,8,9],[0,5,6,8,1],[2]],[9,[2],[9,0,4,6],[4,0,6,4]],[[9,9,5,9],1]],[2,[],[5,[2,1],7,[],10]]]\n\n[[10,1,9,6,[[8],5,1,[5,4],[5,0]]],[[[7,6,1],10,10,[2,8,5,3,1],5],7,[[2,5,6,7,1],5,[]]]]\n[[6,[[10],[7,9,2,0],8],2,3,[]]]\n\n[[],[0,5,8,3,[]],[[5,5,[],[10,10,4]]],[8],[8]]\n[[5],[7,2,5]]\n\n[[],[],[5],[]]\n[[],[[2,[0],8],[[9,0,6,6,1],2,2,[0],[]],5,9],[[],3,7]]\n\n[[5,[[8],5,[5],[5,5],[10,5,9]],[[5,1],[1,10,6,8]],8,[[2,9]]],[[[0,8,5],10,[9,6,4],2,8],5,7,0]]\n[[8,[8,[5,1,2,5],[5,10,6,5,3],0],6,10,1]]\n\n[[8,6,[[],[6,3],10,9],7]]\n[[[4,[7,6,7,2,5]],[[10,4,8,10]],6,[[4,5,2,10,7]]],[[[1,9,10,6]],[9,[],[8,0,4,1]],10,6],[],[10,[[6,0],[1,9,9,10,5],[8,9],6,7],[1,9]],[0,[[6,3],8,[3],[],1],[[1,1],[],6,1,[10]]]]\n\n[[10,9,[4,[7,6,3],5,[]],[],[3,0,2,3,[10,6,10]]],[2,[[1,10],6,[9,5],[4],8]],[[[2],[2,8]],[2,1],6,[],4]]\n[[5],[9]]\n\n[[[],[[0,4,6,4],2],0,5],[6,[[],5,2,2,[]],[0,[9,0,5]]]]\n[[1,6,2,7],[2,5,0,2,[7,2]],[[9,9,2,[6,0,6,3,9]],[],[],0,8]]\n\n[[[4],5,[],3],[[[],5,5,[9,4,7,3]],[],3],[],[[2,4,[0,0],10,[]]]]\n[[],[[[7,0,8],[6,9,0,0,2],[5,6,10,7]]],[4,8],[8,7],[[0,[0,10],[5],0,[1]],[5,0,[9,3,4,9]]]]\n\n[[[1],3],[],[]]\n[[10,[[2,2],[6],[8],5]],[8,4]]\n\n[[9,[],8,[[9,4,10],5,3,[7,6,0,6]],2],[],[[3],4,[5],[8,[0,0,9,3],10,[],[]],[[7,6,7],9,[4,2,6],[0,7]]]]\n[[],[3,2,[1,7,[3,1,10],[6,3,1,5,1],2]]]\n\n[[[3,[4,2,7,9],[8,7,2,10,8],[5,3,10],[9]],[[1,2,5],10,[5,4,7],[2,0,7,5],[1,4,3]],[2,[],3,[]]],[],[],[[5,10],6]]\n[[[[5,10]],[[10],2,[9,6],[6,9]],1],[[[0,2,7,6,0],[3,4],[5,2],2,4],[],[2,[],[7,10,4],2],[[3]]],[[],[1,8,[7,0,1]],8,8],[[[8,1],[1,5,10]],[[2,0,8,4,2],2,4,7,[4,0]],9,[7,10,1],8],[5]]\n\n[[[4],[],[8],1],[[],4,0,4,[[2,5,7],0,[1,9,6,6],[6,2,0,0]]]]\n[[1,[[3]],[2,3,6,[4,5,3,4]],8],[[],2],[5,0,[[8],[4,0,4,9]],[3],1],[10],[3,2,3,5,[10,9,[2,6,4]]]]\n\n[[1,[[5,8],[0,5,4],[1,8],9],9,[[5,4],[0,1,4,2,7],[7,1,8,5,8],[3,6,8],9]],[[[2,7,9,3],4,[6,2,1],7],4,10],[6,1,2]]\n[[5,0,[[9],[10],[2,7,5],[7,6,6,5],2]],[4],[2,10,1,[[],4],[[],0,[0,4,8,7]]],[[[],8],5,[10],[4,[],7]],[]]\n\n[[[1,[4,6,6,5]],[[8,1,2,2,4],2,[1]],7,5,2],[8,2,3,2],[[],[5,10,4,[]]]]\n[[3],[[]],[[10]],[[0,[3,9,10],9,6],10,6,6,1],[[4,8,2,2,[10]],[[]],[2,6],[0,[2],2,[8,0,1,2],3],5]]\n\n[[[[7,4,7,8,10]],[[10,7,8,5],[1,6,7,4,2],3,[5,7,2,4,2],4]],[4,10,6,1,[[8,0,5,8],1,[2,3,0,9,4],[6,10,1,9,10],[9,0,9]]],[1,9,5]]\n[[[3,5,5],10,5,[],[[1,0,2],7,[1,1,2,9,2]]],[[],[[2,3,7,9],[],2,4,4],8,10],[],[5,[[2,1],3]]]\n\n[[7,9,9,[[7,6],8],5],[0,10,[3,5,1,[0,10,1,8]]],[[[10]],[8,[2,0,10,9,1],7,[8,1,7],[0,8,3]]],[[9,[0,0,9,3],[5,0,10,7,10]],[],[10,7],[],[[10,6,10],[10,3,4,8],1,[]]],[3,[],[[],[7,10],0],[]]]\n[[[7]]]\n\n[[4,[4,[2,10,7,1,9]],5],[9,3,[[6,7,2,5],[4,7],[10,7,5],[5,9,5,9]]],[5,[],[10,[2,9],8,[]]],[[[6],8,3],8]]\n[[9,[2,10,6,7],5],[7,[7,[6,10,2],[6,4,3,4]],8]]\n\n[[3,[3,[2,8,4,3],9,10,[]],[4]],[8],[[2,[8,0,0,9],9,5,0],9]]\n[[[],8,[5,[0,0,10],8,0]],[[0,[5,4,8,5,10],10,[10,0],9]],[10,3,6,6,[]],[6],[9,7,[3,10,6,[3,2]],0,[3,[6,0,2]]]]\n\n[[7,[5,[3],2],1,2,[8,8,[1],3]]]\n[[5,6,[[2],4,3],[9,2,3,9]]]\n\n[[],[6,8,2,7,3],[[[3,5,0,5,4],[0,0,3,8],[2,8,3,4],0],[],[[5,5]]],[9,[3,[],6,9,6],[5,[10,4,9,1,3],9]],[5,[],10]]\n[[8],[1],[[],5,[[4,5],[],3],6,[[4,10,2,0],1,[4,7,8,10,10],[5,0,10]]],[2],[[5,[],[10],6,[2]],[[9,10]],[0,2,5],3,9]]\n\n[[6,3,6,2]]\n[[],[[8,[7,3,4,3]],[[7,1],[2,0,9,3],3],9],[3,[[8,3,7,3],[2,4,3,0],5,[5,4,6,5]],2,0,7],[4,[5],[[],[],3],7,4]]\n\n[[[],6,[],[[9,8,2,3,8],4,[5],[1,0],[5,4,2,9,7]],[1]],[3,[]],[[[1,4],[4,8,7],[5,1,1]],[[9,9,0,5,4]],[9,[]]]]\n[[[]],[[[3],9,4,[]],[[2,6,3,10],[5,8,9,5,8],[5,5,2,7,1],10,[2,8,0,4,10]]],[],[[[2,5,10,7],10,3],6,[[10]],[[5,3,0,7,1],6],4]]\n\n[[]]\n[]\n\n[[8],[[[1,10],2,[5],5],[]],[[[8,5,2],[8,5],[5,10,4],[9,9,10],9]],[[[]],1],[4,[],[3,[],[10],3,[8,8]],[[9,4]]]]\n[[[[8,8],[7,1,8,4],[8,2,1],[4,5,4],9],9,[],1],[[5,1],[[3],9,1],9,7],[[0,10,8,4,[0]],[[2,0,9,9,6]],0,3,10]]\n\n[[9,[[6,2,10],10,[6],[7,3]],4,8,[[1,1,9,2]]]]\n[[[],[7,9],4,[[1,9,8,10],[5,1,5,4],[9],[0,0,10]]],[3,3,9,[[7],10]],[[[],5,0,5,9],[[10],1,[],1,[7,6]],9,1],[[[2,9,4,1]],4,4,[7,7,[7,3,9,8],[2,6,7,9,2]],[5,[],2,8,3]]]\n\n[[[[3,10,6,6,6],0,[1,2,3,3,9]],2]]\n[[10,3,[]],[3,2,[]],[[10,[2]],5,8],[3,3],[[4,[],6,4,6],6,1,7,[3,4,3,[4,9,6,2]]]]\n\n[[5],[[6,8]],[7,0]]\n[[[],[0,6,[],9],[[4,1,3,1],7,0],[6,[4,6],[]],[4,3]],[],[[8,[3,9],[],[5,10,4],[4,0,4]],[[7,4,10,4,2],[5,7,5],[5,1],0,[6]]],[4,[[2,3,0,0,6]],2]]\n\n[[8,6],[[5,[9,2,5,7,9]],[[5,9],[5,6,3,10],5],[[5,10,6,3,6],[3,1,4,1],[8,7]]],[[],[0,10,[1,3,5,6]]],[]]\n[[8,[6,1,8,[],6],3,[7]]]\n\n[[1,8,3,[[2,2,0,4],3,[],8,5]],[5,[[6,3,1,9],6,9,[7,6]],5,9]]\n[[[[2,8,2],9,[9],2],2,2,[],[6,6]],[[[],[4],[6,5,1,0,7],[9,5,5,1],[2,6,2]],[4,[0,3,3,5]],[]],[6]]\n\n[[[[3,7,10],1,[6,2,1,10],[2],6],5],[]]\n[[3,3,3,[9,6,[],[10,8,9]],9],[10,[[8,9,8,6],[10,2],[2,7,2,0,1],3],[0,8,[]],10,7]]\n\n[[[9,7],[0,4,7,7,7],[[3,6,8,7,2],[],5,[2]],5]]\n[[],[[[]],4,[[5],8,[],[],[10,1]],[],[3,2,[],9]]]\n\n[[],[5,1,9,1]]\n[[5,[10,[10,4,10],[4,6],8,[5]],5,5],[[[]],1,1,[]],[3,5,3]]\n\n[[],[3,10,[3,[5],9,[]],[0]]]\n[[[7,1],[[6,5],5]],[10,[5,7,[5,1],[]]],[[1],[4]],[6]]\n\n[[[[0,5,2],[6],[3,9]],[[10,3,2],3,[1,1,5]],9,[8,9,[9],10]],[[[1,9],0,9],1,[0,4,6],2],[[],4,[[],5]],[4,[6,[8],10],[],[[],[9],[1],[0,3,5,6],7]],[]]\n[[3,[6,7,[],1,5],[8],[3]],[10],[1,6,10,6,[7,6]],[10,[[2]],7]]\n\n[[0],[],[2,4,2,[7,[7,2,0,1],5,1],0]]\n[[[[1,7,3],6,3],9,9,[[0],4,5,[2,3,2,1],[6,4]]]]\n\n[[0,[3,[9,3,2],[7,9,10,4],[7,6,6,10]],[4,[5,7,0],5,1,6],10,[4,[9,2,9],0]],[5,[[10,9,4,0],1,[6],6],[2,9,[],[5,9],[]],[10,[],[],[1,4]]],[[7,9,[7,8]]]]\n[[5,[10,2,[4,7],[]],[0,0,[7,4]]]]\n\n[[],[[8,[6,10,7],4],0],[],[4,0,[4,0],7,1],[4,10,[[9,7,3],[7,4,9,9,7],5,5]]]\n[[[3]]]\n\n[[],[[1,5,[9,0,7,6,2],10,0],[]]]\n[[[10,[10,8],[2,0]],6,4,10],[],[8],[]]\n\n[[3],[[6,[6,4,4,7,7],[5,4,6,4,7],[0]],[[9,4,10]]],[10,[10,[7,9,2,4],8,9,7],10]]\n[[[[7],[7,2,4,8]],[3,[5],8,5],[[7,7,2,8,2],[1,10,8,2,10],[2]],6,[[9,6],10,[4]]],[5,[],[]]]\n\n[[5,[6,7,6,6],8,4],[[],1],[5,9],[[],5,6,7,[[6,8],10]]]\n[[],[[],8],[4,6]]\n\n[[4],[]]\n[[],[],[1],[[[7,7,1],[1]]],[[[1,9,5,0],4,5],1,[8,0,[7,4,8,1]],[[9,0,9],9,[4,5]],[0]]]\n\n[[[[],8,9,[6,5,7]]],[[[8,10],[0,9,8],5,4],[[10,8,8,3]],[[3,4,1,5],9,[],[4,10,10],3],8],[0,9],[[9,[8,1,10,1],[10,1,4],[3,1,10]],[7,9]]]\n[[[1,[6],1],[[],4],3,9,5]]\n\n[[1,6,[],4,[7,10,1,[7,9,7,1],5]],[10,6],[0,6]]\n[[[[3,7,9,5,7],7,4,10,4],4],[],[[[10,4,1,2,4],6,[1],7,[]],[[5,8,5]],8,[[5],[],[10,3,1],[6,7,6,5,10]],[8,[7,4,5],[2,8,10],[]]],[3,9,[[8],3,[0],2],7,[2,[0,3,7,5,4],4,8]]]\n\n[[[],[[6,7,3],[5,6],7,[7,1,8,3,10],[5,6,8,4]],8],[[[10],[5],[6,0,10],9]],[[[],[9,8,8,9,2],[2,5],[4,6,7,5]],10]]\n[[[1,1,0,[9,6,3,10,7],2],2,10,[8,8,3,[10,10,5,4,7],[]]],[10],[5,[6,3],3,6,1],[[2,[6,10,10,9],[2,7],8,[2,0,7,10]],7,[],[5,[2],[],4,9],[1,[10,3],[]]]]\n\n[[[[0,1,7,7],9],8,4,[],[]]]\n[[[7,[10,3]],[8,1]],[10,9,7,[[1],[6,9,2],8,1,[5,7,3,5,10]],[[]]],[[[9,3,9,10,9],0,[6]],1,[2,[5,8,4,5,5],9,[4,10],2],0,[4,[0,1],10,[6,9,9]]]]\n\n[[[3,7,[1,9,9,1,7],4],[],[[6,10,1,1],9,[9,9],8,0],4,[[],[7,8,0],9,[7,6,4,0,9]]],[[9,7,3],[[2,6,5,5],[]],[[9],[7,5,0,8],[9,9,1,1,0]],7,3],[5]]\n[[[[10,2],10],7,6,[[10],[5,4],0,4,[8,5,4]],[[],1]],[4,8,[3,1,[0,8],[3],6],[[3,4,3],[6],[4,5,4]]]]\n\n[[[0,[9,6,6,8],0,[3,7]],[[3,2,0],[3],[4],[6]],4,3,[7]],[7,[[],[],8],6,3],[],[1],[5,9]]\n[[[7,[6,4,7]],[[2,5],10,[6]],[[],[]],[1,[9],6,9,[0,7,4,3]],1],[1,[8,[7,8,1,9],[10,3,3,4]],[[4,7,3,0,3]],[[1,6,6],6,5]],[]]\n\n[[6,[5,6],5,8],[[[5,8,4,9],9,[1,8],3,[9,5]],[]]]\n[[3],[1,[10,0,[2,7,3,8,2],[10,3,9,4,2]]],[[[10],[8,2,10],5,2],3,[3,[8,0],3,5,4],[],3],[],[[9,8,9]]]\n\n[[[5],7,[[5,8],[3,9,3]],[[4,5,3,3],[4,5,1,2],4,9]]]\n[[7,[2,[3,3,0,5,3],10]],[6,5]]\n\n[[[3],[[9,1,2]],6,5],[8],[10,[[1,5,2,10,7],[],[10]],5,6]]\n[[7,10],[[],5],[],[10,[6],[10],[[],10,9,[1,2],[0]],6],[6,0,[7,[3],[8,9,2],5,3]]]\n\n[[[[0,2,2,0,8],1],1]]\n[[[],[[1,1,6,10,3],9,1],[[2,2],8,3,1],[[9,0,6,1,0],[3,3],7]],[],[[7,[1],[3,4,9,0,0],8],7,[9,[],[8,0,8],10],[[3,8],6,[8,0,10],[9,0,1,0,8],5]],[[[2,10,5,3,2],[2,5,7,9],[3,4,4,3]],0,2,[[]],3]]\n\n[[1,7,[[6,7,7],1,[4,3,10,1],3],0,3],[2,[]],[],[7,[[0,4],[5,8],7],[[7,10,3,9,5],[6,5,1,6,6],10],[2,0,[6]]],[]]\n[[[[7],5,[]],8],[3,4,7],[[],[2,[6,7,7,0],[5,0,1],[7,5,1]]]]\n\n[[0,[],1],[[[10,0],[5,2],6],9,[[10,8,2,7,3],[4,8],[2,5,3,7,2],[9,4,3,9,9]],3,9],[]]\n[[],[[[],[1,3,3,6]],[4,[2,6],4,[8,5]],[5],7],[[],[[],0]],[3,[[0,2],[1,4],0],6,3],[[],[[9,7],[],[7,3],[],7]]]\n\n[[[7,[2,3,3],5,8,9],[[1,8,6,7]],6,[8,[0,8,0,7,10],[8],[6,9,1],1],9]]\n[[7,4],[[[8,7],3],[0,8,9],6],[8,[3,[],5,[10,0],2],[1,2,[9,4],0]],[[],[],10,[[3],4,2]],[10,[8,7],4,[[3,3,5,6],[],[9,8,4,1],[0],10],[]]]\n\n[[],[[[5],[3,7,7,0],[4,9,6,6]]]]\n[[[[],[5,5,10,4]],8]]\n\n[[4,9,[],4]]\n[[8,3,10],[[[1,1,1],[10,3],[9,1,10,3,4]],10,10,4],[[[]]]]\n\n[[1,[6,4,6],[],0,[[],[]]],[8,3,[2],7,8]]\n[[8],[1,[],[2,[4,9,3],5,3,7]],[],[[[9,6,1,4],[9],0,8]]]\n\n[[[[9,7],[0,4,5,7,3],[10,8]],[[10,6,9,4],0,3,[9,2,5,8],[5]]],[[0],9]]\n[[[[5,7,1,1,7],5,[],2],[3,[4],7,[9,0,9,1,0]],[[8],[10,3,10],[1,1],10,[5,3,7]],10],[[6],1],[[[],[4]],3,10],[]]\n\n[[[2,8,4,[8,7,6,5]],5],[10],[7,[]],[[9,7,10,0]],[5,9,[],[10,2,[2,2,7,0]],4]]\n[[[[10,7,6,1],[]],[2,[],10,2,1],0,[[2,9,9,9,1],3,8,[9,7,6,3],2]],[4,[[3],9],8,[10,[6,9],[6,6,6,8,7],2,6]],[7,[[6,7,8],[5,2,8,7,9],[],8],0]]\n\n[[[4,10],8,10,8],[3,1,[2,7,[7,10]],2],[[2,0,3]]]\n[[6,8],[10,[[1],7,7,10]]]\n\n[[[],[10,9,8,0,5],4,[],0],[[[1,8,6],8,[2,10,9,8],7],[7]],[2,[[9,8,5,4],8,[],[]],[[]],9,[2,4,[3,3,9,10]]],[]]\n[[2],[[[6],[3,2,0],[3,8],[3,8,8,3,0]],6],[2,[10,[],9,[],[7,3,9,2,4]],3,2,1],[8,3]]\n\n[[4,[9],[[9,10,4,7,2],8,[1,9,0]],[3,6,9,9],[[3]]],[]]\n[[[8],[7],[1,1,[7,10,7,5,2]],[[4,5],[9,10]]],[[],2]]\n\n[[[[7,9],[0,6,8],8,5,[1]],4,[6,1,[1,2,3,3,9]],10,7],[4,[[],3,5],7,[10],0],[4,1,5],[0,9,[[10,5],[0],9,[0,7,4,2,10]],5,9]]\n[[[[9,9],1,10,[9,7]]],[1,[[1],[2,4,9,0]],[4,0],7],[[3,[1,3,4,7],5],2,[[]],[[5,4]]],[1,4,9,10]]\n\n[[[6],[[2,4,10,8,1],[0,5,1,10],2],[0,1],[[8]]],[[2,[4,0]],[[]],[3,2,0,[8,8],[0,5,10,6]],1],[2,9,4,6,[[8],[9],10,[5,5],[5,5,9,8]]]]\n[[[[6],6,[4,9,4,9,4],[7],[1,0]],[]],[[[],3],[[0,3,3,2],6,[2,6,6,8]],[[6,10],8,4],6],[1,5],[[],10,[]],[[[6,7,5],[4],[]],2,0,[[],[10,3,2],1,2]]]\n\n[[10,[[1,3,1,1]],3],[7,[[4,9],[5,4],3],10]]\n[[[[],1,[9,7,2,10,6],10,6]],[1,[0,[3,8,0],1,2,[8,6,4]],2,[[7,5]],[[],[3,8,7,1],[],2]],[[],4,1],[[[6,2],[7,0,2],1,[10],[3]],[],[0,[10],[2,2],0,2],[0,[7,8]],2],[[2,2,[5,10,10],[0],[]],0,0,[[],1,[8,10]],5]]\n\n[[7,[8],8,5,[8]],[],[1,[[3,7],10,6],[7,2],1,[[1,3,1,7],10,[7,3,10,2],5]],[],[]]\n[[8,3,8,[5,10],4],[[[],[2,3,8,1,6],2,[0,10,2,3,7]],4,1,10]]\n\n[[[5,9,6,1],[10]],[[2,5,[6,4,4],[2,4,2],[8,5]],7,[4,5,[0],4]],[3]]\n[[8,[],2,[[10,5,2,5,5]]],[[[],[1,9,0,8,2],5],1,[7,[8,7,3],[5,0,5],[6,2,3],2],[1,10,0]],[6]]\n\n[[2,6,[[9,3,4,7],[9,3,9,1,2],3,4,0],2],[[[],[9,10,7,0],[]],[[2,6],[7,9,9],2,[7,3,2,7,8],[9,5,5,6]]]]\n[[8,[[2,0],7,[7,4,9,10],7],[5],[2,[4,5],5],4]]\n\n[[0,10,3,9],[[[3,5,3,0,4],[5,8,5,3],9,[0,3,4,3]],10,6],[3],[5,0,10,[[2,1],6]],[3,[2],[[4,1,1,7,9],[3],3]]]\n[[9,[1,6,1,4],3,2,[[],3,[6,8],[3,4,8,0,8]]],[10,[9],8],[3,3,7,2,[]],[9,[[7,0,6,9,7],[0,1,9,2,9],[4,6],9,[9]],[]]]\n\n[[[[4,5],9],[[],6,2,5,[0,7,0,1,8]],[5],4],[[[3,7,10,9,3],[],[],3]],[0]]\n[[[[],7,[3,9,5],9],0],[[3,[],8],[6],3,5],[1],[[[],[]]],[[5,10,[2,9],[1,8,9],[4,3,1,1]],1,[[],[2,10,9],9,6],[[3,7,9,3],[0],[5,0,5],[2,7,3,5],[0]],[3,[],[5,10,0],9,[7]]]]\n\n[[8,2,[],[5,7]],[4],[[[8],7,6]]]\n[[5,[[0,10,5,9],4,[0,10]],0,5,10]]\n\n[8,4,9,3,2]\n[8,4,9,3]\n\n[[[[5]]],[[1,0,8,6],7],[7,1],[4,6],[[9,2,[0]],[[4]],[7,1,0,[10,10],10]]]\n[[0,[[10,0,5,5,2],1],9],[[[1,4,3,3,5],[6],0,[2,4,9,8],[4,8,4]],[10,[0,2,7],[9,8,5],[],9],[3,[],1]]]\n\n[[[1,7,[1,1,1,9]],[4,1,[8,4,2,1]],[],[]]]\n[[[],[[],[7,9,7,2,6],9],[[6,6,3],[8],3,0,3],7,[3,[0,2,3,4,0],[5,7]]],[8,[1,6,5,7]],[[7,[],[4]],[8,[],[8,6,7,4],4,6],[],[9,[2,2,6,7,6],7],9],[[[],8],10,[[],[8,2,8],8,[5,1,8]],[],[3,5]],[2,1,[7,[0,6,5,6,6],[5,7,4],[5,0,4,5,10]]]]\n\n[[],[[[3,7],4]],[],[],[[[2,0]],[5,9]]]\n[[[6,4,[10],8,5],5,[7,[4,4,0]],[6],5],[2,10,[[2,10,5,8,5],[10,5,7,2,8],4,[8,5,5]],8,[[3,3],[6]]],[3,[[0,8]],1]]\n\n[[0,5],[[],4,8],[],[],[[1,[]],5,1,[[]],0]]\n[[[]]]\n\n[[],[],[8],[],[6,10]]\n[[3,3,6,8]]\n\n[[[0],[9],9],[[10,10],[7,[6,3,1,10,7],[5,7],[6,2,5],2]],[5,[2,[7,3]],6,3]]\n[[],[9,[[4,9,9,9,6],[],[10,5,6]]],[[[1,7,0],[5],4,[],0]]]\n\n[[2,[5,10,[2,8,5,1,5],[9,0,8,0],8],[[8,8,10]],8],[2,[8,10,[],[1,5]],5,[[7],[4,2,1,1,8],0,1,[10,8,2]],2],[10,[[8,8,4,7,5],[5,7],10,[8,0]],5,[[4,4,2],[2,4,3,0,1],[7,8]]],[6]]\n[[9]]\n\n[[4,[4,[0,7,0],[1,5,10,5],[2,10,7]],[5],[[2,4,2],[3,8,7,6],6]]]\n[[7,7,5,[[4,8,10,6]],5],[2,4,10,1],[[[10],[10,9,2]]],[],[[[3,1,3,1],[],[0,0,9]],9,[2,[2,5,10,1,5],9],5,[2,[5,1,4,2],10]]]\n\n[[3],[8],[8,[4,[2,10],9,[4,10]],[],[],8]]\n[[[[],[10,10]],[3,[5,3,4,5],8],9,[2,5],8]]\n\n[[],[],[[[8,8,4],2,[],5,3],[],[[2,2,0,0,10],[1,2],[1,1],8],[[10,6,1,6]]]]\n[[[[1,0,4,7,8],[2,5],[3,1]],9,9,[[10,9]],[[2]]],[[[],[3,3,10],[8,7,5,4,9],6,0],2,[8,10,4,[8,3,3,9,2]],[[7,10,10,0,0],[4,3,8,3]]],[[1,0],0,6]]\n\n[[[]],[2,[[9],1,[6]],6],[[[10,0,0,9,2],[1,8,4],9,[10,6,5,2],[3,0,0,8]]],[5,[[],1,[4],[]],0,10,[2]]]\n[[9],[],[[0,3,9,[]],[2,[1,9,0,0,4],[9,10,1,9,4],[]],[10,3,2],9]]\n\n[[[2],[1,1,[6],[8,6,9,6,7],3]],[[],8,[[6,6],[5,8,10],[],[9],8],[]],[]]\n[[1,9,2,[6],[0,0,3]],[]]\n\n[[10,5],[],[[[]],7],[10,8,8,9,[[],[1,3,9,2,8],[9,4,2,6,7],[8,6],7]]]\n[[[5,[2,8,0,6],[0,7],0],[[],[]],2,[6]],[[],4,6,[[],[4,8,8,7,5],7,[],[]],7],[4]]\n\n[[10,[[4,10],[8,1,10],[4,9,8,1,5],3,[4,9,1,1,6]]],[],[[7]],[[[],0,4,[7,6,4]],2,[[4],10],2,0]]\n[[[],5],[2,[],7],[9],[]]\n\n[[],[],[7],[10],[]]\n[[2,[[3,0,4,8,10],1,5,[]],[4,[9,4,10,7,2]],3],[8],[[[6],4,[3,7,5,9]],8,6,[10],8]]\n\n[[],[6]]\n[[[[9,9,3,10],[5],9,6,3],[8,7,4,0],[],[[5,9,9,0],[],[1],[2,4,8]]],[10,[[9,6,4,1],1],0],[[9,[],7,7,6],[9],6]]\n\n[[[10,[5,10,0,7,2],[2],8]],[[9,9,[],1,8],[[],[1]],[5,[3,3],1]]]\n[[],[3,1,[10,[2,2,10,0],[4,3,3,6,7],8],8],[[[8],2,4],[[],[],10,2,[]],6,8,8],[[7,0,8,[]]]]\n\n[[[4],7,[10]],[[[3],1],2,[9]],[[4,7],[[3,8],[2,5,5,4],5,[9,6,2,2,9]],2,[[4,5,8,6]],[0,6,7,[4,2,1,7],2]],[6,5]]\n[[[9,1,3],[[9],8,[5,1,7],[9,8,9]],5,[[1,1,10],3],2],[[5],7],[]]\n\n[[3,[0,5,[8],[],[]],8,7,9]]\n[[8,[[2],3,[],7,7],3],[[[2],[7,9],[8]],[6]],[[[],[6,5,0,5,2],[6,4,4],[5,9]],[[0,2],[10,8],[6,2,1],[4,10,6,8],6],[[1,1,8],9,5,5,[3]],[],[0,[],[1],[2,5,10]]],[[],5],[[[8,0,7,1,4],3,[],4],9]]\n\n[[],[9],[5,[[2,0,0,10,6],3,7,3,[9,9,2]],7]]\n[[[],9],[],[6,6,[9,2,[3,6]],[[3,2,6,2],[9,0],0],1],[[9],10,[9,7],[9,[10,6],0]],[[[8,0],8,[1,10,2,9]],8,5]]\n\n[10,8,0,10]\n[10,8,0,10,6]\n\n[[[[7,10,2],7,[]],[[],[1,0],[],[],3],9,2],[[[],4,9],0],[3,3,[],2],[[3,[7,1,1],3],10,10,9],[[6,0,3,[],[3,6]],[[9,10],[9,1,7,3],10,9],10,1]]\n[[],[6,9,[0,3,3,0,[7,9,8]]],[[3,[8]],[8,[6,3]],2]]\n\n[[[2,[7,10,4,7,3],[9],0,4],1,[2,9,8,2,6],9,0],[],[3,0,[[5,4,4,2]],2]]\n[[[[3,0],[5,9,9],[2,5,0],2,3]],[2,[6,[5]],[[10,3],8,9,[9,5,10,8,2]],8],[]]\n\n[[0,[[10],7],2,2,1],[[[0,2,5],2,7],[10,[],[8],7],5,[[2],0]]]\n[[],[3],[10,[4,[5,2,7,3],9,5],3,3,6],[[7,[]]],[[[10,7,6,6,4],[4,2],8,6,[3,5,0]]]]\n\n[[0,[0,[],[]],5,0,9],[[7,9,[],[1,6,0]],[[10,6],3,[3,1,10,5,8],[]],7,6],[4,6,[],0,2],[5]]\n[[[5],[8,0,5],[7,[1,3,9],3]],[2,7,0],[],[4,[4,8,4,[5,9,0]],[]],[[[10,7,6,1],[4,5,8,7],9]]]\n\n[[[9],1],[[4,[5,6],[4],5],10,6,[7],6],[[[5,4],[8],[7,4],[6,2,9,8],[4,0]],1,[[]],3,[10,0,1,[3,2,3,5],4]]]\n[[7],[4,[3,[4,3,1,9,6],1,[]],[1,[6],[0,3]],0,10]]\n\n[[[0,3],[3,[1],[],6,[]]],[8,[],6,[],4]]\n[[[[4],5,[9,1,7,9,9]],[2,5]],[[[10,8,5,10,2],7,[0,6,10,3],10],3,[6,0,[3,5,0,5],[8,9,3,5]],3],[[[0,4],[10,6,7,5],7,[10]],[1],[[8,10],2],[[],10,9,0]]]\n\n[[6,[[1]],1,[[],2,[6,10],6,1]],[[7,3],3,6,[3,3,10,[0]]],[6,[[6,7],5,1,[4,2,0,1]],10],[9,[[9],[2,6,5,1],0],[7]],[[[5],[],7,9,[10]],[[7,0]],[[]]]]\n[[4,1,4,[[5,4],[9],[],[3,8,5]]],[2,8,[[6,6,4,6]],[4,1],1],[[2,0,[7,7,2,1,4],[0,8,3,8],9],5,0]]\n\n[[[6,10,9,[1],8]],[4,0,[[8,1,9,7,0]],[[3,7,10],9,[10,9,2],[6,10],[5,9,5,10]]],[5,5,8,1,2],[]]\n[[7,2],[2,7,2,5,[[1,4,7,10,10]]],[8,4,[[9,8,10],[0],2,[3]],1,7],[2,0,[0,4,0],5,[]],[[[6,8,9],[2,4,3,4,10],10],2,9]]\n\n[[5,8,[],[[8,6,3,10],[1,1,4,7,5],[1,8,0,5,2],6,5]],[],[]]\n[[],[],[[[5,9,6],2,10,[9,1],4],4,3,[1,[9]],6]]\n\n[[2,[2,[7,8],[7,2,0]]]]\n[[0],[[],7],[],[],[1,[7,[4,6,9]],4]]\n\n[[[[9,6,7,5],2]]]\n[[[],8,[3,0,5],1,8],[[[3,5,7,7,7],[6,3,7,7],[1,1,2,1]],0,4,[0,5]],[],[2],[[7,[6,4,8,7],[8,8,10,5],1,10],10,8,[[8,1],[8,5,5],3,[8,0]],6]]\n\n[[10,4]]\n[[],[0,[],[[],[8,1,0],[10],[0,6,6,9],8],2],[[[9],1,[]],[[2,0,8,10]],6,[[2,1,10,3],[],8]],[2,[[8,4,0,5],0,9,5,[1]],[]]]\n\n[[10,0,10,9]]\n[[[2,[10,3,6],4],[[6,5,10,3],8,[0,0,9,7,2],[10,4,5,4,4],[1]],[1],[[3,7,4,10,1],[8,10,4]],9],[10],[[5,5,[1,7,10],9,4],[],3]]\n\n[[7,4,1,[6,8,4],10],[5,10,7,[9,10,6,7]],[4,3]]\n[[[4,[9],[7,1,3],5,[]],2],[8,0],[[[9,0,5,4],[4,0,8,5],1],7,[8,3,[],9],0],[]]\n\n[[[1,3]],[[[1,3,4],0,[9],[0],[8,5,8]],[[7,4],0,[2],[2,1,0,0]]],[[],[[2,1,3,3],6],[3],[[1,6,8]]],[9,2,[[],[4,7,7],[7,2,10,6,3]]]]\n[[10]]\n\n[[[],[]],[6,[5,6,[1],0]],[10],[[10],1,[8],7,8],[[[],8,4],3,3,[1,[2,7]],1]]\n[[[7,8,[1],2],7,[[0,6,4],3,[6,8,7,6,5],[2,10,6,4,4],1],[[6,6,9,2,9],[6]]],[6,[]],[[1,[],[6,5,8]]]]\n\n[[[[8],4,[0,10],[],[5,5,8]],10],[],[7,[],[],[[2,10,1,4],[9,9,4],1,7,[8,5]]]]\n[[7],[[],[[10,3,1,4,3],6,[5,9],[0]],1],[4,0,[[7]],0,3],[10,5],[[8]]]\n\n[[[],3]]\n[[1,3,[[8,7,9,5],[],7,[],6],[9,[]],8],[[[1],[4,3,1],6,[9],[6,4,0,4]],[[8],1,[0,10,5],7,6],7,[2,[6,9,5,9,1]]]]\n\n[[[9,[0],[9,0],0,9],[],[[],[1,1],[5,7,7,5,7],[]],1],[[8,5,7],8]]\n[[6,[],[0,2,1],[3],2],[7,7],[6,[],[],2]]\n\n[[5,4,[[7,8,3,0],[3,9,7,1,10],[10],6],1],[]]\n[[8,6,[[2,2,6,8],[1,2,2,7],[],[],7],2,6]]\n\n[[[[],[5],[],9,3]],[],[7,[],0,[[8,8,10,8],10]]]\n[[5,10,2,7,5],[6,5,3],[2,[[3,1,2],2,[]],1],[4]]\n\n[[],[],[]]\n[[[[4,2],[7,1,1],6,9,[9,5,8,2]]],[[],[[7,10,9,1,0]]],[[[8,8,8],1,[7,10,3],10],2,1,[[5,4,5],[10,4,0],4,5]],[4,2,[]]]\n\n[[[[],3],[[10,6,10,6,4],2,[9,9,2,0]],[6,[],[10,8,2,6,10],[8,8]]]]\n[[[[1,5,10],[7,0,4,2],7,[]],0],[2,[8],10,1,6],[7,[[5,5,4,7]],6],[[[8,7,7],8,[0,5,6,10,9],10],7,[2,6],[],6],[1]]\n\n[[[[4,0,6,6],[5,6,7],[10]]],[7,9]]\n[[[7,8,[0,8,10,1],4,10],10,[[8,1],1,[],3,6]],[]]\n\n[[9],[[],5],[8,[4,0,[9,7,0,3,8]],[]],[5,6,9,[1,[1,10,3,1,6],10,2]],[[],[],5,[[7,5,4,7,7],5,6,[10,9,1,9,2],0],[]]]\n[[[[9],10,[9,0,9],5],10,4,6],[0,[1,6],2,3,1],[3],[[],[[0,7,0],[7,1],4,3]],[3,9,[],8]]\n\n[[1,2,6,2]]\n[[[[5,1,0]],10,[10,[],[9,0,5,4],1],[5,6],[[9,6,6],0,3,[0,4],6]]]\n\n[[[0,[7,8,3,10,1]],6,2],[8,[[1,5,3,1,10],[0,1,9]],5,[10,1],2],[[[7,8,1,0],0,[10,7,3,3],[4]],7]]\n[[0,2,[[10,1,3],2,4,0]]]\n\n[[[6,[5,2,3,6,8]],[[9,7],[6,10,8],4,3,[3,1,9,4]]],[3,[[7,8]]],[7,0,[6],1]]\n[[[],6,7,[4,1],[6,[],[4,7,0,0,6],[9,2,7,9],0]]]\n\n[[[4,[9,6,8,9,7],[10],[4,6],[2,10,7]],[],[[],4,6,2,0],6,[[6,5,3,10,2]]],[9,10,0]]\n[[4,[6,[0,1,5],5]],[8],[4],[[],[0,[2,5,4],[]],[[0,5],[0,2]]],[[3,[10],[6]],4,[],3,[[2,1],9,1,8]]]\n\n[[[],4],[0,2],[[[7,2,3,5,7],[3,3,9,5,0],[1,8,3],2],[[10,10,5,7,10],[],[5,10,10,1,3],[4,9],[3,5]]],[],[9,3,[2,3,[1,7]]]]\n[[9,2,8,3],[[[1,6,9],9,9,[],[6,7,9]],9,0],[1,8,[[]],5],[[[3,7,0,9],[2,3,4,6,2],3,[3,3,0]],3,[3,2,1,[8,4]],[4,[10],4],[[5,10]]],[]]\n\n[[[6,8],9,6,9,5],[9,2,[]]]\n[[[7,6],[]],[0,[[2],5,4,[]]],[8,6,7],[[[],[4,2,3],[0,3,2,7,5],[0,2,4,1],0],3],[5,7,[[8],5]]]\n\n[[6],[[3,4,[1,1,4],6]],[[[]],[],[10]],[2,6,[10,9,1,8,[0,5]],6],[5,7,[[6,10,2,3]]]]\n[[[[2,4,0],9],4,8,[[],[9,4]]],[]]\n\n[[[[9,6,3,8],10,4],[10,[0,4,10,0,2],[6,7,10,1]],[[],[6,9,6,9,8],[],5],3,[4,4]],[[[],[9],[],5,5]],[]]\n[[6],[3,[9,0,6,[9,6]],[[2,5]],[]],[[[7,7,6],[0,1],0,[]],5,1,3],[8]]\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { product, sum } from '../util'\n\nconst parseInput = () =>\n  input\n    .split('\\n\\n')\n    .map((pairs) => pairs.split('\\n').map((line) => JSON.parse(line)))\n\nconst compare = (a: any[], b: any[]): number => {\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    const left = a[i]\n    const right = b[i]\n    const isLeftNumber = typeof left === 'number'\n    const isRightNumber = typeof right === 'number'\n    const result =\n      isLeftNumber && isRightNumber\n        ? left - right\n        : compare(isLeftNumber ? [left] : left, isRightNumber ? [right] : right)\n    if (result !== 0) return result\n  }\n  return a.length - b.length\n}\n\nexport const Part1 = () => {\n  const packets = parseInput()\n  const result = packets\n    .map(([left, right], i) => (compare(left, right) < 0 ? i + 1 : 0))\n    .reduce(sum)\n  return (\n    <p>\n      The sum of the sorted indices is <Answer>{result}</Answer>.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const dividers = [[[2]], [[6]]]\n  const packets = [...parseInput().flat(), ...dividers].sort(compare)\n  const decoderKey = dividers.map((d) => packets.indexOf(d) + 1).reduce(product)\n  return (\n    <p>\n      The decoder key of the distress signal is <Answer>{decoderKey}</Answer>.\n    </p>\n  )\n}\n","export default `\nSensor at x=13820, y=3995710: closest beacon is at x=1532002, y=3577287\nSensor at x=3286002, y=2959504: closest beacon is at x=3931431, y=2926694\nSensor at x=3654160, y=2649422: closest beacon is at x=3702627, y=2598480\nSensor at x=3702414, y=2602790: closest beacon is at x=3702627, y=2598480\nSensor at x=375280, y=2377181: closest beacon is at x=2120140, y=2591883\nSensor at x=3875726, y=2708666: closest beacon is at x=3931431, y=2926694\nSensor at x=3786107, y=2547075: closest beacon is at x=3702627, y=2598480\nSensor at x=2334266, y=3754737: closest beacon is at x=2707879, y=3424224\nSensor at x=1613400, y=1057722: closest beacon is at x=1686376, y=-104303\nSensor at x=3305964, y=2380628: closest beacon is at x=3702627, y=2598480\nSensor at x=1744420, y=3927424: closest beacon is at x=1532002, y=3577287\nSensor at x=3696849, y=2604845: closest beacon is at x=3702627, y=2598480\nSensor at x=2357787, y=401688: closest beacon is at x=1686376, y=-104303\nSensor at x=2127900, y=1984887: closest beacon is at x=2332340, y=2000000\nSensor at x=3705551, y=2604421: closest beacon is at x=3702627, y=2598480\nSensor at x=1783014, y=2978242: closest beacon is at x=2120140, y=2591883\nSensor at x=2536648, y=2910642: closest beacon is at x=2707879, y=3424224\nSensor at x=3999189, y=2989409: closest beacon is at x=3931431, y=2926694\nSensor at x=3939169, y=2382534: closest beacon is at x=3702627, y=2598480\nSensor at x=2792378, y=2002602: closest beacon is at x=2332340, y=2000000\nSensor at x=3520934, y=3617637: closest beacon is at x=2707879, y=3424224\nSensor at x=2614525, y=1628105: closest beacon is at x=2332340, y=2000000\nSensor at x=2828931, y=3996545: closest beacon is at x=2707879, y=3424224\nSensor at x=2184699, y=2161391: closest beacon is at x=2332340, y=2000000\nSensor at x=2272873, y=1816621: closest beacon is at x=2332340, y=2000000\nSensor at x=1630899, y=3675405: closest beacon is at x=1532002, y=3577287\nSensor at x=3683190, y=2619409: closest beacon is at x=3702627, y=2598480\nSensor at x=180960, y=185390: closest beacon is at x=187063, y=-1440697\nSensor at x=1528472, y=3321640: closest beacon is at x=1532002, y=3577287\nSensor at x=3993470, y=2905566: closest beacon is at x=3931431, y=2926694\nSensor at x=1684313, y=20931: closest beacon is at x=1686376, y=-104303\nSensor at x=2547761, y=2464195: closest beacon is at x=2120140, y=2591883\nSensor at x=3711518, y=845968: closest beacon is at x=3702627, y=2598480\nSensor at x=3925049, y=2897039: closest beacon is at x=3931431, y=2926694\nSensor at x=1590740, y=3586256: closest beacon is at x=1532002, y=3577287\nSensor at x=1033496, y=3762565: closest beacon is at x=1532002, y=3577287\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { Point, min, max, range } from '../util'\n\ninterface Signal {\n  sensor: Point\n  beacon: Point\n}\n\nconst parseInput = () =>\n  input\n    .split('\\n')\n    .map(\n      (line) =>\n        line.match(\n          /Sensor at x=(?<sensorX>[-\\d]+), y=(?<sensorY>[-\\d]+): closest beacon is at x=(?<beaconX>[-\\d]+), y=(?<beaconY>[-\\d]+)/u\n        )!.groups!\n    )\n    .map(({ sensorX, sensorY, beaconX, beaconY }) => ({\n      sensor: { x: Number(sensorX), y: Number(sensorY) },\n      beacon: { x: Number(beaconX), y: Number(beaconY) }\n    }))\n\nconst getDistance = (a: Point, b: Point) =>\n  Math.abs(a.x - b.x) + Math.abs(a.y - b.y)\n\nconst getNumNoBeacons = (signals: Signal[], y: number) => {\n  const minX = signals\n    .map(({ sensor, beacon }) => sensor.x - getDistance(sensor, beacon))\n    .reduce(min)\n  const maxX = signals\n    .map(({ sensor, beacon }) => sensor.x + getDistance(sensor, beacon))\n    .reduce(max)\n  return range(minX, maxX).filter((x) =>\n    signals.some(\n      ({ sensor, beacon }) =>\n        getDistance(sensor, { x, y }) <= getDistance(sensor, beacon) &&\n        !(x === beacon.x && y === beacon.y)\n    )\n  ).length\n}\n\nconst getTuningFrequency = (signals: Signal[], max: number) => {\n  for (let y = 0; y <= max; y++) {\n    for (let x = 0; x <= max; x++) {\n      if (\n        signals.every(({ sensor, beacon }) => {\n          const distanceToBeacon = getDistance(sensor, beacon)\n          const distance = getDistance(sensor, { x, y })\n          if (distance > distanceToBeacon) return true\n          const yDistance = Math.abs(sensor.y - y)\n          x = sensor.x + (distanceToBeacon - yDistance)\n          return false\n        })\n      )\n        return 4000000 * x + y\n    }\n  }\n}\n\nexport const Part1 = () => {\n  const signals = parseInput()\n  const count = getNumNoBeacons(signals, 2000000)\n  return (\n    <p>\n      In the row where y=2000000, there are <Answer>{count}</Answer> positions\n      that cannot contain a beacon.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const signals = parseInput()\n  const frequency = getTuningFrequency(signals, 4000000)\n  return (\n    <p>\n      The tuning frequency is <Answer>{frequency}</Answer>.\n    </p>\n  )\n}\n","export default `\nValve OM has flow rate=0; tunnels lead to valves AA, EZ\nValve ZZ has flow rate=0; tunnels lead to valves LR, QY\nValve NC has flow rate=0; tunnels lead to valves KX, QI\nValve QI has flow rate=5; tunnels lead to valves TX, NC, QS, HY, UX\nValve QS has flow rate=0; tunnels lead to valves CY, QI\nValve FP has flow rate=0; tunnels lead to valves IW, SJ\nValve ZR has flow rate=0; tunnels lead to valves ID, KC\nValve YR has flow rate=21; tunnels lead to valves RS, OT, FV\nValve SJ has flow rate=23; tunnel leads to valve FP\nValve QY has flow rate=0; tunnels lead to valves ZZ, NU\nValve KD has flow rate=13; tunnels lead to valves WY, ZP\nValve GT has flow rate=0; tunnels lead to valves SG, PD\nValve DB has flow rate=0; tunnels lead to valves TX, MX\nValve KW has flow rate=0; tunnels lead to valves AK, HM\nValve TX has flow rate=0; tunnels lead to valves QI, DB\nValve YX has flow rate=0; tunnels lead to valves HY, AA\nValve NA has flow rate=0; tunnels lead to valves NU, KS\nValve ST has flow rate=0; tunnels lead to valves YO, PD\nValve UX has flow rate=0; tunnels lead to valves QI, OT\nValve OT has flow rate=0; tunnels lead to valves UX, YR\nValve AK has flow rate=0; tunnels lead to valves KW, PD\nValve UC has flow rate=0; tunnels lead to valves YH, KC\nValve FF has flow rate=0; tunnels lead to valves YO, IN\nValve GN has flow rate=0; tunnels lead to valves CY, MX\nValve KK has flow rate=0; tunnels lead to valves WY, YO\nValve PD has flow rate=10; tunnels lead to valves GT, ID, HW, ST, AK\nValve LR has flow rate=18; tunnels lead to valves ZZ, NM, SG, YK\nValve CY has flow rate=14; tunnels lead to valves VB, GN, QS, FV\nValve YH has flow rate=0; tunnels lead to valves UC, VQ\nValve RS has flow rate=0; tunnels lead to valves MX, YR\nValve YO has flow rate=20; tunnels lead to valves FF, NM, KK, ST, ZU\nValve HQ has flow rate=0; tunnels lead to valves AA, MX\nValve UE has flow rate=0; tunnels lead to valves HM, IN\nValve NM has flow rate=0; tunnels lead to valves LR, YO\nValve KX has flow rate=7; tunnels lead to valves NC, UZ, XK, PV\nValve IW has flow rate=0; tunnels lead to valves VQ, FP\nValve IN has flow rate=22; tunnels lead to valves FF, UE\nValve WY has flow rate=0; tunnels lead to valves KK, KD\nValve HY has flow rate=0; tunnels lead to valves YX, QI\nValve AA has flow rate=0; tunnels lead to valves KS, OM, XO, HQ, YX\nValve ZU has flow rate=0; tunnels lead to valves YO, NU\nValve YK has flow rate=0; tunnels lead to valves ZP, LR\nValve XK has flow rate=0; tunnels lead to valves XO, KX\nValve VB has flow rate=0; tunnels lead to valves CY, UZ\nValve ZP has flow rate=0; tunnels lead to valves KD, YK\nValve VQ has flow rate=11; tunnels lead to valves YH, IW, EZ\nValve HW has flow rate=0; tunnels lead to valves NU, PD\nValve NU has flow rate=8; tunnels lead to valves ZU, UD, NA, HW, QY\nValve UZ has flow rate=0; tunnels lead to valves KX, VB\nValve PV has flow rate=0; tunnels lead to valves DY, KX\nValve MX has flow rate=6; tunnels lead to valves HQ, DB, DY, RS, GN\nValve KS has flow rate=0; tunnels lead to valves NA, AA\nValve UD has flow rate=0; tunnels lead to valves NU, IO\nValve FV has flow rate=0; tunnels lead to valves YR, CY\nValve SG has flow rate=0; tunnels lead to valves LR, GT\nValve HM has flow rate=24; tunnels lead to valves KW, UE\nValve XO has flow rate=0; tunnels lead to valves AA, XK\nValve KC has flow rate=12; tunnels lead to valves IO, UC, ZR\nValve IO has flow rate=0; tunnels lead to valves UD, KC\nValve DY has flow rate=0; tunnels lead to valves PV, MX\nValve ID has flow rate=0; tunnels lead to valves PD, ZR\nValve EZ has flow rate=0; tunnels lead to valves VQ, OM\n`.trim()\n","import { h } from 'preact'\nimport { Answer } from '/components'\nimport input from './input'\nimport { dijkstra, sum } from '../util'\nimport { useEffect, useState } from 'preact/hooks'\nimport { setIntervalImmediate } from '/shared/web-utilities/util'\n\ninterface Valve {\n  flow: number\n  valves: string[]\n}\n\ntype Valves = Record<string, Valve>\n\nconst parseInput = () =>\n  input\n    .split('\\n')\n    .map(\n      (line) =>\n        line.match(\n          /^Valve (?<name>.+) has flow rate=(?<flow>\\d+); tunnels? leads? to valves? (?<tunnel>.+)$/u\n        )!.groups!\n    )\n    .reduce(\n      (acc, { name, flow, tunnel }) => ({\n        ...acc,\n        [name]: {\n          flow: Number(flow),\n          valves: tunnel.split(', ')\n        }\n      }),\n      {} as Valves\n    )\n\nconst getMaxPressure = function* (\n  valves: Valves,\n  timeYou: number,\n  timeElephant = 0,\n  yieldEvery?: number\n) {\n  const closed = Object.keys(valves).filter((key) => valves[key].flow > 0)\n  const paths = [...closed, 'AA']\n    .map((start) => ({\n      start,\n      paths: closed.map((end) => ({\n        end,\n        distance: dijkstra(start, end, (key) => valves[key].valves).distance!\n      }))\n    }))\n    .reduce(\n      (acc, from) => ({\n        ...acc,\n        [from.start]: from.paths.reduce(\n          (acc, to) => ({\n            ...acc,\n            [to.end]: to.distance\n          }),\n          {} as Record<string, number>\n        )\n      }),\n      {} as Record<string, Record<string, number>>\n    )\n\n  const moveTo = (from: string, to: string, time: number, pressure: number) => {\n    const distance = paths[from][to]\n    time = Math.max(time - distance - 1, 0)\n    const flow = time > 0 ? valves[to].flow * time : 0\n    return [time, pressure + flow]\n  }\n\n  let max = 0\n  const openValves = function* (\n    time = 26,\n    time2 = 26,\n    current = 'AA',\n    current2 = 'AA',\n    pressure = 0,\n    pressure2 = 0,\n    visited = new Set<string>()\n  ): Generator<undefined> {\n    visited = new Set(visited)\n    visited.add(current)\n    visited.add(current2)\n    const remaining = closed.filter((key) => !visited.has(key))\n    if ((time <= 2 && time2 <= 2) || !remaining.length) {\n      const total = pressure + pressure2\n      if (total > max) max = total\n      return\n    }\n    const bestPossible =\n      pressure +\n      pressure2 +\n      remaining\n        .map((key) => valves[key].flow * (Math.max(time, time2) - 1))\n        .reduce(sum)\n    if (bestPossible <= max) return\n\n    const iterate = function* (remaining: string[]) {\n      for (const next of remaining) {\n        const [newTime, newPressure] = moveTo(current, next, time, pressure)\n        const remaining2 = remaining.filter((key) => key !== next)\n        if (time2 <= 2 || !remaining2.length) {\n          yield* openValves(\n            newTime,\n            time2,\n            next,\n            current2,\n            newPressure,\n            pressure2,\n            visited\n          )\n        } else {\n          yield* iterate2(remaining2, next, newTime, newPressure)\n        }\n      }\n    }\n\n    const iterate2 = function* (\n      remaining: string[],\n      next: string,\n      newTime: number,\n      newPressure: number\n    ) {\n      for (const next2 of remaining) {\n        const [newTime2, newPressure2] = moveTo(\n          current2,\n          next2,\n          time2,\n          pressure2\n        )\n        yield* openValves(\n          newTime,\n          newTime2,\n          next,\n          next2,\n          newPressure,\n          newPressure2,\n          visited\n        )\n      }\n    }\n\n    if (time > 2) {\n      yield* iterate(remaining)\n    } else {\n      yield* iterate2(remaining, current, time, pressure)\n    }\n    yield\n  }\n  let n = 0\n  for (const _ of openValves(timeYou, timeElephant)) {\n    n++\n    if (yieldEvery && n % yieldEvery === 0) yield _\n  }\n  const end = Date.now()\n  yield max\n}\n\nexport const Part1 = () => {\n  const valves = parseInput()\n  const [pressure] = [...getMaxPressure(valves, 30)]\n  return (\n    <p>\n      The most pressure you can release is <Answer>{pressure}</Answer>.\n    </p>\n  )\n}\n\nexport const Part2 = () => {\n  const [result, setResult] = useState<number>()\n  useEffect(() => {\n    const valves = parseInput()\n    const gen = getMaxPressure(valves, 26, 26, 10000)\n    const id = setIntervalImmediate(() => {\n      const { value, done } = gen.next()\n      if (value) setResult(value)\n      if (done) clearInterval(id)\n    }, 0)\n    return () => clearInterval(id)\n  }, [])\n\n  return result ? (\n    <p>\n      The most pressure you can release while working with the elephant is{' '}\n      <Answer>{result}</Answer>.\n    </p>\n  ) : (\n    <p>Running... This takes a very long time...</p>\n  )\n}\n","import { FunctionComponent } from 'preact'\nimport * as day1 from './01'\nimport * as day2 from './02'\nimport * as day3 from './03'\nimport * as day4 from './04'\nimport * as day5 from './05'\nimport * as day6 from './06'\nimport * as day7 from './07'\nimport * as day8 from './08'\nimport * as day9 from './09'\nimport * as day10 from './10'\nimport * as day11 from './11'\nimport * as day12 from './12'\nimport * as day13 from './13'\nimport * as day14 from './14'\nimport * as day15 from './15'\nimport * as day16 from './16'\nimport * as day17 from './17'\n\nexport interface Solution {\n  Part1?: FunctionComponent\n  Part2?: FunctionComponent\n}\n\nconst solutions: Solution[] = [\n  day1,\n  day2,\n  day3,\n  day4,\n  day5,\n  day6,\n  day7,\n  day8,\n  day9,\n  day10,\n  day11,\n  day12,\n  day13,\n  day14,\n  day15,\n  day16,\n  day17\n]\n\nexport default solutions\n","import { h } from 'preact'\nimport { Button } from '/components'\nimport { setShowCode, useStore } from '/store'\n\nexport const ShowCodeButton = () => {\n  const showCode = useStore((s) => s.showCode)\n  return (\n    <Button onClick={() => setShowCode(!showCode)} plain>\n      {showCode ? 'Hide code' : 'Show code'}\n    </Button>\n  )\n}\n","import { h } from 'preact'\nimport { Array2d, Visualization } from '/components'\nimport { pointToKey } from '/solutions/util'\n\ninterface Props {\n  map: string[][]\n  path: string[]\n}\n\nexport const Map = ({ map, path }: Props) => (\n  <Visualization>\n    <Array2d\n      array={map.map((line, y) =>\n        line.map((cell, x) =>\n          path.includes(pointToKey({ x, y })) ? (\n            <strong key={pointToKey({ x, y })}>{cell}</strong>\n          ) : (\n            cell\n          )\n        )\n      )}\n    />\n  </Visualization>\n)\n","export default `\nD 2\nU 1\nD 2\nR 2\nL 1\nU 2\nL 1\nU 2\nD 1\nR 1\nD 2\nR 1\nD 1\nU 2\nD 2\nR 1\nU 1\nR 1\nU 2\nR 1\nL 1\nU 2\nR 1\nL 2\nU 1\nR 1\nU 1\nR 1\nL 2\nU 2\nD 1\nU 1\nD 2\nL 1\nU 1\nL 1\nR 1\nD 1\nR 1\nD 1\nU 2\nD 1\nR 1\nU 1\nL 1\nU 2\nL 1\nD 1\nU 1\nD 1\nL 1\nU 2\nL 1\nD 2\nR 2\nL 1\nR 2\nD 1\nL 2\nD 2\nU 2\nR 1\nL 1\nD 2\nU 2\nL 1\nD 2\nU 1\nL 2\nR 2\nU 1\nD 1\nU 1\nD 1\nR 1\nD 1\nU 2\nD 1\nR 1\nD 1\nL 1\nD 1\nL 2\nU 2\nD 1\nR 1\nD 1\nL 1\nD 2\nR 2\nU 2\nD 1\nU 2\nD 1\nU 1\nL 1\nR 2\nD 2\nR 1\nD 2\nL 2\nD 2\nR 1\nL 1\nU 1\nD 2\nR 2\nU 2\nR 2\nL 1\nR 1\nL 3\nU 3\nL 3\nD 2\nU 1\nD 1\nU 2\nD 1\nR 1\nD 1\nR 2\nD 3\nU 1\nL 2\nU 1\nD 2\nR 1\nD 1\nL 2\nR 2\nU 1\nL 2\nD 2\nL 1\nU 2\nD 3\nL 1\nU 1\nR 2\nU 3\nD 1\nL 3\nU 1\nL 3\nD 1\nR 2\nL 3\nU 2\nL 2\nU 1\nL 1\nR 3\nD 3\nL 1\nR 2\nD 3\nR 2\nL 3\nD 1\nU 2\nR 3\nU 2\nR 3\nL 2\nU 1\nL 1\nD 3\nU 1\nD 1\nU 2\nD 3\nU 3\nR 1\nU 2\nL 1\nD 1\nL 2\nU 1\nD 1\nL 1\nR 3\nU 3\nL 3\nD 3\nL 2\nD 1\nU 1\nL 1\nU 3\nL 1\nD 3\nR 1\nL 1\nR 2\nU 1\nR 2\nU 3\nR 1\nD 3\nL 3\nU 2\nL 3\nR 1\nD 2\nU 3\nR 3\nD 3\nU 1\nR 3\nD 2\nR 3\nU 1\nD 1\nU 3\nR 1\nL 1\nU 2\nL 1\nU 1\nL 1\nR 1\nD 1\nR 3\nD 4\nL 2\nR 4\nU 3\nD 1\nR 4\nL 4\nR 1\nD 2\nU 3\nR 2\nD 2\nU 3\nR 4\nL 2\nD 3\nL 4\nD 4\nU 4\nR 2\nU 1\nL 3\nD 4\nU 2\nR 1\nL 3\nD 3\nR 4\nD 2\nR 2\nD 4\nU 4\nL 4\nD 4\nR 2\nD 2\nU 3\nD 3\nR 3\nL 2\nD 2\nL 2\nU 3\nL 4\nU 2\nR 4\nD 4\nL 3\nR 1\nU 1\nR 2\nL 1\nD 1\nU 2\nD 3\nL 4\nU 3\nL 1\nU 3\nR 2\nU 3\nR 1\nU 1\nR 2\nU 2\nR 1\nD 4\nU 4\nL 2\nU 2\nD 4\nU 1\nR 4\nL 4\nD 4\nU 3\nD 4\nL 4\nU 3\nL 1\nR 4\nL 3\nD 3\nU 1\nR 4\nD 3\nU 4\nL 2\nU 4\nD 3\nR 2\nD 3\nU 4\nR 4\nL 4\nR 3\nU 1\nR 4\nD 1\nL 3\nU 3\nL 3\nD 1\nL 4\nR 2\nU 1\nL 3\nR 2\nU 4\nL 1\nU 5\nR 2\nL 2\nU 2\nL 2\nR 4\nD 4\nL 5\nD 1\nR 4\nU 5\nL 1\nD 4\nU 1\nL 4\nU 3\nL 1\nR 3\nD 1\nR 2\nL 5\nU 3\nL 5\nU 4\nD 3\nL 5\nD 2\nR 4\nU 2\nL 1\nR 4\nL 5\nR 3\nL 1\nU 2\nL 4\nD 1\nR 2\nL 5\nU 3\nD 2\nR 5\nL 4\nD 2\nR 3\nD 2\nR 4\nD 3\nU 1\nD 1\nU 4\nD 2\nL 2\nR 1\nU 5\nD 5\nU 3\nR 2\nU 3\nL 5\nR 1\nU 3\nL 4\nR 2\nU 3\nD 1\nU 2\nD 2\nL 5\nR 5\nD 3\nL 1\nR 3\nU 2\nD 5\nU 1\nD 5\nR 3\nU 1\nL 5\nR 1\nD 4\nL 4\nD 1\nU 2\nL 4\nR 5\nU 5\nL 4\nD 2\nR 5\nU 1\nL 5\nD 1\nL 1\nU 5\nR 1\nL 2\nR 5\nL 5\nR 2\nL 1\nD 2\nU 1\nL 3\nR 1\nU 5\nD 1\nU 1\nL 5\nU 6\nR 6\nU 5\nD 5\nR 3\nU 1\nR 1\nL 6\nR 6\nD 5\nR 6\nD 4\nL 3\nR 6\nU 5\nD 6\nL 2\nR 1\nD 5\nR 3\nD 2\nL 1\nR 5\nU 5\nD 4\nU 3\nR 5\nU 5\nR 3\nD 5\nR 3\nU 3\nR 2\nD 5\nL 6\nD 3\nU 3\nD 6\nR 5\nU 4\nL 4\nD 3\nU 6\nL 2\nR 1\nU 4\nD 1\nL 2\nU 1\nL 3\nD 4\nU 1\nL 5\nD 1\nR 2\nU 3\nL 1\nR 1\nU 1\nL 4\nU 6\nR 6\nD 3\nU 4\nR 2\nD 5\nL 6\nD 2\nR 4\nD 2\nU 5\nD 3\nU 2\nR 6\nL 5\nR 6\nU 1\nL 5\nU 1\nL 6\nU 1\nD 4\nR 3\nD 3\nL 1\nD 3\nR 2\nL 1\nR 3\nD 4\nL 6\nU 2\nD 5\nU 3\nR 6\nU 2\nR 6\nL 5\nR 1\nU 2\nR 3\nU 1\nR 6\nL 2\nU 6\nR 5\nU 1\nR 4\nL 1\nR 3\nU 3\nL 5\nD 7\nR 2\nD 4\nR 5\nL 3\nR 6\nU 7\nL 7\nU 6\nL 2\nD 2\nR 7\nD 7\nU 3\nR 1\nU 7\nL 2\nD 3\nL 5\nR 4\nU 7\nR 3\nL 7\nD 2\nR 7\nD 5\nL 7\nD 1\nU 7\nR 5\nU 4\nD 4\nU 4\nD 4\nU 1\nR 7\nL 3\nD 3\nU 2\nL 3\nU 1\nD 7\nL 6\nR 3\nU 6\nD 1\nR 6\nD 1\nR 1\nD 7\nU 4\nR 1\nL 4\nU 3\nL 7\nR 2\nD 2\nL 6\nU 2\nR 2\nU 7\nR 5\nL 6\nR 5\nD 1\nR 4\nU 2\nL 1\nD 4\nU 5\nR 4\nD 7\nU 7\nR 1\nU 3\nR 4\nL 1\nR 6\nL 4\nU 4\nL 2\nU 3\nD 2\nL 2\nU 2\nL 6\nR 5\nD 7\nL 2\nU 5\nL 6\nR 7\nL 7\nD 2\nU 6\nD 3\nR 1\nU 1\nD 4\nL 7\nD 7\nU 5\nL 6\nD 1\nL 4\nD 1\nU 1\nL 5\nU 1\nR 5\nD 8\nR 7\nL 5\nU 3\nD 2\nR 2\nL 6\nR 1\nL 4\nR 8\nU 8\nL 5\nR 7\nD 7\nL 2\nR 5\nL 6\nD 2\nL 7\nU 3\nR 2\nD 3\nU 3\nL 6\nU 5\nD 3\nL 6\nU 5\nD 5\nL 1\nU 4\nL 8\nD 3\nL 3\nR 2\nU 6\nD 8\nU 7\nL 6\nD 2\nU 4\nD 1\nU 3\nL 6\nR 2\nD 2\nU 4\nR 8\nD 3\nR 6\nD 6\nU 1\nL 4\nU 3\nL 6\nD 8\nU 7\nD 5\nL 3\nU 4\nD 2\nR 7\nL 8\nU 1\nR 3\nD 5\nU 5\nD 6\nR 3\nL 2\nR 8\nL 3\nU 5\nL 3\nU 5\nL 7\nU 7\nL 2\nU 1\nL 5\nD 7\nU 7\nD 8\nR 2\nD 7\nU 4\nR 4\nU 6\nL 2\nU 8\nD 1\nU 1\nD 4\nL 4\nU 1\nL 5\nR 8\nU 5\nD 4\nR 2\nD 6\nL 1\nD 8\nU 4\nD 5\nL 8\nU 3\nL 5\nD 1\nU 3\nR 1\nD 7\nR 9\nU 8\nR 7\nL 3\nD 8\nU 9\nD 1\nU 7\nL 6\nU 4\nR 8\nU 1\nD 6\nR 3\nL 5\nD 3\nU 1\nL 3\nU 2\nL 3\nU 2\nR 7\nD 2\nR 7\nD 8\nR 1\nD 4\nR 1\nD 6\nR 8\nU 8\nL 2\nU 8\nL 5\nD 1\nU 7\nR 4\nL 9\nU 2\nL 3\nU 4\nL 2\nD 3\nL 4\nU 9\nD 2\nR 2\nU 9\nR 1\nL 4\nD 5\nR 9\nU 3\nL 3\nU 8\nR 5\nU 7\nD 5\nU 9\nR 3\nD 9\nR 1\nD 7\nR 3\nD 6\nL 6\nD 5\nU 9\nD 8\nU 4\nL 5\nR 6\nD 7\nR 6\nL 8\nR 3\nU 3\nR 9\nU 8\nR 6\nL 9\nU 2\nR 9\nL 8\nU 1\nR 9\nL 5\nD 5\nU 9\nL 6\nD 7\nU 3\nD 3\nR 4\nD 1\nL 4\nD 5\nL 4\nU 2\nR 9\nU 7\nL 4\nD 7\nU 9\nR 4\nD 7\nR 7\nD 4\nL 1\nD 2\nL 1\nU 7\nR 8\nD 2\nU 9\nD 6\nL 7\nR 5\nL 3\nR 5\nD 8\nL 3\nR 8\nL 6\nU 6\nL 6\nU 5\nR 7\nL 9\nU 1\nR 3\nD 7\nU 10\nD 1\nU 8\nD 8\nL 5\nU 6\nD 5\nU 9\nR 8\nD 8\nR 9\nD 2\nL 1\nD 8\nR 2\nD 6\nL 10\nR 1\nU 3\nL 8\nU 7\nR 7\nU 7\nD 6\nL 7\nU 3\nL 4\nR 9\nD 8\nU 4\nD 3\nL 8\nR 7\nU 1\nL 9\nD 10\nU 2\nL 5\nU 3\nL 4\nR 10\nL 2\nD 6\nL 6\nD 2\nU 5\nD 3\nR 9\nD 2\nU 1\nD 5\nU 9\nD 7\nR 2\nU 5\nR 4\nD 9\nU 6\nL 10\nD 3\nU 1\nL 1\nD 9\nU 2\nL 8\nU 3\nR 5\nU 7\nD 8\nR 5\nL 8\nU 9\nL 1\nD 5\nU 8\nR 4\nD 7\nU 4\nR 10\nU 9\nR 9\nU 7\nR 3\nU 10\nR 5\nU 7\nR 6\nU 10\nR 9\nU 8\nD 8\nL 1\nU 2\nD 1\nR 9\nU 10\nD 6\nL 3\nD 4\nR 11\nD 11\nR 7\nU 3\nL 3\nU 11\nD 11\nU 5\nR 9\nU 3\nR 4\nD 1\nU 11\nR 2\nL 7\nR 8\nL 2\nD 4\nU 4\nL 9\nR 10\nL 3\nR 7\nD 7\nL 9\nU 6\nL 5\nD 8\nU 4\nD 4\nL 4\nD 2\nU 8\nR 4\nD 4\nU 10\nD 5\nR 5\nD 5\nU 8\nD 2\nL 6\nU 8\nL 2\nD 8\nR 5\nD 5\nU 1\nD 1\nL 9\nR 7\nU 2\nL 7\nR 1\nL 1\nU 2\nR 10\nD 2\nU 8\nL 1\nR 6\nL 3\nR 4\nD 6\nL 2\nD 11\nR 8\nD 11\nL 3\nR 4\nL 10\nU 7\nL 9\nU 4\nL 8\nD 6\nU 8\nR 7\nL 5\nR 8\nL 4\nU 6\nR 5\nU 7\nD 3\nL 8\nU 2\nR 7\nD 3\nR 4\nD 11\nL 8\nU 6\nD 1\nR 11\nL 7\nD 4\nR 4\nL 4\nU 5\nL 8\nR 7\nU 8\nD 12\nR 9\nD 8\nR 7\nL 9\nR 2\nD 1\nL 7\nD 3\nL 1\nR 5\nU 1\nD 12\nR 4\nU 1\nD 4\nL 9\nU 10\nR 5\nD 11\nR 2\nL 3\nU 8\nR 5\nD 8\nU 12\nD 6\nR 2\nD 5\nR 12\nU 7\nL 2\nU 4\nD 5\nU 8\nR 12\nU 1\nL 11\nU 7\nD 10\nL 6\nD 6\nR 1\nL 6\nD 2\nU 5\nR 6\nD 8\nR 4\nL 7\nD 2\nL 7\nD 8\nU 10\nR 1\nU 6\nR 5\nL 4\nR 8\nD 9\nR 5\nU 11\nD 4\nU 11\nR 8\nL 8\nU 2\nR 11\nL 12\nU 7\nL 12\nU 10\nR 3\nD 11\nR 1\nL 8\nD 2\nL 5\nR 4\nU 3\nD 9\nR 8\nD 11\nL 12\nR 11\nL 4\nR 10\nD 6\nU 4\nR 6\nD 6\nU 9\nR 12\nU 5\nR 8\nL 10\nD 1\nU 7\nD 12\nL 3\nU 10\nD 2\nU 6\nD 12\nR 3\nU 2\nD 2\nU 3\nD 11\nR 2\nU 2\nD 9\nR 11\nD 4\nU 6\nR 11\nL 9\nR 10\nD 13\nL 2\nD 2\nL 4\nD 13\nR 7\nL 3\nU 8\nD 5\nR 7\nD 7\nU 13\nD 5\nU 5\nL 12\nD 9\nL 2\nD 6\nU 13\nR 2\nD 10\nL 9\nD 7\nR 2\nU 3\nD 2\nL 3\nR 9\nU 3\nL 12\nU 4\nR 1\nU 13\nR 4\nU 1\nD 10\nR 10\nD 10\nU 5\nL 7\nD 8\nR 1\nD 12\nL 13\nR 10\nD 6\nR 9\nU 4\nR 9\nU 1\nL 3\nR 3\nD 8\nU 6\nL 11\nR 8\nD 5\nU 2\nL 9\nR 7\nL 7\nD 8\nL 12\nR 12\nU 9\nD 9\nU 7\nD 10\nL 3\nR 3\nD 8\nL 11\nU 8\nD 7\nU 11\nL 4\nD 4\nR 3\nU 4\nR 6\nD 5\nU 5\nL 8\nU 4\nL 9\nU 6\nL 8\nD 3\nU 12\nD 5\nL 8\nD 11\nU 4\nR 12\nU 7\nL 5\nD 4\nR 4\nU 7\nR 9\nL 5\nU 2\nL 3\nD 2\nR 6\nU 2\nR 8\nD 10\nU 14\nL 3\nR 4\nU 10\nR 7\nL 11\nR 7\nU 4\nR 8\nL 14\nD 11\nU 12\nR 10\nL 8\nR 11\nL 4\nU 1\nL 2\nR 7\nU 13\nD 5\nU 2\nL 6\nD 7\nR 5\nU 4\nD 10\nU 5\nD 2\nR 9\nU 13\nL 10\nU 1\nR 10\nD 14\nL 5\nR 12\nL 7\nD 2\nL 2\nD 5\nR 4\nU 6\nD 7\nR 12\nU 9\nD 9\nR 6\nU 1\nD 14\nU 14\nD 14\nL 7\nR 10\nU 3\nD 2\nR 10\nL 14\nR 7\nD 5\nU 1\nL 8\nU 2\nD 3\nU 6\nL 11\nR 13\nL 10\nD 9\nU 5\nR 6\nU 2\nD 7\nU 5\nL 6\nR 8\nD 11\nR 14\nD 5\nR 10\nL 13\nR 1\nU 4\nL 9\nR 2\nD 1\nU 10\nD 6\nU 3\nR 13\nL 9\nR 2\nD 3\nR 14\nL 2\nR 14\nU 1\nR 7\nL 1\nU 6\nD 6\nR 10\nL 12\nD 10\nR 11\nD 13\nL 3\nR 2\nL 1\nR 10\nU 1\nL 7\nR 5\nD 6\nU 11\nL 8\nR 7\nD 10\nU 13\nR 12\nD 8\nL 7\nU 8\nR 14\nU 10\nL 6\nD 15\nR 8\nL 10\nU 13\nL 3\nU 13\nL 9\nR 4\nD 6\nR 12\nL 12\nR 4\nU 12\nD 6\nR 2\nL 11\nR 7\nD 1\nU 4\nR 14\nU 6\nD 1\nU 15\nD 14\nR 3\nD 14\nL 1\nR 9\nL 2\nD 11\nR 11\nD 10\nR 1\nL 9\nU 6\nR 8\nL 4\nR 9\nU 13\nD 15\nL 2\nD 2\nL 2\nD 6\nR 10\nU 10\nL 8\nD 11\nL 8\nR 10\nU 3\nR 7\nU 15\nR 11\nL 10\nU 2\nR 8\nL 8\nD 5\nR 11\nU 7\nL 13\nD 15\nU 4\nD 10\nR 11\nD 6\nL 2\nU 3\nR 2\nL 1\nD 14\nU 5\nL 14\nD 13\nR 12\nU 8\nR 1\nL 14\nU 6\nD 10\nR 3\nU 8\nL 2\nR 6\nD 10\nU 9\nL 2\nD 13\nL 13\nD 9\nL 10\nU 14\nR 11\nL 14\nU 10\nL 6\nD 14\nL 11\nR 4\nL 9\nU 3\nD 13\nL 5\nR 16\nU 3\nL 9\nD 6\nR 15\nU 6\nL 4\nR 10\nD 12\nR 4\nD 2\nU 11\nD 13\nR 6\nU 15\nR 14\nD 14\nU 8\nR 9\nL 5\nD 16\nU 9\nR 15\nD 13\nR 3\nL 2\nR 3\nU 14\nD 9\nU 2\nD 6\nU 9\nD 7\nL 13\nD 7\nL 5\nR 3\nU 2\nL 13\nR 9\nD 1\nL 16\nD 8\nR 12\nU 15\nR 4\nD 15\nL 12\nD 13\nR 4\nL 2\nU 5\nR 13\nL 15\nD 12\nL 3\nD 13\nL 5\nD 16\nL 11\nD 13\nU 1\nD 9\nL 10\nU 11\nD 12\nU 11\nD 14\nU 16\nD 14\nU 10\nR 7\nL 11\nR 14\nU 11\nR 5\nU 1\nD 16\nR 16\nL 9\nU 7\nD 7\nR 8\nD 7\nU 10\nL 7\nD 6\nU 4\nD 2\nL 3\nD 3\nL 2\nR 3\nL 9\nD 2\nR 12\nD 11\nU 11\nL 14\nU 4\nL 12\nR 13\nL 9\nD 11\nR 12\nL 15\nR 15\nL 15\nR 16\nU 17\nD 4\nL 9\nU 9\nD 17\nL 8\nU 15\nD 17\nU 9\nR 4\nU 6\nL 1\nD 7\nR 3\nD 11\nL 10\nR 1\nU 14\nD 13\nR 7\nL 8\nU 16\nL 16\nU 12\nD 3\nR 4\nD 8\nR 8\nD 1\nL 12\nR 16\nD 3\nR 7\nD 16\nU 11\nR 6\nD 13\nR 4\nL 3\nR 6\nU 1\nR 4\nD 4\nU 13\nL 7\nD 17\nR 4\nD 6\nL 1\nU 17\nL 16\nU 12\nL 11\nR 1\nL 11\nD 8\nU 15\nD 6\nL 5\nU 16\nR 6\nD 11\nL 17\nD 7\nL 1\nD 8\nL 16\nU 8\nR 4\nL 17\nD 2\nL 1\nU 16\nD 8\nL 17\nU 12\nD 4\nR 1\nD 12\nU 2\nL 11\nU 17\nL 3\nR 7\nL 10\nU 16\nR 8\nU 6\nL 3\nD 15\nL 11\nR 7\nU 14\nR 8\nL 9\nD 6\nL 3\nU 17\nR 1\nD 13\nU 15\nL 18\nU 11\nR 3\nU 16\nD 12\nR 1\nD 6\nL 17\nR 9\nL 6\nU 2\nD 2\nU 16\nD 12\nR 1\nU 17\nR 16\nD 12\nU 3\nD 11\nL 13\nU 11\nR 15\nU 13\nD 11\nU 8\nL 3\nD 1\nL 7\nR 9\nD 18\nR 17\nU 2\nL 16\nD 8\nL 14\nD 11\nR 4\nD 12\nU 5\nD 6\nU 2\nD 4\nL 1\nR 11\nD 3\nU 10\nL 1\nR 16\nU 10\nL 17\nD 5\nR 16\nU 18\nR 1\nD 16\nR 14\nD 11\nU 13\nD 13\nR 5\nL 9\nU 11\nR 18\nL 14\nU 14\nL 18\nR 15\nD 10\nU 10\nR 17\nU 12\nL 2\nD 11\nR 15\nU 3\nR 17\nL 1\nR 1\nU 1\nL 8\nU 15\nR 15\nL 12\nU 2\nR 1\nL 9\nR 3\nL 6\nR 18\nD 9\nR 12\nU 6\nL 17\nR 11\nD 8\nR 17\nD 12\nL 2\nR 9\nU 4\nD 17\nR 18\nD 12\nL 9\nR 16\nU 5\nR 1\nL 12\nR 9\nL 8\nU 8\nR 2\nU 9\nL 2\nD 18\nU 11\nL 17\nU 3\nL 11\nR 3\nL 5\nD 1\nR 4\nU 10\nD 18\nR 10\nD 10\nL 5\nR 7\nD 2\nR 2\nL 18\nU 4\nD 10\nU 16\nD 1\nL 2\nU 17\nD 5\nU 9\nR 13\nD 6\nR 14\nD 10\nL 15\nR 13\nL 6\nU 11\nR 6\nL 4\nR 19\nL 4\nD 13\nR 1\nL 9\nD 4\nR 12\nU 18\nD 3\nU 17\nR 19\nL 6\nR 6\nD 8\nR 12\nL 10\nR 3\nU 5\nL 2\nD 7\nL 9\nD 16\nL 16\nU 14\nL 12\nR 2\nL 17\nR 18\nD 12\nR 16\nD 19\nU 6\nD 19\nU 13\nR 4\nD 18\nL 14\nU 14\nD 12\nR 10\nL 13\nD 10\nU 10\nD 2\nU 18\nL 19\nR 15\nD 6\nL 1\nD 10\nR 7\nD 2\nR 19\nD 5\nU 19\nL 13\nU 17\nL 3\nR 19\nU 9\nL 7\nD 6\nR 12\nL 10\nR 9\nD 9\nU 13\nR 7\nL 1\nU 1\nD 17\n`.trim()\n","export { ViewDay as default } from './ViewDay'\n","import { h, Fragment } from 'preact'\nimport { Answer, Visualization } from '/components'\nimport input from './input'\nimport { InfiniteGrid, output2dArray, Point } from '../util'\nimport { useEffect, useState } from 'preact/hooks'\nimport { useStore } from '/store'\nimport { setIntervalImmediate } from '/shared/web-utilities/util'\n\nenum Tile {\n  Empty = ' ',\n  Flowing = '┊',\n  Wall = '█',\n  Sand = '▒'\n}\n\nconst parseInput = () =>\n  input.split('\\n').map((line) =>\n    line\n      .split(' -> ')\n      .map((nums) => nums.split(',').map(Number))\n      .map(([x, y]) => ({ x, y }))\n  )\n\nconst buildCave = (paths: Point[][]) => {\n  const cave = new InfiniteGrid(Tile.Empty)\n  for (const path of paths) {\n    let current = path.shift()!\n    while (path.length) {\n      const next = path.shift()!\n      for (\n        let x = Math.min(current.x, next.x);\n        x <= Math.max(current.x, next.x);\n        x++\n      ) {\n        for (\n          let y = Math.min(current.y, next.y);\n          y <= Math.max(current.y, next.y);\n          y++\n        ) {\n          cave.set(x, y, Tile.Wall)\n        }\n      }\n      current = next\n    }\n  }\n  return cave\n}\n\nconst dropSand = (\n  cave: InfiniteGrid<Tile>,\n  x: number,\n  y: number,\n  bottom: number,\n  bottomSolid = false\n) => {\n  const isOpen = (x: number, y: number) =>\n    !(bottomSolid && y >= bottom) &&\n    [Tile.Empty, Tile.Flowing].includes(cave.get(x, y))\n  while (y < bottom) {\n    const oldX = x\n    const oldY = y\n    y++\n    if (!isOpen(x, y)) {\n      x = isOpen(x - 1, y) ? x - 1 : x + 1\n      if (!isOpen(x, y)) {\n        cave.set(oldX, oldY, Tile.Sand)\n        return { x: oldX, y: oldY }\n      }\n    }\n    cave.set(x, y, Tile.Flowing)\n  }\n  return { x, y }\n}\n\nexport const Part1 = () => {\n  const showVisualization = useStore((s) => s.showVisualization)\n  const [result, setResult] = useState<number | undefined>()\n  const [output, setOutput] = useState<string | undefined>()\n\n  useEffect(() => {\n    setResult(undefined)\n    setOutput(undefined)\n    const paths = parseInput()\n    const cave = buildCave(paths)\n    const abyss = cave.bounds.max.y\n    let count = 0\n    let id: NodeJS.Timeout\n\n    const tick = () => {\n      const { y } = dropSand(cave, 500, 0, abyss)\n      if (showVisualization) setOutput(output2dArray(cave.toArray()))\n      if (y >= abyss) {\n        setResult(count)\n        clearInterval(id)\n        return false\n      }\n      count++\n      return true\n    }\n\n    if (showVisualization) id = setIntervalImmediate(tick, 50)\n    else while (tick()) {}\n\n    return () => clearInterval(id)\n  }, [showVisualization])\n\n  return (\n    <>\n      {result && (\n        <p>\n          <Answer>{result}</Answer> units of sand come to rest before sand\n          starts flowing into the abyss.\n        </p>\n      )}\n      <Visualization>{output}</Visualization>\n    </>\n  )\n}\n\nexport const Part2 = () => {\n  const showVisualization = useStore((s) => s.showVisualization)\n  const [result, setResult] = useState<number | undefined>()\n  const [output, setOutput] = useState<string | undefined>()\n\n  useEffect(() => {\n    setResult(undefined)\n    setOutput(undefined)\n    const paths = parseInput()\n    const cave = buildCave(paths)\n    const floor = cave.bounds.max.y + 2\n    let count = 0\n    let id: NodeJS.Timeout\n\n    const tick = () => {\n      const { x, y } = dropSand(cave, 500, 0, floor, true)\n      if (showVisualization) setOutput(output2dArray(cave.toArray()))\n      count++\n      if (x === 500 && y === 0) {\n        setResult(count)\n        clearInterval(id)\n        return false\n      }\n      return true\n    }\n\n    if (showVisualization) id = setInterval(tick, 50)\n    else while (tick()) {}\n\n    return () => clearInterval(id)\n  }, [showVisualization])\n\n  return (\n    <>\n      {result && (\n        <p>\n          <Answer>{result}</Answer> units of sand come to rest.\n        </p>\n      )}\n      <Visualization>{output}</Visualization>\n    </>\n  )\n}\n"],"sourceRoot":""}